{
  "openapi": "3.0.1",
  "info": {
    "title": "Commerce Webservices",
    "description": "These services manage all of the common commerce functionality, and also include customizations from installed AddOns. The implementing extension is called commercewebservices.",
    "license": {
      "name": "Use of this file is subject to the terms of your agreement with SAP SE or its affiliates respecting the use of the SAP product for which this file relates.",
      "url": ""
    },
    "version": "2.2.1"
  },
  "externalDocs": {
    "description": "SAP Commerce Cloud",
    "url": "https://www.sap.com"
  },
  "servers": [
    {
      "url": "https://sap-composable-storefront.iscm.sqli.com/occ/v2",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "oauth2_Password": [
        "basic"
      ]
    },
    {
      "oauth2_client_credentials": [
        "extended"
      ]
    }
  ],
  "tags": [
    {
      "name": "PunchOut",
      "description": "PunchOut"
    }
  ],
  "paths": {
    "/basesites": {
      "get": {
        "tags": [
          "Base Sites"
        ],
        "summary": "Get all base sites.",
        "description": "Get all base sites with corresponding base stores details in FULL mode.",
        "operationId": "getBaseSites",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
          
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSiteList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSiteList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/basestores/{baseStoreUid}": {
      "get": {
        "tags": [
          "Base Stores"
        ],
        "summary": "Get a base store.",
        "description": "Returns details of a specific base store based on its identifier. The response contains detailed base store information.",
        "operationId": "getBaseStore",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseStoreUid",
            "in": "path",
            "description": "Base store name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BaseStore"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseStore"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/cardtypes": {
      "get": {
        "tags": [
          "Miscs"
        ],
        "summary": "Get a list of supported payment card types.",
        "description": "Lists supported payment card types.",
        "operationId": "getCardTypes",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardTypeList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardTypeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/catalogs": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Get a list of catalogs",
        "description": "Returns all catalogs with versions defined for the base store.",
        "operationId": "getCatalogs",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/catalogs/{catalogId}": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Get a catalog",
        "description": "Returns information about a catalog based on its ID, along with the versions defined for the current base store.",
        "operationId": "getCatalog",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Catalog identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Get information about catalog version",
        "description": "Returns information about the catalog version that exists for the current base store.",
        "operationId": "getCatalogVersion",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Catalog identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogVersionId",
            "in": "path",
            "description": "Catalog version identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogVersion"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}/categories/{categoryId}": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Get information about catagory in a catalog version",
        "description": "Returns information about a specified category that exists in a catalog version available for the current base store.",
        "operationId": "getCategories",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Catalog identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogVersionId",
            "in": "path",
            "description": "Catalog version identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Category identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryHierarchy"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryHierarchy"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/categories/{categoryId}/products": {
      "get": {
        "tags": [
          "B2B Categories"
        ],
        "summary": "Gets a list of products under a specific category",
        "description": "Returns a list of products in the specified category.",
        "operationId": "getProductsByCategory",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "The category ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Serialized query in format: freeTextSearch: sort: facetKey1: facetValue1: facetKey2: facetValue2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the display search results.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchPage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/ccpconfigurator/{configId}": {
      "get": {
        "tags": [
          "Product Configurator CCP"
        ],
        "summary": "Gets a product configuration",
        "description": "Returns a product configuration, specified by its id. In case this call is done in the context of a logged-in session, the call ensures that the configuration is only returned if the user is authorized to view the configuration",
        "operationId": "getProductConfiguration",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configId",
            "in": "path",
            "description": "Configuration identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expMode",
            "in": "query",
            "description": "If this parameter is provided and its value is true, the system tries to execute the request in expert mode (only possible if the current user belongs to group 'sapproductconfigexpmodegroup'",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "If the parameter is provided only the attributes of the requested group are returned. If the parameter is not provided, attributes for all groups are returned.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfiguration"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Product Configurator CCP"
        ],
        "summary": "Updates a product configuration",
        "description": "Updates a product configuration. It's possible to send only the changed parts of the configuration, for example a single value change for an attribute. These changes must include their entire path through the configuration (the group they belong to and its parent groups)",
        "operationId": "updateProductConfiguration",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configId",
            "in": "path",
            "description": "Configuration identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expMode",
            "in": "query",
            "description": "If this parameter is provided and its value is true, the system tries to execute the request in expert mode (only possible if the current user belongs to group 'sapproductconfigexpmodegroup'",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CCPConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfiguration"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/ccpconfigurator/{configId}/configurationOverview": {
      "get": {
        "tags": [
          "Product Configurator CCP"
        ],
        "summary": "Gets a product configuration overview",
        "description": "Gets a configuration overview, a simplified, condensed read-only view on the product configuration. Only the selected attribute values are present here",
        "operationId": "getProductConfigurationOverview",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configId",
            "in": "path",
            "description": "Configuration identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfigurationOverview"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfigurationOverview"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Product Configurator CCP"
        ],
        "summary": "Updates the product configuration overview",
        "description": "Updates the configuration overview, a simplified, condensed read-only view on the product configuration. Only the selected attribute values are present here",
        "operationId": "updateProductConfigurationOverview",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configId",
            "in": "path",
            "description": "Configuration identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CCPConfigurationOverview"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfigurationOverview"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfigurationOverview"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/ccpconfigurator/{configId}/pricing": {
      "get": {
        "tags": [
          "Product Configurator CCP"
        ],
        "summary": "Gets prices for a product configuration",
        "description": "Gets price elements on configuration level and on attribute value level if present. Those price elements include e.g. the configuration base price and the sum of selected options",
        "operationId": "getProductConfigurationPricing",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configId",
            "in": "path",
            "description": "Configuration identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Specifies the group for which the value prices are requested. In case not specified, no value prices are returned",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfigurationPricing"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfigurationPricing"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/ccpconfigurator/{configId}/variants": {
      "get": {
        "tags": [
          "Product Configurator CCP Variant Search"
        ],
        "summary": "Gets variants for a product configuration",
        "description": "Gets variants that match the current configuration attributes",
        "operationId": "getProductConfigurationVariantSearch",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configId",
            "in": "path",
            "description": "Configuration identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CCPConfigurationProductVariant"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CCPConfigurationProductVariant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/cities/{cityId}/districts": {
      "get": {
        "tags": [
          "Cities"
        ],
        "summary": "Gets districts for a city.",
        "description": "Gets all districts for a city.",
        "operationId": "getDistricts",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cityId",
            "in": "path",
            "description": "City identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DistrictList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistrictList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/cms/components": {
      "get": {
        "tags": [
          "Components"
        ],
        "summary": "Get component data",
        "description": "Finds cms components by the specified IDs. When none is provided, this will retrieve all components\nThe components list will be filtered by the given catalog, product or category restrictions, as well as by the pagination information. The result will be sorted in the specified order.",
        "operationId": "getComponentsByIds",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogCode",
            "in": "query",
            "description": "Catalog code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryCode",
            "in": "query",
            "description": "Category code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "componentIds",
            "in": "query",
            "description": "List of Component identifiers",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "Optional pagination parameter. Default value 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BASIC",
                "DEFAULT",
                "FULL"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Optional pagination parameter. Default value 10.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "productCode",
            "in": "query",
            "description": "Product code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort criterion. No default value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListAdaptedComponents"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAdaptedComponents"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Components"
        ],
        "summary": "Get components' data by id given in body",
        "description": "Given a list of component identifiers in body, return cms component data.",
        "operationId": "searchComponentsByIds",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogCode",
            "in": "query",
            "description": "Catalog code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryCode",
            "in": "query",
            "description": "Category code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "Optional pagination parameter. Default value 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BASIC",
                "DEFAULT",
                "FULL"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Optional pagination parameter. Default value 10.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "productCode",
            "in": "query",
            "description": "Product code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort criterion. No default value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentIDList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListAdaptedComponents"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAdaptedComponents"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/cms/components/{componentId}": {
      "get": {
        "tags": [
          "Components"
        ],
        "summary": "Get component data by id",
        "description": "Given a component identifier, return cms component data.",
        "operationId": "getComponentById",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogCode",
            "in": "query",
            "description": "Catalog code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryCode",
            "in": "query",
            "description": "Category code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "Component identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BASIC",
                "DEFAULT",
                "FULL"
              ]
            }
          },
          {
            "name": "productCode",
            "in": "query",
            "description": "Product code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentAdaptedData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentAdaptedData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/cms/pages": {
      "get": {
        "tags": [
          "Pages"
        ],
        "summary": "Get page data with a list of cms content slots",
        "description": "Get page data with a list of cms content slots based on pageLabelOrId or code. If none is provided then this will retrieve a Homepage cms content slots.\nContent pages can be filtered by pageLabelOrId while the rest of the page types can be filtered by the code.",
        "operationId": "getPage",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "If pageType is ProductPage, code should be product code; if pageType is CategoryPage, code should be category code; if pageType is CatalogPage, code should be catalog code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BASIC",
                "DEFAULT",
                "FULL"
              ]
            }
          },
          {
            "name": "pageLabelOrId",
            "in": "query",
            "description": "Page Label or Id; if no page has a label that matches the provided label exactly, try to find pages whose label starts with a section of the provided label. Otherwise, try to find the page by id. Note: URL encoding on the page label should be applied when the label contains special characters",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageType",
            "in": "query",
            "description": "Page type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ContentPage",
                "ProductPage",
                "CategoryPage",
                "CatalogPage"
              ]
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PageAdaptedData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAdaptedData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/cms/pages/{pageId}": {
      "get": {
        "tags": [
          "Pages"
        ],
        "summary": "Get page data for specific page id with a list of cms content slots",
        "description": "Given a page identifier, return the page data with a list of cms content slots, each of which contains a list of cms component data.",
        "operationId": "getPageById",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BASIC",
                "DEFAULT",
                "FULL"
              ]
            }
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Page Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PageAdaptedData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAdaptedData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/cms/sitepages": {
      "get": {
        "tags": [
          "Pages"
        ],
        "summary": "Get a list of page data.",
        "description": "Get a list page data with pagination support.",
        "operationId": "getAllPages",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "Pagination parameter. Default value 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BASIC",
                "DEFAULT",
                "FULL"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Optional pagination parameter. Default value 10.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "pageType",
            "in": "query",
            "description": "Page type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ContentPage",
                "ProductPage",
                "CategoryPage",
                "CatalogPage"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort criterion. No default value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListAdaptedPages"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAdaptedPages"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/costcenters": {
      "get": {
        "tags": [
          "B2B Cost Centers"
        ],
        "summary": "Get active cost centers.",
        "description": "Returns the list of all active cost centers.",
        "operationId": "getActiveCostCenters",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/B2BCostCenterList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BCostCenterList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "B2B Cost Centers"
        ],
        "summary": "Create a new cost center.",
        "description": "Creates a new cost center.",
        "operationId": "createCostCenter",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2BCostCenter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BCostCenter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/costcenters/{costCenterCode}": {
      "get": {
        "tags": [
          "B2B Cost Centers"
        ],
        "summary": "Get a cost center.",
        "description": "Returns a specific cost center based on specific code. The response contains detailed cost center information.",
        "operationId": "getCostCenter",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "costCenterCode",
            "in": "path",
            "description": "Cost center identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/B2BCostCenter"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BCostCenter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "B2B Cost Centers"
        ],
        "summary": "Update a cost center.",
        "description": "Updates a cost center. Only attributes provided in the request body will be changed.",
        "operationId": "updateCostCenter",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "costCenterCode",
            "in": "path",
            "description": "Cost center identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2BCostCenter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BCostCenter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/costcenters/{costCenterCode}/budgets": {
      "get": {
        "tags": [
          "B2B Cost Centers"
        ],
        "summary": "Get all budgets and select budgets which belong to a specific cost center.",
        "description": "Returns the list of all budgets, where those budgets, which belong to a specific cost center, are selected.",
        "operationId": "getBudgetsForCostCenter",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "costCenterCode",
            "in": "path",
            "description": "Cost center identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "B2B Cost Centers"
        ],
        "summary": "Add a budget to a specific cost center.",
        "description": "Adds a budget to a specific cost center.",
        "operationId": "doAddBudgetToCostCenter",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "budgetCode",
            "in": "query",
            "description": "The budget which will be added to a specific cost center.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "costCenterCode",
            "in": "path",
            "description": "Identifier of the cost center to which the budget will be added.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BSelectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/costcenters/{costCenterCode}/budgets/{budgetCode}": {
      "delete": {
        "tags": [
          "B2B Cost Centers"
        ],
        "summary": "Remove a budget from a specific cost center.",
        "description": "Removes a budget from a specific cost center.",
        "operationId": "removeBudgetFromCostCenter",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "budgetCode",
            "in": "path",
            "description": "The budget which will be removed from a specific cost center.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "costCenterCode",
            "in": "path",
            "description": "Identifier of the cost center from which the budget will be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BSelectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/costcentersall": {
      "get": {
        "tags": [
          "B2B Cost Centers"
        ],
        "summary": "Get cost centers.",
        "description": "Returns the list of all cost centers.",
        "operationId": "getCostCenters",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BCostCenterList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/countries": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Get a list of countries.",
        "description": "If the value of type equals to shipping, then return shipping countries. If the value of type equals to billing, then return billing countries. If the value of type is not given, return all countries. The list is sorted alphabetically.",
        "operationId": "getCountries",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of countries.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "SHIPPING",
                "BILLING"
              ]
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CountryList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/countries/{countyIsoCode}/regions": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Fetch the list of regions for the provided country.",
        "description": "Lists all regions.",
        "operationId": "getCountryRegions",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countyIsoCode",
            "in": "path",
            "description": "An ISO code for a country",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RegionList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/currencies": {
      "get": {
        "tags": [
          "Miscs"
        ],
        "summary": "Get a list of available currencies.",
        "description": "Lists all available currencies (all usable currencies for the current store). If the list of currencies for a base store is empty, a list of all currencies available in the system is returned.",
        "operationId": "getCurrencies",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/customergroups": {
      "get": {
        "tags": [
          "Customer Groups"
        ],
        "summary": "Get all subgroups of a customergroup.",
        "description": "Returns all customer groups that are direct subgroups of a customergroup.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
        "operationId": "getCustomerGroups",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "Current page number (starts with 0).",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "BASIC"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of customer group returned in one page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Customer Groups"
        ],
        "summary": "Creates a new customer group.",
        "description": "Creates a new customer group that is a direct subgroup of a customergroup.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
        "operationId": "createCustomerGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserGroup"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/customergroups/{groupId}": {
      "get": {
        "tags": [
          "Customer Groups"
        ],
        "summary": "Get a specific customer group.",
        "description": "Returns a customer group with a specific groupId.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
        "operationId": "getCustomerGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "BASIC"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/customergroups/{groupId}/members": {
      "put": {
        "tags": [
          "Customer Groups"
        ],
        "summary": "Sets members for a user group.",
        "description": "Sets members for a user group. The list of existing members is overwritten with a new one.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
        "operationId": "replaceUsersForCustomerGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MemberList"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Customer Groups"
        ],
        "summary": "Assigns user(s) to a customer group.",
        "description": "Assigns user(s) to a customer group.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
        "operationId": "updateCustomerGroupWithUsers",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MemberList"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/customergroups/{groupId}/members/{userId}": {
      "delete": {
        "tags": [
          "Customer Groups"
        ],
        "summary": "Deletes a user from a customer group.",
        "description": "Deletes user from a customer group.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
        "operationId": "removeUsersFromCustomerGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/deliverycountries": {
      "get": {
        "tags": [
          "Miscs"
        ],
        "summary": "Get a list of shipping countries.",
        "description": "Lists all supported delivery countries for the current store. The list is sorted alphabetically.",
        "operationId": "getDeliveryCountries",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CountryList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/export/products": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Get a list of product exports.",
        "description": "Used for product export. Depending on the timestamp parameter, it can return all products or only products modified after the given time.",
        "operationId": "getExportedProducts",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalog",
            "in": "query",
            "description": "The catalog to retrieve products from. The catalog must be provided along with the version.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "When this parameter is set, only products modified after the given time will be returned. This parameter should be in ISO-8601 format (for example, 2018-01-09T16:28:45+0000).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The catalog version. The catalog version must be provided along with the catalog.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProductList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/feeds/orders/statusfeed": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "summary": "Get a list of orders with status updates.",
        "description": "Returns the orders that have changed status. Returns only the elements from the current baseSite that have been updated after the provided timestamp.",
        "operationId": "getOrderStatusFeed",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Only items newer than the given parameter are retrieved. This parameter should be in ISO-8601 format (for example, 2018-01-09T16:28:45+0000).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStatusUpdateElementList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStatusUpdateElementList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/forgottenpasswordtokens": {
      "post": {
        "tags": [
          "Forgotten Passwords"
        ],
        "summary": "Generates a token to restore a customer's forgotten password.",
        "description": "Generates a token in order to restore a customer's forgotten password.",
        "operationId": "doRestorePassword",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Customer's user id. Customer user id is case insensitive.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/integration/merchant_callback": {
      "post": {
        "tags": [
          "Merchant Callback"
        ],
        "summary": "Verify the decision of the Merchant",
        "description": "Verifies the decision of the merchant. \n\nNote, the “Try it out” button is not enabled for this method (always returns an error) because the Merchant Callback Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.",
        "operationId": "doHandleMerchantCallback",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/integration/users/{userId}/carts/{cartId}/payment/sop/response": {
      "post": {
        "tags": [
          "Merchant Callback"
        ],
        "summary": "Verify the decision of the Merchant for a cart",
        "description": "Verifies the decision of the merchant for a specified cart, and stores information of the PaymentSubscriptionResult for the cart. \n\nNote, the “Try it out” button is not enabled for this method (always returns an error) because the Merchant Callback Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.",
        "operationId": "doHandleCartMerchantCallback",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/languages": {
      "get": {
        "tags": [
          "Miscs"
        ],
        "summary": "Get a list of available languages.",
        "description": "Lists all available languages (all languages used for a particular store). If the list of languages for a base store is empty, a list of all languages available in the system will be returned.",
        "operationId": "getLanguages",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/LanguageList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LanguageList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/messagecenter/im/conversations": {
      "post": {
        "tags": [
          "Message Center"
        ],
        "summary": "Sends messages",
        "description": "Sends messages in a conversation and returns the conversation data.",
        "operationId": "sendMessage",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/conversationMessageList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/conversation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/conversation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/messagecenter/im/conversations/agentconversations": {
      "get": {
        "tags": [
          "Message Center"
        ],
        "summary": "Gets unassigned or open conversations for current CSA",
        "description": "Returns unassigned or open conversation list for current CSA.",
        "operationId": "getConversationsForAgent",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "the conversation status",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "unassigned"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/conversationList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/conversationList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/messagecenter/im/conversations/customerconversations": {
      "get": {
        "tags": [
          "Message Center"
        ],
        "summary": "Gets conversations of current customer",
        "description": "Returns the conversation list of current customer.",
        "operationId": "getConversationsForCustomer",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/conversationList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/conversationList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/messagecenter/im/conversations/{conversationId}/close": {
      "patch": {
        "tags": [
          "Message Center"
        ],
        "summary": "Closes an open conversation",
        "description": "Closes an open conversation and returns the conversation data.",
        "operationId": "closeConversation",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "the uid of conversation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/conversation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/conversation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/messagecenter/im/conversations/{conversationId}/messages": {
      "get": {
        "tags": [
          "Message Center"
        ],
        "summary": "Gets conversation messages for current customer or current CSA",
        "description": "Returns all messages of a specific conversation.",
        "operationId": "getMessagesForConversation",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "the uid of conversation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/conversationMessageList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/conversationMessageList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/messagecenter/im/conversations/{conversationId}/pick": {
      "patch": {
        "tags": [
          "Message Center"
        ],
        "summary": "Picks an unassigned conversation",
        "description": "Picks an unassigned conversation and returns the conversation data.",
        "operationId": "pickConversation",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "the uid of conversation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/conversation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/conversation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orderApprovalPermissionTypes": {
      "get": {
        "tags": [
          "Order Approval Permission Types"
        ],
        "summary": "Get order approval permission types.",
        "description": "Returns the list of order approval permission types.",
        "operationId": "getOrderApprovalPermissionTypes",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApprovalPermissionTypeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orderforms": {
      "get": {
        "tags": [
          "Order Forms"
        ],
        "operationId": "getOrderFormsForCurrentUser",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrderFormList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderFormList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Order Forms"
        ],
        "operationId": "createOrderForm",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrderForm"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orderforms/{orderFormCode}": {
      "get": {
        "tags": [
          "Order Forms"
        ],
        "operationId": "getOrderFormForCode",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orderFormCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrderForm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderForm"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Order Forms"
        ],
        "operationId": "updateOrderForm",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orderFormCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrderForm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderForm"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Order Forms"
        ],
        "operationId": "deleteOrderForm",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderFormCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orderforms/{orderFormCode}/cart": {
      "post": {
        "tags": [
          "Order Forms"
        ],
        "operationId": "orderForm",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orderFormCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orders/{code}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get a order.",
        "description": "Returns details of a specific order based on the order GUID (Globally Unique Identifier) or the order CODE. The response contains detailed order information.",
        "operationId": "getOrder",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Order GUID (Globally Unique Identifier) or order CODE",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orgProducts/{productCode}": {
      "get": {
        "tags": [
          "B2B Products"
        ],
        "summary": "Returns a product.",
        "description": "Returns a product, based on the specified product code.",
        "operationId": "getOrgProduct",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "The product code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orgUsers": {
      "post": {
        "tags": [
          "B2B Users"
        ],
        "summary": "Create a registration request for a B2B user",
        "description": "Create a registration request for a B2B user.",
        "operationId": "createRegistrationRequest",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "sap-commerce-cloud-captcha-token",
            "in": "header",
            "description": "The user's response token returned by captcha provider, for example, the g-recaptcha-response returned by google recaptcha client. When the captchaCheckEnabled = true for the store, the field is mandatory and will call the provider to validate.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgUserRegistrationData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orgUsers/{userId}": {
      "get": {
        "tags": [
          "B2B Users"
        ],
        "summary": "Get a B2B user profile",
        "description": "Returns a B2B user profile.",
        "operationId": "getOrgUser",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orgUsers/{userId}/cartFromOrder": {
      "post": {
        "tags": [
          "B2B Orders"
        ],
        "summary": "Create a cart based on a previous order",
        "description": "Returns a list of modification applied to the new cart compared to original. e.g lower quantity was added",
        "operationId": "createCartFromOrder",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BASIC",
                "DEFAULT",
                "FULL"
              ]
            }
          },
          {
            "name": "orderCode",
            "in": "query",
            "description": "The order code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartModificationList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModificationList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orgUsers/{userId}/carts/{cartId}/addresses/delivery": {
      "put": {
        "tags": [
          "B2B Carts"
        ],
        "summary": "Sets the delivery address for the checkout cart.",
        "description": "Sets the delivery address for the checkout cart.",
        "operationId": "replaceOrgCartDeliveryAddress",
        "parameters": [
          {
            "name": "addressId",
            "in": "query",
            "description": "The id of the address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orgUsers/{userId}/carts/{cartId}/entries/": {
      "put": {
        "tags": [
          "B2B Carts"
        ],
        "summary": "Updates the quantity for specific products in the cart",
        "description": "Creates the specified products in the cart, or overwrites the details of existing products in the cart, based either on the product code or the entryNumber. For existing products, attributes not provided in the request body will be defined again (set to null or default).",
        "operationId": "replaceOrgCartEntries",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderEntryList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartModificationList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModificationList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "B2B Carts"
        ],
        "summary": "Adds more quantity to the cart of specific products",
        "description": "Updates the details of specified products in the cart, based either on the product code or the entryNumber.",
        "operationId": "doAddOrgCartEntries",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderEntryList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartModificationList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModificationList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orgUsers/{userId}/orders": {
      "post": {
        "tags": [
          "B2B Orders"
        ],
        "summary": "Places a B2B Order.",
        "description": "Places a B2B Order. By default the payment type is ACCOUNT. Please set payment type to CARD if placing an order using credit card.",
        "operationId": "placeOrgOrder",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "query",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "termsChecked",
            "in": "query",
            "description": "Whether terms were accepted or not.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orgUsers/{userId}/orgUnits/orders": {
      "get": {
        "tags": [
          "B2B Orders"
        ],
        "summary": "Get order history for the user's organization branch.",
        "description": "Retrieves order history data for all orders placed by a default organization branch of the user, for a specified base store. The response can display the results across multiple pages, if required.",
        "operationId": "getUserBranchOrderHistory",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Serialized filters applied to the query in the following format: ::facetKey1:facetValue1:facetKey2:facetValue2. Correct values for facetKey are 'user' and 'unit'.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters only certain order statuses. For example, statuses=CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrderHistoryList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderHistoryList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orgUsers/{userId}/orgUnits/orders/{code}": {
      "get": {
        "tags": [
          "B2B Orders"
        ],
        "summary": "Get an order from the user's organization branch.",
        "description": "Retrieves details of a specific order based on a unique order code in the default organization branch of the user. The response contains detailed order information.",
        "operationId": "getBranchOrder",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Order CODE",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/orgUsers/{userId}/replenishmentOrders": {
      "post": {
        "tags": [
          "B2B Orders"
        ],
        "summary": "Creates an Order and schedules Replenishment.",
        "description": "Creates an Order and schedules Replenishment. By default the payment type is ACCOUNT. Please set payment type to CARD if placing an order using credit card.",
        "operationId": "createReplenishmentOrder",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "query",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "termsChecked",
            "in": "query",
            "description": "Whether terms were accepted or not.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleReplenishmentForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplenishmentOrder"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/paymentmodes": {
      "get": {
        "tags": [
          "Payment Modes"
        ],
        "summary": "Gets all available payment modes.",
        "description": "Gets all payment modes defined for the base store.",
        "operationId": "getPaymentModes",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentModeList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentModeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/paymenttypes": {
      "get": {
        "tags": [
          "B2B Miscs"
        ],
        "summary": "Returns a list of the available payment types.",
        "description": "Returns a list of the available payment types in the B2B checkout process.",
        "operationId": "getPaymentTypes",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/B2BPaymentTypeList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BPaymentTypeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/products/expressupdate": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get products added to the express update feed.",
        "description": "Returns products added to the express update feed. Returns only elements updated after the provided timestamp. The queue is cleared using a defined cronjob.",
        "operationId": "getExpressUpdateProducts",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalog",
            "in": "query",
            "description": "Only products from this catalog are returned. Format: catalogId:catalogVersion",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Only items newer than the given parameter are retrieved from the queue. This parameter should be in ISO-8601 format.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExpressUpdateElementList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExpressUpdateElementList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/products/search": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a list of products and additional data",
        "description": "Returns a list of products and additional data, such as available facets, available sorting, and pagination options. It can also include spelling suggestions. To make spelling suggestions work, you need to make sure that \"enableSpellCheck\" on the SearchQuery is set to \"true\" (by default, it should already be set to \"true\"). You also need to have indexed properties configured to be used for spellchecking.",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Serialized query, free text search, facets. The format of a serialized query: freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchQueryContext",
            "in": "query",
            "description": "The context to be used in the search query.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchPage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "head": {
        "tags": [
          "Products"
        ],
        "summary": "Get a header with total number of products.",
        "description": "In the response header, the \"x-total-count\" indicates the total number of products satisfying a query.",
        "operationId": "countProducts",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Serialized query, free text search, facets. The format of a serialized query: freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/products/suggestions": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a list of available suggestions",
        "description": "Returns a list of all available suggestions related to a given term and limits the results to a specific value of the max parameter.",
        "operationId": "getSuggestions",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Specifies the limit of results.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "Specified term",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestionList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestionList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/products/{productCode}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product details.",
        "description": "Returns details of a single product according to a product code.",
        "operationId": "getProduct",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/products/{productCode}/configurator/textfield": {
      "get": {
        "tags": [
          "Product Configurator Textfield Template"
        ],
        "summary": "Get textfield configuration",
        "description": "Returns list of textfield configuration elements.",
        "operationId": "getConfigurationByProductCode",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationInfoList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationInfoList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/products/{productCode}/configurators/ccpconfigurator": {
      "get": {
        "tags": [
          "Product Configurator CCP"
        ],
        "summary": "Gets the default product configuration for a complex product",
        "description": "Returns the default product configuration for a given complex product. This means that a new instance of the configuration runtime object is created that is equipped with the default values from the configuration model. This API always returns the _entire_ group hierarchy, whereas it's capable of both including all attributes or only those for the first group. This is controlled by query attribute provideAllAttributes",
        "operationId": "getDefaultProductConfiguration",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configIdTemplate",
            "in": "query",
            "description": "If this parameter is provided, the template configuration values will be applied to the default configuration",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "expMode",
            "in": "query",
            "description": "If this parameter is provided and its value is true, the system tries to execute the request in expert mode (only possible if the current user belongs to group 'sapproductconfigexpmodegroup'",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provideAllAttributes",
            "in": "query",
            "description": "If this parameter is provided and its value is true, attributes for all groups are returned. Otherwise, attributes only for the first group are considered.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfiguration"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/products/{productCode}/references": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a product reference",
        "description": "Returns references for a product with a given product code. Reference type specifies which references to return.",
        "operationId": "getProductReferences",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum size of returned results.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 2147483647
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceType",
            "in": "query",
            "description": "Comma-separated list of reference types according to enum ProductReferenceTypeEnum. If not specified, all types of product references will be used.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProductReferenceList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductReferenceList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/products/{productCode}/reviews": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get reviews for a product",
        "description": "Returns the reviews for a product with a given product code.",
        "operationId": "getProductReviews",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "maxCount",
            "in": "query",
            "description": "Maximum count of reviews",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Creates a new customer review as an anonymous user.",
        "description": "Creates a new customer review as an anonymous user. Review data needs to be provided.",
        "operationId": "createProductReview",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Review"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Review"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/products/{productCode}/stock": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a product's stock level.",
        "description": "Returns a product's stock levels sorted by distance from the specified location, which is provided using the free-text \"location\" parameter, or by using the longitude and latitude parameters. The following two sets of parameters are available: location (required), currentPage (optional), pageSize (optional); or longitude (required), latitude (required), currentPage (optional), pageSize(optional).",
        "operationId": "getLocationProductStock",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude location parameter.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "Free-text location",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude location parameter.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/StoreFinderStockSearchPage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreFinderStockSearchPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "head": {
        "tags": [
          "Products"
        ],
        "summary": "Get header with a total number of product's stock levels.",
        "description": "In the response header, the \"x-total-count\" indicates the total number of a product's stock levels. The following two sets of parameters are available: location (required); or longitude (required), and latitude (required).",
        "operationId": "countProductStockByLocation",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude location parameter.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "Free-text location",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude location parameter.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/products/{productCode}/stock/{storeName}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a product's stock level for a store",
        "description": "Returns a product's stock level for a particular store (in other words, for a particular point of sale).",
        "operationId": "getStoreProductStock",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeName",
            "in": "path",
            "description": "Store identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Stock"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/promotions": {
      "get": {
        "tags": [
          "Promotions"
        ],
        "summary": "Get a list of promotions.",
        "description": "Returns promotions defined for a current base site. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.",
        "operationId": "getPromotions",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "BASIC"
            }
          },
          {
            "name": "promotionGroup",
            "in": "query",
            "description": "Only promotions from this group are returned",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Defines what type of promotions should be returned. Values supported for that parameter are: \u003Cul\u003E\u003Cli\u003Eall: All available promotions are returned\u003C/li\u003E\u003Cli\u003Eproduct: Only product promotions are returned\u003C/li\u003E\u003Cli\u003Eorder: Only order promotions are returned\u003C/li\u003E\u003C/ul\u003E",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "product",
                "order"
              ]
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/promotions/{code}": {
      "get": {
        "tags": [
          "Promotions"
        ],
        "summary": "Get a promotion based on code",
        "description": "Returns details of a single promotion specified by a promotion code. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.",
        "operationId": "getPromotion",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Promotion identifier (code)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "BASIC"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Promotion"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Promotion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/punchout/cxml/order": {
      "post": {
        "tags": [
          "PunchOut"
        ],
        "summary": "Handles a Order Request from the Punch Out Provider.",
        "description": "A purchase order is a formal request from a buying organization to this CXML supplier to fulfill a contract. ",
        "operationId": "createPunchOutPurchaseOrderRequest",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CXML"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CXML"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CXML"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CXML"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/punchout/cxml/profile": {
      "post": {
        "tags": [
          "PunchOut"
        ],
        "summary": "Handles a PunchOut Profile Request",
        "description": "Handles a Profile request from the Punch Out provider. It returns a list of URLs that provide basic information about the Punch Out Transactions supported by this CXML server.",
        "operationId": "createPunchOutProfileRequest",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "host",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CXML"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CXML"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CXML"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CXML"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/punchout/cxml/setup": {
      "post": {
        "tags": [
          "PunchOut"
        ],
        "summary": "This transaction is used to initiate a Punch Out Session.",
        "description": "Used to create a new Punch Out session by authenticating a Punch Out user.This happens when the user of the Procurement system selects a Punch Out Item. ",
        "operationId": "createPunchOutSetUpRequest",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CXML"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CXML"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CXML"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CXML"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/punchout/sessions/{sid}": {
      "get": {
        "tags": [
          "PunchOut"
        ],
        "summary": "Get PunchOut session info.",
        "description": "Return the user ID, cart ID, token, PunchOut level, PunchOut operation and selected item.",
        "operationId": "getPunchOutSessionInfo",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "sid",
            "in": "path",
            "description": "PunchOut session identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PunchOutSessionInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/punchout/sessions/{sid}/requisition": {
      "get": {
        "tags": [
          "PunchOut"
        ],
        "summary": "Get order message and url for procurement system.",
        "description": "Return the order message in base64 encoded cXML format and the url that will be used to submit the order.",
        "operationId": "getRequisitionFormData",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discardCartEntries",
            "in": "query",
            "description": "An indicator to show you want to generate requisition form data with or without cart entries. If true, will generate data with empty cart, otherwise will generate data with cart entries.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "sid",
            "in": "path",
            "description": "PunchOut session identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequisitionFormData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/regions/{regionId}/cities": {
      "get": {
        "tags": [
          "Cities"
        ],
        "summary": "Gets cities for a region.",
        "description": "Gets all cities for a region.",
        "operationId": "getCities",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regionId",
            "in": "path",
            "description": "Region identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CityList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CityList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/resetpassword": {
      "post": {
        "tags": [
          "Forgotten Passwords"
        ],
        "summary": "Reset password after customer's clicked forgotten password link.",
        "description": "Reset password after customer's clicked forgotten password link. A new password needs to be provided.",
        "operationId": "doResetPassword",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/stores": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get a list of stores",
        "description": "Lists all stores that are near the location specified in the query or based on latitude and longitude.",
        "operationId": "getStoreLocations",
        "parameters": [
          {
            "name": "accuracy",
            "in": "query",
            "description": "Accuracy in meters.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 0
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Coordinate that specifies the north-south position of a point on the Earth's surface.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Coordinate that specifies the east-west position of a point on the Earth's surface.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Location in natural language i.e. city or country.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Radius in meters. Max value: 40075000.0 (Earth's perimeter).",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 100000
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "asc"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/StoreFinderSearchPage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreFinderSearchPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "head": {
        "tags": [
          "Stores"
        ],
        "summary": "Get a header with total number of stores",
        "description": "In the response header, the \"x-total-count\" indicates the number of all stores that are near the location specified in the query or based on latitude and longitude.",
        "operationId": "countStoreLocations",
        "parameters": [
          {
            "name": "accuracy",
            "in": "query",
            "description": "Accuracy in meters.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 0
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Coordinate that specifies the north-south position of a point on the Earth's surface.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Coordinate that specifies the east-west position of a point on the Earth's surface.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Location in natural language i.e. city or country.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Radius in meters. Max value: 40075000.0 (Earth's perimeter).",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "default": 100000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/stores/country/{countryIso}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get a list of stores for a given country",
        "description": "Lists all stores that are in the specified country.",
        "operationId": "getStoresByCountry",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryIso",
            "in": "path",
            "description": "Country ISO code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PointOfServiceList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PointOfServiceList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/stores/country/{countryIso}/region/{regionIso}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get a list of stores for a given country and region",
        "description": "Lists all stores that are in the specified country and its subdivision/region.",
        "operationId": "getStoresByCountryAndRegion",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryIso",
            "in": "path",
            "description": "Country ISO code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "regionIso",
            "in": "path",
            "description": "Region ISO code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PointOfServiceList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PointOfServiceList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/stores/storescounts": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get a list of store counts aggregated by countries and regions for a given base site",
        "description": "Lists all store counts that are aggregated by countries and regions for a given base site",
        "operationId": "getLocationCounts",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCountList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCountList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/stores/{storeId}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get the details of a store",
        "description": "Returns the store details based on its unique name.",
        "operationId": "getStoreLocation",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "Store identifier (currently store name)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PointOfService"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PointOfService"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/ticketCategories": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get all ticket categories.",
        "operationId": "getTicketCategories",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketCategoryList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/titles": {
      "get": {
        "tags": [
          "Miscs"
        ],
        "summary": "Get a list of all localized titles.",
        "description": "Lists all localized titles.",
        "operationId": "getTitles",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TitleList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TitleList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": " Registers a customer",
        "description": "Registers a customer. Requires the following parameters: login, password, firstName, lastName, titleCode.",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "sap-commerce-cloud-captcha-token",
            "in": "header",
            "description": "The user's response token returned by captcha provider, for example, the g-recaptcha-response returned by google recaptcha client. When the captchaCheckEnabled = true for the store, the field is mandatory and will call the provider to validate.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserSignUp"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSignUp"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get customer profile",
        "description": "Returns customer profile.",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates customer profile",
        "description": "Updates customer profile. Attributes not provided in the request body will be defined again (set to null or default).",
        "operationId": "replaceUser",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete customer profile.",
        "description": "Removes customer profile.",
        "operationId": "removeUser",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Updates customer profile",
        "description": "Updates customer profile. Only attributes provided in the request body will be changed.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/addresses": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "Get customer's addresses",
        "description": "Returns customer's addresses.",
        "operationId": "getAddresses",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of customer's addresses",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AddressList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Address"
        ],
        "summary": "Creates a new address.",
        "description": "Creates a new address with detailed information provided.",
        "operationId": "createAddress",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/addresses/verification": {
      "post": {
        "tags": [
          "Address"
        ],
        "summary": "Verifies address.",
        "description": "Verifies provided address.",
        "operationId": "validateAddress",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AddressValidation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressValidation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/addresses/{addressId}": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "Get info about address",
        "description": "Returns detailed information about address with a given id.",
        "operationId": "getAddress",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "Address identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Address"
        ],
        "summary": "Updates the address",
        "description": "Updates the address. Attributes not provided in the request will be defined again (set to null or default).",
        "operationId": "replaceAddress",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "Address identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Address"
        ],
        "summary": "Delete customer's address.",
        "description": "Removes customer's address.",
        "operationId": "removeAddress",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "Address identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Address"
        ],
        "summary": "Updates the address",
        "description": "Updates the address. Only attributes provided in the request body will be changed.",
        "operationId": "updateAddress",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "Address identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/availableOrgUnitNodes": {
      "get": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Get available organizational unit nodes.",
        "description": "Returns list of available organizational unit nodes.",
        "operationId": "getAvailableOrgUnitNodes",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUnitNodeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/budgets": {
      "get": {
        "tags": [
          "Budget Management"
        ],
        "summary": "Gets the list of budgets for a specified base store",
        "description": "Returns the list of budgets accessible to a specified user for a specified base store. The response can display the results across multiple pages, if required.",
        "operationId": "getBudgets",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the returned results.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "code"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Budget Management"
        ],
        "summary": " Creates a new budget",
        "description": "Creates a new budget.",
        "operationId": "createBudget",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Budget"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Budget"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/budgets/{budgetCode}": {
      "get": {
        "tags": [
          "Budget Management"
        ],
        "summary": "Gets specific budget details accessible to a specified user for a specified base store based on budget code",
        "description": "Returns specific budget details accessible to a specified user for a specified base store based on budget code. The response contains detailed order information.",
        "operationId": "getBudget",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "budgetCode",
            "in": "path",
            "description": "Budget GUID (Globally Unique Identifier) or budget CODE.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Budget"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Budget Management"
        ],
        "summary": "Updates the budget",
        "description": "Updates the budget. Only attributes provided in the request body will be changed.",
        "operationId": "updateBudget",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "budgetCode",
            "in": "path",
            "description": "Budget GUID (Globally Unique Identifier) or budget CODE.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Budget"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Budget"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get all customer carts.",
        "description": "Lists all customer carts.",
        "operationId": "getCarts",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "Optional pagination parameter in case of savedCartsOnly == true. Default value 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Optional {@link PaginationData} parameter in case of savedCartsOnly == true. Default value 20.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "savedCartsOnly",
            "in": "query",
            "description": "Optional parameter. If the parameter is provided and its value is true, only saved carts are returned.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort criterion in case of savedCartsOnly == true. No default value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Creates or restore a cart for a user.",
        "description": "Creates a new cart or restores an anonymous cart as a user's cart (if an old Cart Id is given in the request).",
        "operationId": "createCart",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "oldCartId",
            "in": "query",
            "description": "Anonymous cart GUID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toMergeCartGuid",
            "in": "query",
            "description": "The GUID of the user's cart that will be merged with the anonymous cart.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/current": {
      "get": {
        "tags": [
          "B2B Carts"
        ],
        "summary": "Gets the current cart.",
        "description": "Gets the current cart.",
        "operationId": "getCurrentOrgCart",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get a cart with a given identifier.",
        "description": "Returns the cart with a given identifier.",
        "operationId": "getCart",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Deletes a cart with a given cart id.",
        "description": "Deletes a cart with a specified cart id.",
        "operationId": "removeCart",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery": {
      "put": {
        "tags": [
          "Cart Addresses"
        ],
        "summary": "Sets a delivery address for the cart.",
        "description": "Sets a delivery address for the cart. The address country must be placed among the delivery countries of the current base store.",
        "operationId": "replaceCartDeliveryAddress",
        "parameters": [
          {
            "name": "addressId",
            "in": "query",
            "description": "Address identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Cart Addresses"
        ],
        "summary": "Creates a delivery address for the cart.",
        "description": "Creates an address and assigns it to the cart as the delivery address.",
        "operationId": "createCartDeliveryAddress",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Cart Addresses"
        ],
        "summary": "Deletes the delivery address from the cart.",
        "description": "Deletes the delivery address from the specified cart.",
        "operationId": "removeCartDeliveryAddress",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/bundles": {
      "post": {
        "tags": [
          "Bundles"
        ],
        "summary": "Start a bundle.",
        "description": "Starts a bundle once the productCode, its quantity, and a bundle templateId is provided. A successful result returns a CartModification response.",
        "operationId": "createBundle",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BundleStarter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/clonesavedcart": {
      "post": {
        "tags": [
          "Save Cart"
        ],
        "summary": "Explicitly clones a cart.",
        "description": "Explicitly clones a cart and sets the name and description for the cloned cart if given.",
        "operationId": "doCartClone",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description that should be applied to the cloned cart.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name that should be applied to the cloned cart.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SaveCartResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveCartResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/consolidate": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get consolidated pickup options.",
        "description": "Returns a list of stores that have all the pick-up items in stock.\n\nNote, if there are no stores that have all the pick up items in stock, or all items are already set to the same pick up location, the response returns an empty list.",
        "operationId": "getConsolidatedPickupLocations",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PointOfServiceList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PointOfServiceList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Handles the consolidating pickup locations.",
        "description": "Specifies one store location where all items will be picked up.\n\nNote, if any of the items are not available at the specified location, these items are removed from the cart.",
        "operationId": "createConsolidatedPickupLocation",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "storeName",
            "in": "query",
            "description": "The name of the store where items will be picked up",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartModificationList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModificationList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/costcenter": {
      "put": {
        "tags": [
          "B2B Carts"
        ],
        "summary": "Sets the cost center for the checkout cart.",
        "description": "Sets the cost center for the checkout cart.",
        "operationId": "replaceOrgCartCostCenter",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "costCenterId",
            "in": "query",
            "description": "The id of the cost center.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode": {
      "get": {
        "tags": [
          "Cart Delivery Modes"
        ],
        "summary": "Get the delivery mode selected for the cart.",
        "description": "Returns the delivery mode selected for the cart.",
        "operationId": "getCartDeliveryMode",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryMode"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryMode"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Cart Delivery Modes"
        ],
        "summary": "Sets the delivery mode for a cart.",
        "description": "Sets the delivery mode with a given identifier for the cart.",
        "operationId": "replaceCartDeliveryMode",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deliveryModeId",
            "in": "query",
            "description": "Delivery mode identifier (code)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Cart Delivery Modes"
        ],
        "summary": "Deletes the delivery mode from the cart.",
        "description": "Deletes the delivery mode from the specified cart.",
        "operationId": "removeCartDeliveryMode",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymodes": {
      "get": {
        "tags": [
          "Cart Delivery Modes"
        ],
        "summary": "Get all delivery modes for the current store and delivery address.",
        "description": "Returns all delivery modes supported for the current base store and cart delivery address. A delivery address must be set for the cart, otherwise an empty list will be returned.",
        "operationId": "getCartDeliveryModes",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryModeList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryModeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/email": {
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Assigns an email to the cart.",
        "description": "Assigns an email to the cart. This step is required to make a guest checkout.",
        "operationId": "replaceCartGuestUser",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email of the guest user. It will be used during the checkout process.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries": {
      "get": {
        "tags": [
          "Cart Entries"
        ],
        "summary": "Get cart entries.",
        "description": "Returns cart entries.",
        "operationId": "getCartEntries",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrderEntryList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderEntryList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Cart Entries"
        ],
        "summary": "Adds a product to the cart.",
        "description": "Adds a product to the specified cart.",
        "operationId": "createCartEntry",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrderEntry"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/ccpconfigurator": {
      "post": {
        "tags": [
          "Product Configurator CCP Cart Integration"
        ],
        "summary": "Adds a product configuration to the cart",
        "description": "Adds a product configuration to the cart. The root product of the configuration is added as a cart entry, in addition the configuration is attached to the new entry",
        "operationId": "createCartEntryConfiguration",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CCPOrderEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/configurator/textfield": {
      "post": {
        "tags": [
          "Product Configurator Textfield Template"
        ],
        "summary": "Adds a product to the cart.",
        "description": "Adds a textfield configurator product to the cart.",
        "operationId": "addCartEntry",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BASIC",
                "DEFAULT",
                "FULL"
              ]
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrderEntry"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}": {
      "get": {
        "tags": [
          "Cart Entries"
        ],
        "summary": "Get the details of the cart entries.",
        "description": "Returns the details of the cart entries.",
        "operationId": "getCartEntry",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrderEntry"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Cart Entries"
        ],
        "summary": "Set quantity and store details of a cart entry.",
        "description": "Updates the quantity of a single cart entry and the details of the store where the cart entry will be picked up. Attributes not provided in request will be defined again (set to null or default)",
        "operationId": "replaceCartEntry",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrderEntry"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Cart Entries"
        ],
        "summary": "Deletes cart entry.",
        "description": "Deletes cart entry by entry number.",
        "operationId": "removeCartEntry",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Cart Entries"
        ],
        "summary": "Update quantity and store details of a cart entry.",
        "description": "Updates the quantity of a single cart entry and the details of the store where the cart entry will be picked up.",
        "operationId": "updateCartEntry",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrderEntry"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}/ccpconfigurator": {
      "get": {
        "tags": [
          "Product Configurator CCP Cart Integration"
        ],
        "summary": "Gets the configuration of a cart entry",
        "description": "Returns the configuration of a cart entry and ensures that the entry can later be updated with the configuration and its changes",
        "operationId": "getCartEntryConfiguration",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfiguration"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Product Configurator CCP Cart Integration"
        ],
        "summary": "Updates the configuration of a cart entry",
        "description": "Updates the configuration. The entire configuration attached to the cart entry is replaced by the configuration specified in the request body. Possible only if the configuration change has been initiated by the corresponding GET method before",
        "operationId": "replaceCartEntryConfiguration",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CCPOrderEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}/ccpconfigurator/configurationOverview": {
      "get": {
        "tags": [
          "Product Configurator CCP Saved Cart Integration"
        ],
        "summary": "Gets a product configuration overview of an saved cart entry",
        "description": "Gets a configuration overview, a simplified, condensed read-only view on the product configuration of an saved cart entry. Only the selected attribute values are present here",
        "operationId": "getConfigurationOverviewForSavedCart",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "The cart id. Each cart has a unique identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a saved cart has an entry number. Saved Cart entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfigurationOverview"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfigurationOverview"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}/configurator/textfield": {
      "get": {
        "tags": [
          "Product Configurator Textfield Template"
        ],
        "summary": "Get configuration of cart entry.",
        "description": "Get the textfield configuration for a cart entry.",
        "operationId": "getConfigurationInEntry_1",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "Cart entry number.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationInfoList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationInfoList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Product Configurator Textfield Template"
        ],
        "summary": "Update configuration of cart entry.",
        "description": "Update the textfield configurtion for a cart entry.",
        "operationId": "getConfigurationInEntry",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "Cart entry number.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationInfoList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entrygroups/{entryGroupNumber}": {
      "post": {
        "tags": [
          "Cart Entry Groups"
        ],
        "summary": "Add a product to a cart entry group.",
        "description": "Adds a product to a cart entry group.",
        "operationId": "addToCartEntryGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryGroupNumber",
            "in": "path",
            "description": "Each entry group in a cart has a specific entry group number. Entry group numbers are integers starting at one. They are defined in ascending order.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Cart Entry Groups"
        ],
        "summary": "Delete an entry group.",
        "description": "Removes an entry group from an associated cart. The entry group is identified by an entryGroupNumber. The cart is identified by the cartId.",
        "operationId": "removeCartEntryGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryGroupNumber",
            "in": "path",
            "description": "Each entry group in a cart has a specific entry group number. Entry group numbers are integers starting at one. They are defined in ascending order.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entrygroups/{entryGroupNumber}/allowedProductsSearch": {
      "get": {
        "tags": [
          "Bundles"
        ],
        "summary": "Retrieve products and additional data available for a given entry group and search query.",
        "description": "Returns products and additional data based on the entry group and search query provided. Examples include available facets, available sorting, and pagination options. It can also include spelling suggestions. To disable spelling suggestions \"enableSpellCheck\" must be set to \"FALSE\" on the SearchQuery. Default is set to \"TRUE\". The configuration of indexed properties is required for spellchecking. Any of the products returned can be added to the specific entry group (bundle).",
        "operationId": "getAvailableProducts",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "entryGroupNumber",
            "in": "path",
            "description": "Each entry group in a cart has a specific entry group number. Entry group numbers are integers starting at one. They are defined in ascending order.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of products returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Serialized query, free text search, facets. The format of a serialized query: freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The sorting method applied to the results that are returned.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchPage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/flagForDeletion": {
      "patch": {
        "tags": [
          "Save Cart"
        ],
        "summary": "Flag a cart for deletion.",
        "description": "Flags a cart for deletion (the cart doesn't have corresponding save cart attributes anymore). The cart is not actually deleted from the database. But with the removal of the saved cart attributes, this cart will be taken care of by the cart removal job just like any other cart.",
        "operationId": "doUpdateFlagForDeletion",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SaveCartResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveCartResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/request": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get information needed for create subscription",
        "description": "Returns the necessary information for creating a subscription that contacts the payment provider directly. This information contains the payment provider URL and a list of parameters that are needed to create the subscription.",
        "operationId": "getSopPaymentRequestDetails",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "extendedMerchantCallback",
            "in": "query",
            "description": "Define which url should be returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "responseUrl",
            "in": "query",
            "description": "The URL that the payment provider uses to return payment information. Possible values for responseUrl include the following: “orderPage_cancelResponseURL”, “orderPage_declineResponseURL”, and “orderPage_receiptResponseURL”.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get information about create subscription request results",
        "description": "Returns information related to creating subscription request results. If there is no response from the payment provider, a \"202 Accepted\" status is returned. If the subscription is created successfully, the payment details are returned. Otherwise, an error response is returned.\n\nNote, the “Try it out” button is not enabled for this method (always returns an error) because the Extended Carts Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.",
        "operationId": "getSopPaymentResponse",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Handles response from payment provider and create payment details",
        "description": "Handles the response from the payment provider and creates payment details.\n\nNote, the “Try it out” button is not enabled for this method (always returns an error) because the Extended Carts Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.",
        "operationId": "doHandleSopPaymentResponse",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Deletes payment provider response related to cart.",
        "description": "Deletes the payment provider response related to the specified cart.",
        "operationId": "removeSopPaymentResponse",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails": {
      "put": {
        "tags": [
          "Cart Payments"
        ],
        "summary": "Sets credit card payment details for the cart.",
        "description": "Sets credit card payment details for the specified cart.",
        "operationId": "replaceCartPaymentDetails",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDetailsId",
            "in": "query",
            "description": "Payment details identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Cart Payments"
        ],
        "summary": "Defines and assigns details of a new credit card payment to the cart.",
        "description": "Defines the details of a new credit card, and assigns this payment option to the cart.",
        "operationId": "createCartPaymentDetails",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PaymentDetails"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/paymenttype": {
      "put": {
        "tags": [
          "B2B Carts"
        ],
        "summary": "Set the payment type for the checkout cart",
        "description": "Sets the payment type for the checkout cart. If the purchaseOrderNumber is not null, the purchaseOrderNumber is also assigned to the cart.",
        "operationId": "replaceOrgCartPaymentType",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "paymentType",
            "in": "query",
            "description": "Payment type choice (between card and account).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "purchaseOrderNumber",
            "in": "query",
            "description": "Purchase order number to assign to the checkout cart.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions": {
      "get": {
        "tags": [
          "Cart Promotions"
        ],
        "summary": "Get information about promotions applied on cart.",
        "description": "Returns information about the promotions applied on the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.",
        "operationId": "getCartPromotions",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionResultList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionResultList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Cart Promotions"
        ],
        "summary": "Enables promotions based on the promotionsId of the cart.",
        "description": "Enables a promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.",
        "operationId": "doApplyCartPromotion",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promotionId",
            "in": "query",
            "description": "Promotion identifier (code)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}": {
      "get": {
        "tags": [
          "Cart Promotions"
        ],
        "summary": "Get information about promotion applied on cart.",
        "description": "Returns information about a promotion (with a specific promotionId), that has been applied on the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.",
        "operationId": "getCartPromotion",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "promotionId",
            "in": "path",
            "description": "Promotion identifier (code)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionResultList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionResultList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Cart Promotions"
        ],
        "summary": "Disables the promotion based on the promotionsId of the cart.",
        "description": "Disables the promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.",
        "operationId": "removeCartPromotion",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promotionId",
            "in": "path",
            "description": "Promotion identifier (code)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/restoresavedcart": {
      "patch": {
        "tags": [
          "Save Cart"
        ],
        "summary": "Restore a saved cart.",
        "description": "Restore the data of a saved cart.",
        "operationId": "doUpdateSavedCart",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SaveCartResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveCartResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/save": {
      "patch": {
        "tags": [
          "Save Cart"
        ],
        "summary": "Explicitly saves a cart.",
        "description": "Explicitly saves a cart and sets the name and description for the saved cart if given.",
        "operationId": "doSaveCart",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "saveCartDescription",
            "in": "query",
            "description": "The description that should be applied to the saved cart.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "saveCartName",
            "in": "query",
            "description": "The name that should be applied to the saved cart.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SaveCartResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveCartResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/savedcart": {
      "get": {
        "tags": [
          "Save Cart"
        ],
        "summary": "Get a saved cart.",
        "description": "Returns a saved cart for an authenticated user. The cart is identified using the \"cartId\" parameter.",
        "operationId": "getSavedCart",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SaveCartResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveCartResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/validate": {
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Validates the cart",
        "description": "Runs a cart validation and returns the result.",
        "operationId": "validateCart",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CartModificationList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartModificationList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers": {
      "get": {
        "tags": [
          "Cart Promotions"
        ],
        "summary": "Get a list of vouchers applied to the cart.",
        "description": "Returns a list of vouchers applied to the cart.",
        "operationId": "getCartVouchers",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Cart Promotions"
        ],
        "summary": "Applies a voucher based on the voucherId defined for the cart.",
        "description": "Applies a voucher based on the voucherId defined for the specified cart.",
        "operationId": "doApplyCartVoucher",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "voucherId",
            "in": "query",
            "description": "Voucher identifier (code)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers/{voucherId}": {
      "delete": {
        "tags": [
          "Cart Promotions"
        ],
        "summary": "Deletes a voucher defined for the current cart.",
        "description": "Deletes a voucher based on the voucherId defined for the current cart.",
        "operationId": "removeCartVoucher",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "voucherId",
            "in": "path",
            "description": "Voucher identifier (code)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/consents": {
      "post": {
        "tags": [
          "Consents"
        ],
        "summary": "A user can give consent.",
        "description": "A user gives consent with specified consent template and version.",
        "operationId": "doGiveConsent",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consentTemplateId",
            "in": "query",
            "description": "Consent template ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consentTemplateVersion",
            "in": "query",
            "description": "Consent template version.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentTemplate"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentTemplate"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/consents/{consentCode}": {
      "delete": {
        "tags": [
          "Consents"
        ],
        "summary": "Withdraw the user consent for a given consent code.",
        "description": "If the user consent was given, the consent is withdrawn. If consent was already withdrawn then returns consent already withdrawn error. If there is no such consent then returns not found. If the current user is an anonymous user then returns access denied error.",
        "operationId": "removeConsent",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consentCode",
            "in": "path",
            "description": "Consent code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/consenttemplates": {
      "get": {
        "tags": [
          "Consents"
        ],
        "summary": "Fetch the list of consents",
        "description": "If user has not given or withdrawn consent to any of the template, no given or withdraw date is returned.",
        "operationId": "getConsentTemplates",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentTemplateList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentTemplateList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/consenttemplates/{consentTemplateId}": {
      "get": {
        "tags": [
          "Consents"
        ],
        "summary": "Fetch the consent.",
        "description": "If user has not given or withdrawn consent to the template, no given or withdraw date is returned.",
        "operationId": "getConsentTemplate",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consentTemplateId",
            "in": "path",
            "description": "Consent template id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentTemplate"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentTemplate"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/customercoupons": {
      "get": {
        "tags": [
          "Customer Coupons"
        ],
        "summary": "Gets all customer coupons of the current customer.",
        "description": "Gets the customer coupon list of the current customer.",
        "operationId": "getCustomerCoupons",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "needsTotal",
            "in": "query",
            "description": "The flag for indicating if total number of results is needed or not.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The sorting method applied to the return results.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCouponSearchResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCouponSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/customercoupons/{couponCode}/claim": {
      "post": {
        "tags": [
          "Customer Coupons"
        ],
        "summary": "Claims a customer coupon.",
        "description": "Claims a customer coupon by coupon code.",
        "operationId": "doClaimCustomerCoupon",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCoupon2Customer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCoupon2Customer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/customercoupons/{couponCode}/notification": {
      "post": {
        "tags": [
          "Customer Coupons"
        ],
        "summary": "Subscribes to a coupon notification.",
        "description": "Make a subscription to a customer coupon to receive notifications when it will be in effect soon, or will expire soon.",
        "operationId": "doSubscribeToCustomerCoupon",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCouponNotification"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCouponNotification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Customer Coupons"
        ],
        "summary": "Unsubscribes from the coupon notification.",
        "description": "Removes notification subscription from the specific customer coupon.",
        "operationId": "doUnsubscribeFromCustomerCoupon",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/customergroups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all customer groups of a customer.",
        "description": "Returns all customer groups of a customer.",
        "operationId": "getUserCustomerGroups",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/futureStocks": {
      "get": {
        "tags": [
          "Future Stocks"
        ],
        "summary": "Gets the future product availability for the list of specified products.",
        "description": "Returns a list of product codes with a list of future product availability.",
        "operationId": "getFutureStocksList",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "productCodes",
            "in": "query",
            "description": "Products identifiers.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3318057,72399000_55,72399000_56"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFutureStocksList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/futureStocks/{productCode}": {
      "get": {
        "tags": [
          "Future Stocks"
        ],
        "summary": "Gets the future product availability for the specified product.",
        "description": "Returns a list of future product availability of the specified product.",
        "operationId": "getFutureStocks",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFutureStocks"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/login": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Changes customer's login name.",
        "description": "Changes a customer's login name. Requires the customer's current password.",
        "operationId": "replaceUserLogin",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newLogin",
            "in": "query",
            "description": "Customer's new login name. Customer login is case insensitive.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Customer's current password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/loginnotification": {
      "post": {
        "tags": [
          "Login Notification"
        ],
        "summary": "Notify about successful login.",
        "description": "Publish notification event about successful login.",
        "operationId": "doPublishSuccessfulLoginEvent",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/notificationpreferences": {
      "get": {
        "tags": [
          "Notification Preference"
        ],
        "summary": "Gets all notification preferences of the current customer",
        "description": "Returns the notification preferences of the current customer.",
        "operationId": "getNotificationPreferences",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/notificationPreferenceList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationPreferenceList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Notification Preference"
        ],
        "summary": "Updates the notification preferences of the current customer",
        "description": "Updates the notification preference of the current customer.",
        "operationId": "updateNotificationPreferences",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BasicnotificationPreferenceList"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BasicnotificationPreferenceList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/notifications/sitemessages": {
      "get": {
        "tags": [
          "Site Messages"
        ],
        "summary": "Gets all site messages of current customer.",
        "description": "Returns the site messages of current customer.",
        "operationId": "siteMessages",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "schema": {
              "type": "string",
              "default": "0"
            }
          },
          {
            "name": "needsTotal",
            "in": "query",
            "description": "The flag for indicating if total number of results is needed or not.",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The sorting method applied to the return results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/siteMessageSearchResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/siteMessageSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orderApprovalPermissions": {
      "get": {
        "tags": [
          "Order Approval Permissions"
        ],
        "summary": "Get order approval permissions.",
        "description": "Returns the list of order approval permissions for the company of the identified user. The response can display the results across multiple pages, if required.",
        "operationId": "getOrderApprovalPermissions",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApprovalPermissionList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Order Approval Permissions"
        ],
        "summary": "Create a new order approval permission.",
        "description": "Creates a new order approval permission.",
        "operationId": "createOrderApprovalPermission",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderApprovalPermission"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApprovalPermission"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orderApprovalPermissions/{orderApprovalPermissionCode}": {
      "get": {
        "tags": [
          "Order Approval Permissions"
        ],
        "summary": "Get an order approval permission.",
        "description": "Returns a specific order approval permission based on specific code. The response contains detailed order approval permission information.",
        "operationId": "getOrderApprovalPermission",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orderApprovalPermissionCode",
            "in": "path",
            "description": "Order Approval Permission identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApprovalPermission"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Order Approval Permissions"
        ],
        "summary": "Update the order approval permission",
        "description": "Updates the order approval permission. Only attributes provided in the request body will be changed.",
        "operationId": "updateOrderApprovalPermission",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orderApprovalPermissionCode",
            "in": "path",
            "description": "Order Approval Permission identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderApprovalPermission"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApprovalPermission"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orderReturns": {
      "get": {
        "tags": [
          "Return Requests"
        ],
        "summary": "Gets the user's return requests history",
        "description": "Returns order return request data associated with a specified user for a specified base store.",
        "operationId": "getReturnRequests",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnRequestList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Return Requests"
        ],
        "summary": "Create an order return request.",
        "description": "Creates an order return request.",
        "operationId": "createReturnRequest",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReturnRequestEntryInputList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orderReturns/{returnRequestCode}": {
      "get": {
        "tags": [
          "Return Requests"
        ],
        "summary": "Get the details of a return request.",
        "description": "Returns specific order return request details based on a specific return request code. The response contains detailed order return request information.",
        "operationId": "getReturnRequest",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "returnRequestCode",
            "in": "path",
            "description": "Order return request code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Return Requests"
        ],
        "summary": "Updates the order return request.",
        "description": "Updates the order return request. Only cancellation of the request is supported by setting the attribute status to CANCELLING. Cancellation of the return request cannot be reverted",
        "operationId": "updateReturnRequest",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnRequestCode",
            "in": "path",
            "description": "Order return request code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReturnRequestModification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orderapprovals": {
      "get": {
        "tags": [
          "Order Approvals"
        ],
        "summary": "Get orders to approve.",
        "description": "Returns the list of orders the specified user is allowed to approve.",
        "operationId": "getOrderApprovals",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApprovalList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orderapprovals/{orderApprovalCode}": {
      "get": {
        "tags": [
          "Order Approvals"
        ],
        "summary": "Get an order to approve.",
        "description": "Returns specific order details based on a specific order code. The response contains detailed order information.",
        "operationId": "getOrderApproval",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orderApprovalCode",
            "in": "path",
            "description": "Code that identifies the order approval.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApproval"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orderapprovals/{orderApprovalCode}/decision": {
      "post": {
        "tags": [
          "Order Approvals"
        ],
        "summary": "Makes an approval decision for an order.",
        "description": "Makes a decision on the order approval that will trigger the next step in the approval workflow.",
        "operationId": "doMakeOrderApprovalDecision",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orderApprovalCode",
            "in": "path",
            "description": "Code that identifies the order approval.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderApprovalDecision"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApprovalDecision"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get order history for user.",
        "description": "Returns order history data for all orders placed by a specified user for a specified base store. The response can display the results across multiple pages, if required.",
        "operationId": "getUserOrderHistory",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters only certain order statuses. For example, statuses=CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrderHistoryList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderHistoryList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Place a order.",
        "description": "Authorizes the cart and places the order. The response contains the new order data.",
        "operationId": "placeOrder",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "in": "query",
            "description": "Cart code for logged in user, cart GUID for guest checkout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "head": {
        "tags": [
          "Orders"
        ],
        "summary": "Get total number of orders.",
        "description": "In the response header, the \"x-total-count\" indicates the total number of orders placed by a specified user for a specified base store.",
        "operationId": "countUserOrders",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters only certain order statuses. For example, statuses=CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orders/{code}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get a order.",
        "description": "Returns specific order details based on a specific order code. The response contains detailed order information.",
        "operationId": "getUserOrders",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Order GUID (Globally Unique Identifier) or order CODE",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orders/{code}/cancellation": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel an order.",
        "description": "Cancels an order partially or completely",
        "operationId": "doCancelOrder",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Order code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancellationRequestEntryInputList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orders/{orderCode}/consignments/{consignmentCode}/tracking": {
      "get": {
        "tags": [
          "Consignment Tracking"
        ],
        "summary": "Gets consignment tracking information",
        "description": "Returns details of consignment tracking information based on the order code and the consignment code.",
        "operationId": "getConsignmentTrackingData",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consignmentCode",
            "in": "path",
            "description": "consignment identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderCode",
            "in": "path",
            "description": "order identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/consignmentTracking"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/consignmentTracking"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orders/{orderId}/entries/{entryNumber}/ccpconfigurator/configurationOverview": {
      "get": {
        "tags": [
          "Product Configurator CCP Order Integration"
        ],
        "summary": "Gets a product configuration overview of an order entry",
        "description": "Gets a configuration overview, a simplified, condensed read-only view on the product configuration of an order entry. Only the selected attribute values are present here",
        "operationId": "getConfigurationOverviewForOrderEntry",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in an order has an entry number. Order entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "The order id. Each order has a unique identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfigurationOverview"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfigurationOverview"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orders/{orderId}/entries/{entryNumber}/configurator/textfield": {
      "get": {
        "tags": [
          "Product Configurator Textfield Template"
        ],
        "summary": "Get textfield configuration for order entry.",
        "description": "Get the textfield configuration for an order entry.",
        "operationId": "getTextfieldConfigurationForOrderEntry",
        "parameters": [
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in an order has an entry number. Order entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "The order id. Each order has a unique identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationInfoList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationInfoList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgCustomers": {
      "get": {
        "tags": [
          "Organizational Unit Customer Management"
        ],
        "summary": "Gets the list of org customers for a specified base store",
        "description": "Returns the list of org customers for a specified base store. The response can display the results across multiple pages, if required.",
        "operationId": "getOrgCustomers",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the returned results.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUnitUserList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Organizational Unit Customer Management"
        ],
        "summary": " Registers a org customer",
        "description": "Creates a new organizational customer.",
        "operationId": "createOrgCustomer",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgCustomerCreation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}": {
      "get": {
        "tags": [
          "Organizational Unit Customer Management"
        ],
        "summary": "Get a org customer profile",
        "description": "Returns a org customer profile.",
        "operationId": "getOrgCustomer",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BASIC",
                "DEFAULT",
                "FULL"
              ]
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Org Customer GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Organizational Unit Customer Management"
        ],
        "summary": "Updates org customer profile",
        "description": "Updates org customer profile. Only attributes provided in the request body will be changed.",
        "operationId": "updateOrgCustomer",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Org Customer GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgCustomerModification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/approvers": {
      "get": {
        "tags": [
          "Organizational Unit Customer Management"
        ],
        "summary": "Gets the list of approvers for an specified org customer",
        "description": "Returns the list of approvers for an specified org customer. The response can display the results across multiple pages, if required.",
        "operationId": "getOrgCustomerApprovers",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Org Customer GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the returned results.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUnitUserList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/approvers/{approverId}": {
      "post": {
        "tags": [
          "Organizational Unit Customer Management"
        ],
        "summary": "Add an approver to an specific org customer",
        "description": "Add an approver to an specific org customer",
        "operationId": "doAddApproverToOrgCustomer",
        "parameters": [
          {
            "name": "approverId",
            "in": "path",
            "description": "Approver GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Org Customer GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BSelectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Organizational Unit Customer Management"
        ],
        "summary": "Deletes an approver from an specific org customer with the provided approverId",
        "description": "Deletes an approver from an specific org customer with the provided approverId",
        "operationId": "removeApproverFromOrgCustomer",
        "parameters": [
          {
            "name": "approverId",
            "in": "path",
            "description": "Approver GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Org Customer GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BSelectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/orgUserGroups": {
      "get": {
        "tags": [
          "Organizational Unit Customer Management"
        ],
        "summary": "Gets the list of org user groups for a specified org customer",
        "description": "Returns the list of org user gruops for a specified org customer. The response can display the results across multiple pages, if required.",
        "operationId": "getOrgCustomerOrgUserGroups",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Org Customer GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the returned results.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUnitUserGroupList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/orgUserGroups/{userGroupId}": {
      "post": {
        "tags": [
          "Organizational Unit Customer Management"
        ],
        "summary": "Add an org user group to an specific org customer",
        "description": "Add an org user group to an specific org customer",
        "operationId": "doAddOrgUserGroupToOrgCustomer",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Org Customer GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userGroupId",
            "in": "path",
            "description": "Org User Group GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BSelectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Organizational Unit Customer Management"
        ],
        "summary": "Deletes an org user group from an specific org customer with the provided orgUserGroupId",
        "description": "Deletes an org user group from an specific org customer with the provided orgUserGroupId",
        "operationId": "removeOrgUserGroupFromOrgCustomer",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Org Customer GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userGroupId",
            "in": "path",
            "description": "Org User Group GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/permissions": {
      "get": {
        "tags": [
          "Organizational Unit Customer Management"
        ],
        "summary": "Gets the list of permissions for an org customer",
        "description": "Returns the list of permissions for a user. The response can display the results across multiple pages, if required.",
        "operationId": "getOrgCustomerPermissions",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Org Customer GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the returned results.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApprovalPermissionList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/permissions/{permissionId}": {
      "post": {
        "tags": [
          "Organizational Unit Customer Management"
        ],
        "summary": "Add a permission to an specific org customer",
        "description": "Add a permission to an specific org customer",
        "operationId": "doAddPermissionToOrgCustomer",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Org Customer GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "Permission GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BSelectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Organizational Unit Customer Management"
        ],
        "summary": "Deletes a permission from an specific org customer with the provided permissionId",
        "description": "Deletes a permission from an specific org customer with the provided permissionId",
        "operationId": "removePermissionFromOrgCustomer",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Org Customer GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "Permission GUID (Globally Unique Identifier).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BSelectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/roles": {
      "post": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Add a role to a specific organizational customer",
        "description": "Adds a role to a specific organizational customer",
        "operationId": "doAddRoleToOrgCustomer",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Identifier of the organizational customer which the role will be added.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "The role which is added to the organizational customer. Example roles are: b2badmingroup, b2bmanagergroup, b2bcustomergroup",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BSelectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/roles/{roleId}": {
      "delete": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Remove a role from a specific organizational customer",
        "description": "Removes a role from a specific organizational customer",
        "operationId": "removeRoleFromOrgCustomer",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Identifier of the organizational customer which the role will be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "The role which is removed from the user. Example roles are: b2badmingroup, b2bmanagergroup, b2bcustomergroup",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BSelectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnitUserGroups": {
      "get": {
        "tags": [
          "Organizational Unit User Groups"
        ],
        "summary": "Gets the list of organizational unit user groups for a specified base store",
        "description": "Returns the list of organizational unit user groups accessible for a specified base store.",
        "operationId": "getOrgUnitUserGroups",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the returned results.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "uid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUnitUserGroupList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Organizational Unit User Groups"
        ],
        "summary": " Creates a new organizational unit user group",
        "description": "Creates a new organizational unit user group.",
        "operationId": "createOrgUnitUserGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgUnitUserGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUnitUserGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}": {
      "get": {
        "tags": [
          "Organizational Unit User Groups"
        ],
        "summary": "Gets specific organizational unit user group details accessible for a specified base store based on user group code",
        "description": "Returns specific UserGroup details accessible for a specified base store based on UserGroup code. The response contains detailed order information.",
        "operationId": "getOrgUnitUserGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgUnitUserGroupId",
            "in": "path",
            "description": "Organizational unit user group identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUnitUserGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Organizational Unit User Groups"
        ],
        "summary": "Removes the organizational unit user group",
        "description": "Removes the organizational unit user group.",
        "operationId": "removeOrgUnitUserGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitUserGroupId",
            "in": "path",
            "description": "Organizational unit user group identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Organizational Unit User Groups"
        ],
        "summary": "Updates the organizational unit user group",
        "description": "Updates the organizational unit user group. Only attributes provided in the request body will be changed.",
        "operationId": "updateOrgUnitUserGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitUserGroupId",
            "in": "path",
            "description": "Organizational unit user group identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgUnitUserGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}/availableOrderApprovalPermissions": {
      "get": {
        "tags": [
          "Organizational Unit User Groups"
        ],
        "summary": "Gets the list of order approval permissions for a specified organizational unit user group",
        "description": "Returns the list of order approval permissions  who can belong to a specific organizational unit user group. Order approval permissions  who already belong to the user group are flagged by 'selected' attribute.",
        "operationId": "getOrderApprovalPermissionsForOrgUnitUserGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgUnitUserGroupId",
            "in": "path",
            "description": "Organizational unit user group identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the returned results.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApprovalPermissionList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}/availableOrgCustomers": {
      "get": {
        "tags": [
          "Organizational Unit User Groups"
        ],
        "summary": "Gets the list of organizational customers for a specified organizational unit user group",
        "description": "Returns the list of organizational customers who can belong to a specific organizational unit user group. Users who already belong to the user group are flagged by 'selected' attribute.",
        "operationId": "getAvailableOrgCustomersForUserGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgUnitUserGroupId",
            "in": "path",
            "description": "Organizational unit user group identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the returned results.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUnitUserList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}/members": {
      "post": {
        "tags": [
          "Organizational Unit User Groups"
        ],
        "summary": "Add an organizational customer to a specific unit user group members",
        "description": "Adds an organizational customer to a specific unit user group members",
        "operationId": "doAddOrgCustomerToOrgUnitUserGroupMembers",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "query",
            "description": "Identifier of the organizational customer which will be added to the organizational unit user group members",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitUserGroupId",
            "in": "path",
            "description": "Organizational unit user group identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Organizational Unit User Groups"
        ],
        "summary": "Removes all organizational customers in the organizational unit user group members",
        "description": "Removes all organizational customers in the organizational unit user group members which marks the user group disabled until a new member is added",
        "operationId": "removeOrgUnitUserGroupMembers",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitUserGroupId",
            "in": "path",
            "description": "Organizational unit user group identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}/members/{orgCustomerId}": {
      "delete": {
        "tags": [
          "Organizational Unit User Groups"
        ],
        "summary": "Remove an organizational customer from the organizational unit user group members",
        "description": "Removes an organizational customer from the organizational unit user group members",
        "operationId": "removeOrgCustomerFromOrgUnitUserGroupMembers",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Identifier of the organizational customer which will be removed from the organizational unit user group members",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitUserGroupId",
            "in": "path",
            "description": "Organizational unit user group identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}/orderApprovalPermissions": {
      "post": {
        "tags": [
          "Organizational Unit User Groups"
        ],
        "summary": "Add an order approval permission to a specific organizational unit user group",
        "description": "Adds an order approval permission to a specific organizational unit user group",
        "operationId": "doAddOrderApprovalPermissionToOrgUnitUserGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orderApprovalPermissionCode",
            "in": "query",
            "description": "Order approval permission identifier which is added to the organizational unit user group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitUserGroupId",
            "in": "path",
            "description": "Identifier of the organizational unit user group which the order approval permission will be added.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BSelectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}/orderApprovalPermissions/{orderApprovalPermissionCode}": {
      "delete": {
        "tags": [
          "Organizational Unit User Groups"
        ],
        "summary": "Remove an order approval permission from a specific organizational unit user group",
        "description": "Removes an order approval permission from a specific organizational unit user group",
        "operationId": "removeOrderApprovalPermissionFromOrgUnitUserGroup",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orderApprovalPermissionCode",
            "in": "path",
            "description": "Order approval permission identifier which is removed from the organizational unit user group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitUserGroupId",
            "in": "path",
            "description": "Organizational unit user group identifier which is added to the organizational customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BSelectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnits": {
      "post": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Create a new organizational unit.",
        "description": "Creates a new organizational unit.",
        "operationId": "createOrgUnit",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2BUnit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUnit"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}": {
      "get": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Get an organizational unit.",
        "description": "Returns a specific organizational unit based on specific id. The response contains detailed organizational unit information.",
        "operationId": "getOrgUnit",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "Organizational Unit identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUnit"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Update the organizational unit",
        "description": "Updates the organizational unit. Only attributes provided in the request body will be changed.",
        "operationId": "updateOrgUnit",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "Organizational Unit identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2BUnit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/accountSummary": {
      "get": {
        "tags": [
          "Organizational Unit Account Summary"
        ],
        "summary": "Retrieves the account summary.",
        "description": "Retrieves the account summary for the organizational unit.",
        "operationId": "getAccountSummary",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "Organizational unit identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/addresses": {
      "get": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Get organizational unit addresses",
        "description": "Retrieves organizational unit addresses",
        "operationId": "getOrgUnitAddresses",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "Organizational unit id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Create a new organizational unit address",
        "description": "Creates a new organizational unit address",
        "operationId": "createOrgUnitAddress",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "Organizational unit id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/addresses/{addressId}": {
      "delete": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Remove the organizational unit address.",
        "description": "Removes the organizational unit address.",
        "operationId": "removeOrgUnitAddress",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "Address id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "Organizational unit id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Update the organizational unit address.",
        "description": "Updates the organizational unit address. Only attributes provided in the request body will be changed.",
        "operationId": "updateOrgUnitAddress",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "Address id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "Organizational unit id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/availableParents": {
      "get": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Get available parent units.",
        "description": "Returns a list of parent units for which the unit with id can be assigned as a child.",
        "operationId": "getAvailableParentUnits",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "Organizational Unit identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUnitNodeList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/availableUsers/{roleId}": {
      "get": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Get users who belongs to the organization unit.",
        "description": "Returns list of users which belongs to the organizational unit and can be assigned to a specific role. Users who are already assigned to the role are flagged by 'selected' attribute. ",
        "operationId": "getOrgUnitUsers",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "Organizational unit id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Filtering parameter which is used to return a specific role. Example roles are: b2bapprovergroup, b2badmingroup, b2bmanagergroup, b2bcustomergroup",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the display search results.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUnitUserList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/orgCustomers/{orgCustomerId}/roles": {
      "post": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Add an organizational unit dependent role to a specific organizational customer",
        "description": "Adds an organizational unit dependent role to a specific organizational customer",
        "operationId": "doAddOrgUnitRoleToOrgCustomer",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Identifier of the organizational customer which the role will be added.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "Organizational unit id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "The role which is added to the user. Example roles are: b2bapprovergroup",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/orgCustomers/{orgCustomerId}/roles/{roleId}": {
      "delete": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Remove an organizational unit dependent role from a specific organizational customer.",
        "description": "Removes an organizational unit dependent role from a specific organizational customer.",
        "operationId": "removeOrgUnitRoleFromOrgCustomer",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgCustomerId",
            "in": "path",
            "description": "Identifier of the organizational customer which the role will be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "Organizational unit id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "The role which is removed from the user. Example roles are: b2bapprovergroup, b2badmingroup, b2bmanagergroup, b2bcustomergroup",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/orgDocuments": {
      "get": {
        "tags": [
          "Organizational Unit Account Summary"
        ],
        "summary": "Retrieves the list of organizational financial documents.",
        "description": "Retrieves the list of financial documents for the organizational unit.",
        "operationId": "getOrgDocuments",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endRange",
            "in": "query",
            "description": "Upper limit for a specified range filter (for range filterByKeys: orgDocumentIdRange, createdAtDateRange (format: MM/dd/yyyy), dueAtDateRange (format: MM/dd/yyyy), amountRange (number) and openAmountRange (number).)",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "filterByKey",
            "in": "query",
            "description": "Filter to apply on the retrieved list of organizational documents. Possible values are: orgDocumentId, orgDocumentIdRange, orgDocumentType, createdAtDateRange, dueAtDateRange, amountRange, and openAmountRange.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "orgDocumentId"
            }
          },
          {
            "name": "filterByValue",
            "in": "query",
            "description": "Value for a specified filter (for single value filterByKeys: orgDocumentId and orgDocumentType.)",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "Organizational unit identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current result page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria to apply on the retrieved list of organizational documents.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "byCreatedAtDateAsc"
            }
          },
          {
            "name": "startRange",
            "in": "query",
            "description": "Lower limit for a specified range filter (for range filterByKeys: orgDocumentIdRange, createdAtDateRange (format: MM/dd/yyyy), dueAtDateRange (format: MM/dd/yyyy), amountRange (number) and openAmountRange (number).)",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Organizational document status. Possible values are: open, closed, and all.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "open"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgDocumentList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/orgDocuments/{orgDocumentId}/attachments/{orgDocumentAttachmentId}": {
      "get": {
        "tags": [
          "Organizational Unit Account Summary"
        ],
        "summary": "Returns the attachment for a given organizational document number.",
        "description": "Retrieves the attachment associated with a given organizational document for the given attachment identifier.",
        "operationId": "getOrgDocumentAttachment",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgDocumentAttachmentId",
            "in": "path",
            "description": "Organizational document attachment identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgDocumentId",
            "in": "path",
            "description": "Organizational document identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgUnitId",
            "in": "path",
            "description": "Organizational unit identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnitsAvailableApprovalProcesses": {
      "get": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Get available approval business processes.",
        "description": "Returns list of available approval business processes.",
        "operationId": "getOrgUnitsAvailableApprovalProcesses",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BApprovalProcessList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orgUnitsRootNodeTree": {
      "get": {
        "tags": [
          "Organizational Unit Management"
        ],
        "summary": "Get the root organizational unit node.",
        "description": "Returns the root organizational unit node. The response contains detailed organizational unit node information and the child nodes associated to it.",
        "operationId": "getOrgUnitsRootNodeTree",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUnitNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/password": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Changes customer's password",
        "description": "Changes customer's password.",
        "operationId": "replaceUserPassword",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "new",
            "in": "query",
            "description": "New password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "old",
            "in": "query",
            "description": "Old password. Required only for ROLE_CUSTOMERGROUP",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/paymentdetails": {
      "get": {
        "tags": [
          "Payment Details"
        ],
        "summary": "Get customer's credit card payment details list.",
        "description": "Return customer's credit card payment details list.",
        "operationId": "getPaymentDetailsList",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "saved",
            "in": "query",
            "description": "Type of payment details.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetailsList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetailsList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}": {
      "get": {
        "tags": [
          "Payment Details"
        ],
        "summary": "Get customer's credit card payment details.",
        "description": "Returns a customer's credit card payment details for the specified paymentDetailsId.",
        "operationId": "getPaymentDetails",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "paymentDetailsId",
            "in": "path",
            "description": "Payment details identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Payment Details"
        ],
        "summary": "Updates existing customer's credit card payment info.",
        "description": "Updates existing customer's credit card payment info based on the payment info ID. Attributes not given in request will be defined again (set to null or default).",
        "operationId": "replacePaymentDetails",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDetailsId",
            "in": "path",
            "description": "Payment details identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PaymentDetails"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Payment Details"
        ],
        "summary": "Deletes customer's credit card payment details.",
        "description": "Deletes a customer's credit card payment details based on a specified paymentDetailsId.",
        "operationId": "removePaymentDetails",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDetailsId",
            "in": "path",
            "description": "Payment details identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Payment Details"
        ],
        "summary": "Updates existing customer's credit card payment details.",
        "description": "Updates an existing customer's credit card payment details based on the specified paymentDetailsId. Only those attributes provided in the request will be updated.",
        "operationId": "updatePaymentDetails",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDetailsId",
            "in": "path",
            "description": "Payment details identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PaymentDetails"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/productinterests": {
      "get": {
        "tags": [
          "Product Interests"
        ],
        "summary": "Gets product interests for a user.",
        "description": "Gets product interests for a specific user.",
        "operationId": "getProductInterests",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "schema": {
              "type": "string",
              "default": "0"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "needsTotal",
            "in": "query",
            "description": "the flag for indicating if total number of results is needed or not",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "true"
            }
          },
          {
            "name": "notificationType",
            "in": "query",
            "description": "Notification type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "schema": {
              "type": "string",
              "default": "20"
            }
          },
          {
            "name": "productCode",
            "in": "query",
            "description": "Product identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/customerInterestsSearchPage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customerInterestsSearchPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Product Interests"
        ],
        "summary": "Sets product interests for a user.",
        "description": "Sets product interests for a specific user.",
        "operationId": "createProductInterest",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "notificationType",
            "in": "query",
            "description": "Notification type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productCode",
            "in": "query",
            "description": "Product identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/productInterestRelation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productInterestRelation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Product Interests"
        ],
        "summary": "Removes product interests by product code and notification type",
        "description": "Removes product interests by product code and notification type.",
        "operationId": "removeProductInterest",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationType",
            "in": "query",
            "description": "Notification type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productCode",
            "in": "query",
            "description": "Product identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/quotes": {
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "Get all quotes for user.",
        "description": "Returns history data for all quotes requested by a specified user for a specified base store. The response can display the results across multiple pages, if required.",
        "operationId": "getQuotes",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "BASIC"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "Request a quote.",
        "description": "In the edit state the quote can be requested via cartId, the current content of a cart will be then linked with the quote. The requote action can be triggered by providing the quoteCode parameter, instead of cartId inside the body. The response will contain the new quote's data.",
        "operationId": "createQuote",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteStarter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/quotes/{quoteCode}": {
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "Get a specific quote.",
        "description": "Returns quote details based on a specific quote code. The response contains detailed quote information",
        "operationId": "getQuote",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "quoteCode",
            "in": "path",
            "description": "Identifying code of the quote",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Quotes"
        ],
        "summary": "Edit the quote.",
        "description": "Updates name, description or expiry date of the quote.",
        "operationId": "replaceQuote",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteCode",
            "in": "path",
            "description": "Identifying code of the quote",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteMetadata"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Quotes"
        ],
        "summary": "Edit the quote.",
        "description": "Updates name, description or expiry date of the quote.",
        "operationId": "updateQuote",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteCode",
            "in": "path",
            "description": "Identifying code of the quote",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteMetadata"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/quotes/{quoteCode}/action": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "Perform workflow actions with the quote.",
        "description": "Perform cancel, submit, edit, checkout, approve, reject actions with the quote.",
        "operationId": "performQuoteAction",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteCode",
            "in": "path",
            "description": "Identifying code of the quote",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/quotes/{quoteCode}/comments": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "Add a comment to a quote.",
        "description": "Adds a comment to the quote",
        "operationId": "createCommentForQuote",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteCode",
            "in": "path",
            "description": "Identifying code of the quote",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/quotes/{quoteCode}/discounts": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "Apply a discount to an existing quote.",
        "description": "In the edit state, a seller can apply a discount to a quote. Type of the discount - PERCENT for discount by percentage, ABSOLUTE for discount by amount, TARGET for discount by adjustment of the total value",
        "operationId": "createQuoteDiscount",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteCode",
            "in": "path",
            "description": "Identifying code of the quote",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteDiscount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/quotes/{quoteCode}/entries/{entryNumber}/comments": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "Add a comment to a line item of a quote.",
        "description": "Add a comment to a line item of a quote.",
        "operationId": "createQuoteEntryComment",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a quote has an entry number. Quote entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "quoteCode",
            "in": "path",
            "description": "Identifying code of the quote",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/quotes/{quoteId}/entries/{entryNumber}/ccpconfigurator/configurationOverview": {
      "get": {
        "tags": [
          "Product Configurator CCP Quote Integration"
        ],
        "summary": "Gets a product configuration overview of an quote entry",
        "description": "Gets a configuration overview, a simplified, condensed read-only view on the product configuration of an quote entry. Only the selected attribute values are present here",
        "operationId": "getConfigurationOverviewForQuote",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a quote has an entry number. Quote entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quoteId",
            "in": "path",
            "description": "The quote id. Each quote has a unique identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfigurationOverview"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CCPConfigurationOverview"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/quotes/{quoteId}/entries/{entryNumber}/configurator/textfield": {
      "get": {
        "tags": [
          "Product Configurator Textfield Template"
        ],
        "summary": "Get textfield configuration for quote entry.",
        "description": "Get the textfield configuration for a quote entry.",
        "operationId": "getTextfieldConfigurationForQuoteEntry",
        "parameters": [
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a quote has an entry number. Quote entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quoteId",
            "in": "path",
            "description": "The quote id. Each quote has a unique identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationInfoList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationInfoList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/replenishmentOrders": {
      "get": {
        "tags": [
          "Replenishment Order"
        ],
        "summary": "Gets the list of replenishment orders for a specified user.",
        "description": "Returns the list of replenishment orders accessible to a specified user.",
        "operationId": "getReplenishmentOrders",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the returned results.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "code"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplenishmentOrderList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/replenishmentOrders/{replenishmentOrderCode}": {
      "get": {
        "tags": [
          "Replenishment Order"
        ],
        "summary": "Gets replenishment order for a specified user and replenishment order code.",
        "description": "Returns specific replenishment order details accessible for a specified user. The response contains detailed orders information from the replenishment order.",
        "operationId": "getReplenishmentOrder",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "replenishmentOrderCode",
            "in": "path",
            "description": "Unique code for the replenishment order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplenishmentOrder"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Replenishment Order"
        ],
        "summary": "Updates the replenishment order for a specified user and replenishment order code.",
        "description": "Updates the replenishment order. Only cancellation of the replenishment order is supported by setting the attribute 'active' to FALSE. Cancellation of the replenishment order cannot be reverted.",
        "operationId": "updateReplenishmentOrder",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "replenishmentOrderCode",
            "in": "path",
            "description": "Unique code for the replenishment order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplenishmentOrder"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/replenishmentOrders/{replenishmentOrderCode}/orders": {
      "get": {
        "tags": [
          "Replenishment Order"
        ],
        "summary": "Gets replenishment order history.",
        "description": "Returns order history data from a replenishment order placed by a specified user.",
        "operationId": "getReplenishmentOrderHistory",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "replenishmentOrderCode",
            "in": "path",
            "description": "Unique code for the replenishment order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the returned results.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "code"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderHistoryList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/savedCarts/{cartId}/entries/{entryNumber}/configurator/textfield": {
      "get": {
        "tags": [
          "Product Configurator Textfield Template"
        ],
        "summary": "Get textfield configuration for saved cart entry",
        "description": "Get the textfield configuration for a saved cart entry.",
        "operationId": "getTextfieldConfigurationForSavedCartEntry",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "The cart id. Each cart has a unique identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a saved cart has an entry number. Saved Cart entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationInfoList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationInfoList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/ticketAssociatedObjects": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get order and cart objects that can be associated with a ticket for the current user.",
        "operationId": "getTicketAssociatedObjects",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAssociatedObjectList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/tickets": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get all tickets for user.",
        "description": "Returns history data for all tickets requested by a specified user for a specified base store. The response can display the results across multiple pages, if required.",
        "operationId": "getTickets",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "BASIC"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the returned results. Currently, byDate and byTicketId are supported.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "byDate"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Create a ticket.",
        "operationId": "createTicket",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketStarter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/tickets/{ticketId}": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get a ticket by ticket id.",
        "operationId": "getTicket",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket identifier.\u003Cbr\u003E Example: ```00000001```.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/tickets/{ticketId}/events": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Create a new ticket event.",
        "description": "Create new ticket event with property message(required) and toStatus(optional).",
        "operationId": "createTicketEvent",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket identifier.\u003Cbr\u003E Example: ```00000001```.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketEvent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/tickets/{ticketId}/events/{eventCode}/attachments": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Creates an attachment for an event in a ticket.",
        "description": "Creates an attachment for a specific ticket event. The event code is used to identify the ticket event.",
        "operationId": "createTicketEventAttachment",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventCode",
            "in": "path",
            "description": "Ticket event code is specific to each event. It is used to identify an event.\u003Cbr\u003EExample: ```00000A15```.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DEFAULT"
            }
          },
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket identifier.\u003Cbr\u003E Example: ```00000001```.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ticketEventAttachment"
                ],
                "type": "object",
                "properties": {
                  "ticketEventAttachment": {
                    "type": "string",
                    "description": "File to be attached to a ticket event.",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketEventAttachment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/tickets/{ticketId}/events/{eventCode}/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Retrieves an attachment for an event in a ticket.",
        "description": "Retrieves an attachment based on the attachment identifier for a specific ticket event.",
        "operationId": "getTicketEventAttachment",
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment identifier.\u003Cbr\u003EExample: ```001```.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventCode",
            "in": "path",
            "description": "Ticket event code that is specific to each event. It is used to identify an event.\u003Cbr\u003EExample: ```00000A15```.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket identifier.\u003Cbr\u003E Example: ```00000001```.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    },
    "/{baseSiteId}/vouchers/{code}": {
      "get": {
        "tags": [
          "Vouchers"
        ],
        "summary": "Get a voucher based on code.",
        "description": "Returns details of a single voucher that is specified by its voucher identification code.",
        "operationId": "getVoucher",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Voucher identifier (code)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL",
            "required": false,
            "schema": {
              "type": "string",
              "default": "BASIC"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          },
          {
            "name": "curr",
            "in": "query",
            "description": "Currency",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Voucher"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Voucher"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2_Password": [
              "basic"
            ]
          },
          {
            "oauth2_client_credentials": [
              "extended"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
		"PageAdaptedData":{
			"type":"string"
		},
		"ComponentAdaptedData":{
			"type":"string"
		},
      "AccountSummary": {
        "type": "object",
        "properties": {
          "orgUnit": {
            "$ref": "#/components/schemas/OrgUnitReference"
          },
          "amountBalance": {
            "$ref": "#/components/schemas/AmountBalance"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "creditLimit": {
            "type": "string",
            "description": "Credit limit amount, formatted as per the selected currency.",
            "example": "$15,000.00"
          },
          "accountManagerName": {
            "type": "string",
            "description": "Name of the account manager.",
            "example": "Elke Vogel"
          },
          "accountManagerEmail": {
            "type": "string",
            "description": "Email of the account manager.",
            "example": "elke.vogel@rustic.com"
          }
        },
        "description": "Account summary of an organizational unit."
      },
      "Address": {
        "required": [
          "firstName",
          "lastName",
          "line1",
          "postalCode",
          "titleCode",
          "town"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id value of the address which is optional while creating new address. While performing other address operations this value is the key"
          },
          "title": {
            "type": "string",
            "description": "Title of the address person"
          },
          "titleCode": {
            "type": "string",
            "description": "Code of the title"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the address person"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the address person"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name"
          },
          "line1": {
            "type": "string",
            "description": "First line of the address"
          },
          "line2": {
            "type": "string",
            "description": "Second line of the address"
          },
          "town": {
            "type": "string",
            "description": "Town, field required"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "district": {
            "type": "string",
            "description": "District name"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code of the address"
          },
          "phone": {
            "type": "string",
            "description": "Phone number"
          },
          "cellphone": {
            "type": "string",
            "description": "Cellphone number"
          },
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "shippingAddress": {
            "type": "boolean",
            "description": "Boolean flag if address is for shipping"
          },
          "defaultAddress": {
            "type": "boolean",
            "description": "Boolean flag if address is default"
          },
          "visibleInAddressBook": {
            "type": "boolean",
            "description": "Boolean flag if address is visible in the Address Book"
          },
          "formattedAddress": {
            "type": "string",
            "description": "Boolean flag if address is formatted"
          },
          "city": {
            "$ref": "#/components/schemas/City"
          },
          "cityDistrict": {
            "$ref": "#/components/schemas/District"
          }
        },
        "description": "Address object"
      },
      "AddressList": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "description": "List of addresses",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "description": "Representation of an Address list"
      },
      "AddressValidation": {
        "type": "object",
        "properties": {
          "errors": {
            "$ref": "#/components/schemas/errorList"
          },
          "decision": {
            "type": "string",
            "description": "Decision"
          },
          "suggestedAddresses": {
            "type": "array",
            "description": "List of suggested addresses",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "description": "Representation of an Address Validation"
      },
      "AmountBalance": {
        "type": "object",
        "properties": {
          "openBalance": {
            "type": "string",
            "description": "Open balance as the sum of all open transactional documents, including documents that are past the payment due date.",
            "example": "$430.45"
          },
          "pastDueBalance": {
            "type": "string",
            "description": "Past due balance as the sum of all open transactional documents that are past the payment due date.",
            "example": "$130.45"
          },
          "currentBalance": {
            "type": "string",
            "description": "Current balance as the sum of all open transactional documents that are not past the payment due date.",
            "example": "$300.00"
          },
          "dueBalances": {
            "type": "array",
            "description": "Balance due for each of the defined day ranges. For example, $100 due in 1-30 days, $200 due in 31-60 days, $300 due in 61-90 days, $400 due in 91+ days.",
            "items": {
              "$ref": "#/components/schemas/DueBalanceRange"
            }
          }
        },
        "description": "Account balance details."
      },
      "B2BApprovalProcess": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the Organizational Approval Process",
            "example": "accApproval"
          },
          "name": {
            "type": "string",
            "description": "Name of the Organizational Approval Process",
            "example": "Escalation Approval with Merchant Check"
          }
        },
        "description": "Representation of an organizational approval process"
      },
      "B2BApprovalProcessList": {
        "required": [
          "approvalProcesses"
        ],
        "type": "object",
        "properties": {
          "approvalProcesses": {
            "type": "array",
            "description": "List of Organizational Approval Process",
            "items": {
              "$ref": "#/components/schemas/B2BApprovalProcess"
            }
          }
        },
        "description": "Representation of an organizational approval process list"
      },
      "B2BCostCenter": {
        "type": "object",
        "properties": {
          "originalCode": {
            "type": "string",
            "description": "The original code of the cost center. Deprecated since 2005.",
            "example": "Custom_Retail",
            "deprecated": true
          },
          "name": {
            "type": "string",
            "description": "The name of the cost center",
            "example": "Custom Retail"
          },
          "active": {
            "type": "string",
            "description": "Indication of whether the cost center is active. Deprecated since 2005. Read-only, used for display purposes.",
            "example": "true",
            "deprecated": true
          },
          "activeFlag": {
            "type": "boolean",
            "description": "Boolean flag of whether the cost center is active.",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "The code of the cost center",
            "example": "Custom_Retail"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "unit": {
            "$ref": "#/components/schemas/B2BUnit"
          },
          "assignedBudgets": {
            "type": "array",
            "description": "Budgets assigned to this cost center",
            "items": {
              "$ref": "#/components/schemas/BudgetShallow"
            }
          }
        },
        "description": "Cost center object."
      },
      "B2BCostCenterList": {
        "type": "object",
        "properties": {
          "costCenters": {
            "type": "array",
            "description": "List of cost centers",
            "items": {
              "$ref": "#/components/schemas/B2BCostCenter"
            }
          },
          "sorts": {
            "type": "array",
            "description": "List of sorts",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          }
        },
        "description": "Representation of a cost center list"
      },
      "B2BCostCenterShallow": {
        "type": "object",
        "properties": {
          "originalCode": {
            "type": "string",
            "description": "The original code of the cost center. Deprecated since 2005.",
            "example": "Custom_Retail",
            "deprecated": true
          },
          "name": {
            "type": "string",
            "description": "The name of the cost center",
            "example": "Custom Retail"
          },
          "active": {
            "type": "string",
            "description": "Indication of whether the cost center is active. Deprecated since 2005. Read-only, used for display purposes.",
            "example": "true",
            "deprecated": true
          },
          "activeFlag": {
            "type": "boolean",
            "description": "Boolean flag of whether the cost center is active.",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "The code of the cost center",
            "example": "Custom_Retail"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        },
        "description": "Representation of a cost center. This bean is shallow, which means its potential relationship fields to other Org Unit fields are simple ids. No Org Unit WsDTO fields should be declared in this bean to avoid circular references."
      },
      "B2BPaymentTypeData": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "B2BPaymentTypeList": {
        "type": "object",
        "properties": {
          "paymentTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BPaymentType"
            }
          }
        }
      },
      "B2BPaymentType": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "B2BSelectionData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the selected object",
            "example": "Retail_2K"
          },
          "selected": {
            "type": "boolean",
            "description": "If the this object was selected",
            "example": true
          },
          "active": {
            "type": "boolean",
            "description": "If this object is active",
            "example": false
          },
          "roles": {
            "type": "array",
            "description": "roles",
            "items": {
              "type": "string",
              "description": "roles"
            }
          },
          "displayRoles": {
            "type": "array",
            "description": "display roles",
            "items": {
              "type": "string",
              "description": "display roles"
            }
          },
          "normalizedCode": {
            "type": "string",
            "description": "The normalized code"
          }
        },
        "description": "Representation of object selection data"
      },
      "B2BUnit": {
        "required": [
          "uid"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Boolean flag of whether Organizational Unit is active",
            "example": true
          },
          "uid": {
            "type": "string",
            "description": "Identifier of the organizational unit",
            "example": "Pronto"
          },
          "name": {
            "type": "string",
            "description": "Name of the organizational unit",
            "example": "Pronto"
          },
          "parentOrgUnit": {
            "$ref": "#/components/schemas/B2BUnit"
          },
          "approvalProcess": {
            "$ref": "#/components/schemas/B2BApprovalProcess"
          },
          "addresses": {
            "type": "array",
            "description": "Addresses of the organizational unit node",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "approvers": {
            "type": "array",
            "description": "Approvers of the organizational unit node",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "managers": {
            "type": "array",
            "description": "Managers of the organizational unit node",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "administrators": {
            "type": "array",
            "description": "Administrators of the organizational unit node",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "customers": {
            "type": "array",
            "description": "Customers of the organizational unit node",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "costCenters": {
            "type": "array",
            "description": "The cost centers of the organizational unit node",
            "items": {
              "$ref": "#/components/schemas/B2BCostCenterShallow"
            }
          }
        },
        "description": "Organizational Unit object.",
        "example": "Rustic"
      },
      "B2BUnitNode": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the organizational unit represented by the node",
            "example": "Pronto_Retail"
          },
          "name": {
            "type": "string",
            "description": "Name of the organizational unit represented by the node",
            "example": "Pronto Retail"
          },
          "parent": {
            "type": "string",
            "description": "Unique identifier of organizational unit node's parent unit",
            "example": "Pronto"
          },
          "active": {
            "type": "boolean",
            "description": "Boolean flag of whether organizational unit represented by the node is active",
            "example": true
          },
          "children": {
            "type": "array",
            "description": "Child nodes of the organizational unit node",
            "items": {
              "$ref": "#/components/schemas/B2BUnitNode"
            }
          }
        },
        "description": "Representation of an organizational unit node"
      },
      "B2BUnitNodeList": {
        "required": [
          "unitNodes"
        ],
        "type": "object",
        "properties": {
          "unitNodes": {
            "type": "array",
            "description": "List of Unit Nodes",
            "items": {
              "$ref": "#/components/schemas/B2BUnitNode"
            }
          }
        },
        "description": "Representation of an organizational unit node list"
      },
      "BaseOption": {
        "type": "object",
        "properties": {
          "variantType": {
            "type": "string",
            "description": "Variant type of base option"
          },
          "options": {
            "type": "array",
            "description": "List of all variant options",
            "items": {
              "$ref": "#/components/schemas/VariantOption"
            }
          },
          "selected": {
            "$ref": "#/components/schemas/VariantOption"
          }
        },
        "description": "Representation of a Base Option"
      },
      "BaseSite": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Unique identifier of Basesite"
          },
          "name": {
            "type": "string",
            "description": "Name of Basesite"
          },
          "stores": {
            "type": "array",
            "description": "List of Basestores",
            "items": {
              "$ref": "#/components/schemas/BaseStore"
            }
          },
          "theme": {
            "type": "string",
            "description": "Theme of Basesite"
          },
          "defaultLanguage": {
            "$ref": "#/components/schemas/Language"
          },
          "locale": {
            "type": "string",
            "description": "Locale data for Basesite"
          },
          "channel": {
            "type": "string",
            "description": "Channel"
          },
          "urlEncodingAttributes": {
            "type": "array",
            "description": "List of url encoding attributes",
            "items": {
              "type": "string",
              "description": "List of url encoding attributes"
            }
          },
          "urlPatterns": {
            "type": "array",
            "description": "List of url patterns",
            "items": {
              "type": "string",
              "description": "List of url patterns"
            }
          },
          "defaultPreviewCatalogId": {
            "type": "string",
            "description": "Default preview catalog id"
          },
          "defaultPreviewCategoryCode": {
            "type": "string",
            "description": "Default preview category code"
          },
          "defaultPreviewProductCode": {
            "type": "string",
            "description": "Default preview product code"
          },
          "isolated": {
            "type": "boolean",
            "description": "Indicates whether customer data isolation is enabled for this site. If true, customer can get site information after registration, For example registerd username is name@sap.com, returned uid will be name@sap.com|baseSiteUid"
          },
          "captchaConfig": {
            "$ref": "#/components/schemas/CaptchaConfig"
          },
          "registrationEnabled": {
            "type": "boolean",
            "description": "Indicates if the website supports registration",
            "example": true
          },
          "requiresAuthentication": {
            "type": "boolean",
            "description": "Indicates if the BaseSite requires authentication prior to use it",
            "example": true
          }
        },
        "description": "Representation of a Base Site"
      },
      "BaseSiteList": {
        "type": "object",
        "properties": {
          "baseSites": {
            "type": "array",
            "description": "List of basesites",
            "items": {
              "$ref": "#/components/schemas/BaseSite"
            }
          }
        },
        "description": "Representation of a Base Site List"
      },
      "BaseStore": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Base store name"
          },
          "externalTaxEnabled": {
            "type": "boolean",
            "description": "Flag defining is external tax is enabled"
          },
          "paymentProvider": {
            "type": "string",
            "description": "Payment provider"
          },
          "createReturnProcessCode": {
            "type": "string",
            "description": "Create return process code"
          },
          "maxRadiusForPosSearch": {
            "type": "number",
            "description": "Maximum radius for searching point of service",
            "format": "double"
          },
          "submitOrderProcessCode": {
            "type": "string",
            "description": "Submit order process code"
          },
          "currencies": {
            "type": "array",
            "description": "List of currencies",
            "items": {
              "$ref": "#/components/schemas/Currency"
            }
          },
          "defaultCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "defaultDeliveryOrigin": {
            "$ref": "#/components/schemas/PointOfService"
          },
          "defaultLanguage": {
            "$ref": "#/components/schemas/Language"
          },
          "deliveryCountries": {
            "type": "array",
            "description": "List of delivery countries",
            "items": {
              "$ref": "#/components/schemas/Country"
            }
          },
          "deliveryModes": {
            "$ref": "#/components/schemas/DeliveryModeList"
          },
          "languages": {
            "type": "array",
            "description": "List of languages",
            "items": {
              "$ref": "#/components/schemas/Language"
            }
          },
          "pointsOfService": {
            "type": "array",
            "description": "List of points of service",
            "items": {
              "$ref": "#/components/schemas/PointOfService"
            }
          },
          "expressCheckoutEnabled": {
            "type": "boolean",
            "description": "Flag specifying whether the express checkout option is enabled"
          }
        },
        "description": "Representation of a Base Store"
      },
      "BasicnotificationPreference": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string",
            "description": "preference channel",
            "example": "email, sms, site_message"
          },
          "enabled": {
            "type": "boolean",
            "description": "if true, the channel is on; if false, the channel is off"
          }
        },
        "description": "Basic notification preference"
      },
      "BasicnotificationPreferenceList": {
        "type": "object",
        "properties": {
          "preferences": {
            "type": "array",
            "description": "Basic notification preferences",
            "items": {
              "$ref": "#/components/schemas/BasicnotificationPreference"
            }
          }
        },
        "description": "Notification preference list"
      },
      "Breadcrumb": {
        "type": "object",
        "properties": {
          "facetCode": {
            "type": "string",
            "description": "Code of the facet"
          },
          "facetName": {
            "type": "string",
            "description": "Name of the facet"
          },
          "facetValueCode": {
            "type": "string",
            "description": "Value code of the facet"
          },
          "facetValueName": {
            "type": "string",
            "description": "Value name of the facet"
          },
          "removeQuery": {
            "$ref": "#/components/schemas/SearchState"
          },
          "truncateQuery": {
            "$ref": "#/components/schemas/SearchState"
          }
        },
        "description": "Representation of a Breadcrumb"
      },
      "Budget": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Boolean flag of whether the Budget is active"
          },
          "budget": {
            "type": "number",
            "description": "Value of Budget",
            "example": 50000
          },
          "code": {
            "type": "string",
            "description": "Code of the Budget",
            "example": "Monthly_50K_USD"
          },
          "name": {
            "type": "string",
            "description": "The name of the Budget",
            "example": "Monthly 50K USD"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the Budget",
            "format": "date-time",
            "example": "2024-04-22T09:57:59Z"
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the Budget",
            "format": "date-time",
            "example": "2024-04-22T09:57:59Z"
          },
          "selected": {
            "type": "boolean",
            "description": "Boolean flag whether the budget is selected for a cost center",
            "example": true
          },
          "orgUnit": {
            "$ref": "#/components/schemas/B2BUnit"
          },
          "costCenters": {
            "type": "array",
            "description": "List of Cost Centers",
            "items": {
              "$ref": "#/components/schemas/B2BCostCenter"
            }
          }
        },
        "description": "Budget."
      },
      "BudgetList": {
        "type": "object",
        "properties": {
          "budgets": {
            "type": "array",
            "description": "List of Budgets",
            "items": {
              "$ref": "#/components/schemas/Budget"
            }
          },
          "sorts": {
            "type": "array",
            "description": "List of sorts",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          }
        },
        "description": "Representation of a Budget List"
      },
      "BudgetShallow": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Boolean flag of whether the Budget is active"
          },
          "budget": {
            "type": "number",
            "description": "Value of Budget",
            "example": 50000
          },
          "code": {
            "type": "string",
            "description": "Code of the Budget",
            "example": "Monthly_50K_USD"
          },
          "name": {
            "type": "string",
            "description": "The name of the Budget",
            "example": "Monthly 50K USD"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the Budget",
            "format": "date-time",
            "example": "2024-04-22T09:57:57Z"
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the Budget",
            "format": "date-time",
            "example": "2024-04-22T09:57:57Z"
          },
          "selected": {
            "type": "boolean",
            "description": "Boolean flag whether the budget is selected for a cost center",
            "example": true
          }
        },
        "description": "Request body fields required and optional to operate on Budget data. This bean is shallow, which means its potential relationship fields to other Org Unit fields are simple ids. No Org Unit WsDTO should be declared in this bean to avoid circular references."
      },
      "BundleStarter": {
        "required": [
          "productCode",
          "quantity",
          "templateId"
        ],
        "type": "object",
        "properties": {
          "templateId": {
            "type": "string",
            "description": "Id of a template to create a bundle",
            "example": "PhotoStarterPackage"
          },
          "productCode": {
            "type": "string",
            "description": "Product code.",
            "example": "29925"
          },
          "quantity": {
            "minimum": 1,
            "type": "integer",
            "description": "Quantity of the product added to cart",
            "format": "int64",
            "example": 1
          }
        },
        "description": "Mandatory data required to start a bundle. This includes the templateId of the bundle, the productCode, and the quantity of the product itself."
      },
      "BundleTemplate": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of this bundle template",
            "example": "PhotoOTGCameraComponent"
          },
          "name": {
            "type": "string",
            "description": "Name of this bundle template",
            "example": "Camera Component"
          },
          "rootBundleTemplateName": {
            "type": "string",
            "description": "Name of the root bundle template within the bundle tree structure",
            "example": "Photo On The Go Package"
          }
        },
        "description": "Description of a bundle component related to a product"
      },
      "CCPAttribute": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Language independent attribute key",
            "example": "1-CONF_LAPTOP.HARDWARE-SCREEN_SIZE"
          },
          "name": {
            "type": "string",
            "description": "Language independent attribute name as assigned in the modeling environment",
            "example": "SCREEN_SIZE"
          },
          "langDepName": {
            "type": "string",
            "description": "Language dependent attribute description",
            "example": "Screen Size"
          },
          "value": {
            "type": "string",
            "description": "Attribute value, in case the attribute is single valued",
            "example": "17'"
          },
          "formattedValue": {
            "type": "string",
            "description": "Formatted attribute value, relevant for numeric attributes. This formatting takes the session locale into account",
            "example": "24,87"
          },
          "longText": {
            "type": "string",
            "description": "Language dependent attribute long description",
            "example": "Screen size in inches"
          },
          "visible": {
            "type": "boolean",
            "description": "Attribute is visible",
            "example": true
          },
          "required": {
            "type": "boolean",
            "description": "It is required to specify this attribute in order to complete the configuration",
            "example": false
          },
          "type": {
            "type": "string",
            "description": "Attribute type. Specifies how the attribute should be rendered ideally",
            "example": "CHECK_BOX_LIST",
            "enum": [
              "STRING",
              "NUMERIC",
              "CHECK_BOX",
              "CHECK_BOX_LIST",
              "RADIO_BUTTON",
              "RADIO_BUTTON_ADDITIONAL_INPUT",
              "DROPDOWN",
              "DROPDOWN_ADDITIONAL_INPUT",
              "READ_ONLY",
              "NOT_IMPLEMENTED",
              "SINGLE_SELECTION_IMAGE",
              "MULTI_SELECTION_IMAGE",
              "READ_ONLY_SINGLE_SELECTION_IMAGE",
              "READ_ONLY_MULTI_SELECTION_IMAGE"
            ]
          },
          "validationType": {
            "type": "string",
            "description": "Attribute validation type. Specifies how an attribute should be validated in case it's free input",
            "example": "NUMERIC",
            "enum": [
              "NUMERIC",
              "NONE"
            ]
          },
          "intervalInDomain": {
            "type": "boolean",
            "description": "The list of attribute domain values contain an interval. Only relevant if the attribute is of numeric type",
            "example": false
          },
          "maxlength": {
            "type": "integer",
            "description": "Maximum length of attribute value names for all domain values",
            "format": "int32",
            "example": 5
          },
          "typeLength": {
            "type": "integer",
            "description": "Maximum number of decimal places. Only relevant if the attribute is of numeric type",
            "format": "int32",
            "example": 10
          },
          "numberScale": {
            "type": "integer",
            "description": "Number of decimal places. Only relevant if the attribute is of numeric type",
            "format": "int32",
            "example": 2
          },
          "negativeAllowed": {
            "type": "boolean",
            "description": "Are negative values allowed? Only relevant if the attribute is of numeric type",
            "example": false
          },
          "retractTriggered": {
            "type": "boolean",
            "description": "Has a retract been triggered for all values of this attribute?",
            "example": true
          },
          "retractBlocked": {
            "type": "boolean",
            "description": "Retract must never happen for this attribute because the configuration engine forbids that",
            "example": true
          },
          "domainValues": {
            "type": "array",
            "description": "List of domain values",
            "items": {
              "$ref": "#/components/schemas/CCPAttributeValue"
            }
          },
          "conflicts": {
            "type": "array",
            "description": "List of conflicts",
            "items": {
              "$ref": "#/components/schemas/CCPConflict"
            }
          },
          "images": {
            "type": "array",
            "description": "Image list",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        },
        "description": "An attribute of a complex product"
      },
      "CCPAttributePricing": {
        "type": "object",
        "properties": {
          "csticUiKey": {
            "type": "string",
            "description": "Attribute key",
            "example": "1-CONF_LAPTOP.AUDIO-ACCESSORY"
          },
          "selectedValues": {
            "type": "array",
            "description": "List of currently selected domain values",
            "items": {
              "type": "string",
              "description": "List of currently selected domain values"
            }
          },
          "priceSupplements": {
            "type": "array",
            "description": "List of value price supplements",
            "items": {
              "$ref": "#/components/schemas/CCPAttributeValuePricing"
            }
          }
        },
        "description": "Enriches an attribute with supplementary pricing data"
      },
      "CCPAttributeValue": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Value key",
            "example": "MET_BLUE"
          },
          "name": {
            "type": "string",
            "description": "Language independent value name",
            "example": "MET_BLUE"
          },
          "langDepName": {
            "type": "string",
            "description": "Language dependent value description",
            "example": "Metallic Blue"
          },
          "selected": {
            "type": "boolean",
            "description": "Indicates if value is selected",
            "example": false
          },
          "readonly": {
            "type": "boolean",
            "description": "Indicates if value is read-only",
            "example": false
          },
          "images": {
            "type": "array",
            "description": "List of images",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        },
        "description": "Representation of an attribute value"
      },
      "CCPAttributeValueOverview": {
        "type": "object",
        "properties": {
          "characteristic": {
            "type": "string",
            "description": "Language dependent attribute name",
            "example": "Accessories"
          },
          "characteristicId": {
            "type": "string",
            "description": "Attribute ID",
            "example": "ACCESSORIES"
          },
          "value": {
            "type": "string",
            "description": "Language dependent value name",
            "example": "Extra Audio Package"
          },
          "valueId": {
            "type": "string",
            "description": "Value ID",
            "example": "EXTRA_AUDIO_PACKAGE"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "obsoletePrice": {
            "$ref": "#/components/schemas/Price"
          }
        },
        "description": "Representation of an attribute value in the context of the configuration overview"
      },
      "CCPAttributeValuePricing": {
        "type": "object",
        "properties": {
          "attributeValueKey": {
            "type": "string",
            "description": "Value key",
            "example": "MET_BLUE"
          },
          "priceValue": {
            "$ref": "#/components/schemas/Price"
          },
          "obsoletePriceValue": {
            "$ref": "#/components/schemas/Price"
          }
        },
        "description": "Enriches an attribute value with supplementary pricing data"
      },
      "CCPConfiguration": {
        "type": "object",
        "properties": {
          "configId": {
            "type": "string",
            "description": "Configuration Identifier. A randomly generated UUID owned by the product configurator",
            "example": "ee520001-3e9a-4321-acc8-b92783c8ca4e"
          },
          "rootProduct": {
            "type": "string",
            "description": "Code of the configuration root product",
            "example": "CONF_LAPTOP"
          },
          "consistent": {
            "type": "boolean",
            "description": "Configuration is consistent, meaning it contains no conflicts",
            "example": true
          },
          "complete": {
            "type": "boolean",
            "description": "Configuration is complete, meaning each mandatory attribute has been specified",
            "example": true
          },
          "quantity": {
            "type": "integer",
            "description": "Configuration quantity",
            "format": "int64",
            "example": 1
          },
          "totalNumberOfIssues": {
            "type": "integer",
            "description": "Total number of issues: sum of number of conflicts and number of incomplete mandatory field",
            "format": "int32",
            "example": 1
          },
          "groups": {
            "type": "array",
            "description": "Attribute groups",
            "items": {
              "$ref": "#/components/schemas/CCPGroup"
            }
          },
          "kbKey": {
            "$ref": "#/components/schemas/CCPKBData"
          },
          "pricingEnabled": {
            "type": "boolean",
            "description": "Pricing is enabled, meaning that pricing related APIs are called and prices are shown during configuration",
            "example": true
          },
          "immediateConflictResolution": {
            "type": "boolean",
            "description": "Indicates that conflicts needs to be resolved immediately, before any other action is taken",
            "example": true
          }
        },
        "description": "Representation of a product configuration. Contains the entities that describe a complex product: attributes of different types, groups of attributes, hierarchies of groups, statuses and messages. The attributes are typically connected through dependencies"
      },
      "CCPConfigurationOverallPricing": {
        "type": "object",
        "properties": {
          "basePrice": {
            "$ref": "#/components/schemas/Price"
          },
          "selectedOptions": {
            "$ref": "#/components/schemas/Price"
          },
          "currentTotal": {
            "$ref": "#/components/schemas/Price"
          },
          "currentTotalSavings": {
            "$ref": "#/components/schemas/Price"
          }
        },
        "description": "Prices on overall product configuration level"
      },
      "CCPConfigurationOverview": {
        "type": "object",
        "properties": {
          "sourceDocumentId": {
            "type": "string",
            "description": "Identifier of document that owns this configuration. Can be the ID of a saved cart, a quote or an order",
            "example": "0001012345"
          },
          "id": {
            "type": "string",
            "description": "Configuration Identifier. A randomly generated UUID owned by the product configurator",
            "example": "ee520001-3e9a-4321-acc8-b92783c8ca4e"
          },
          "productCode": {
            "type": "string",
            "description": "Product code of configuration's root product",
            "example": "CONF_LAPTOP"
          },
          "totalNumberOfIssues": {
            "type": "integer",
            "description": "Total number of issues: sum of number of conflicts and number of incomplete mandatory field",
            "format": "int32",
            "example": 1
          },
          "numberOfIncompleteCharacteristics": {
            "type": "integer",
            "description": "Total number of incomplete attributes",
            "format": "int32",
            "example": 1
          },
          "numberOfConflicts": {
            "type": "integer",
            "description": "Total number of conflicts",
            "format": "int32",
            "example": 1
          },
          "appliedCsticFilter": {
            "type": "array",
            "description": "For filtering the configuration overview according to attribute facets like price relevance or attribute author",
            "items": {
              "$ref": "#/components/schemas/CCPFilterData"
            }
          },
          "groupFilterList": {
            "type": "array",
            "description": "For filtering the configuration overview according to the UI groups",
            "items": {
              "$ref": "#/components/schemas/CCPFilterData"
            }
          },
          "groups": {
            "type": "array",
            "description": "Configuration overview groups",
            "items": {
              "$ref": "#/components/schemas/CCPGroupOverview"
            }
          },
          "pricing": {
            "$ref": "#/components/schemas/CCPConfigurationOverallPricing"
          },
          "pricingEnabled": {
            "type": "boolean",
            "description": "Pricing is enabled, meaning that pricing related APIs are called and prices are shown during configuration",
            "example": true
          }
        },
        "description": "Representation of a product configuration overview, a condensed read-only view of a product configuration. Contains only the selected values"
      },
      "CCPConfigurationPricing": {
        "type": "object",
        "properties": {
          "configId": {
            "type": "string",
            "description": "Configuration Identifier. A randomly generated UUID owned by the product configurator",
            "example": "ee520001-3e9a-4321-acc8-b92783c8ca4e"
          },
          "showDeltaPrices": {
            "type": "boolean",
            "description": "Indicates that attribute surcharges are displayed relatively to the current attribute price",
            "example": true
          },
          "pricingError": {
            "type": "boolean",
            "description": "Indicates that pricing is currently not available",
            "example": false
          },
          "attributes": {
            "type": "array",
            "description": "List of supplementary data on attribute level",
            "items": {
              "$ref": "#/components/schemas/CCPAttributePricing"
            }
          },
          "priceSummary": {
            "$ref": "#/components/schemas/CCPConfigurationOverallPricing"
          }
        },
        "description": "Enriches a product configuration with supplementary pricing data"
      },
      "CCPConfigurationProductVariant": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Product Code"
          },
          "name": {
            "type": "string",
            "description": "Language dependent product name"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "imageData": {
            "$ref": "#/components/schemas/Image"
          }
        },
        "description": "Product variant of a configurable product"
      },
      "CCPConflict": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Language dependent conflict text",
            "example": "It is not possible to select the extra audio package and the docking station T20 in parallel. Review your selections"
          }
        },
        "description": "Textual representation of a conflict"
      },
      "CCPFilterData": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Identifier of the filter. Can contain the UI group identifier, or an enum representing different attribute facets like 'USER_INPUT' or 'PRICE_RELEVANT'",
            "example": "USER_INPUT"
          },
          "selected": {
            "type": "boolean",
            "description": "Describes if filter item is selected",
            "example": true
          }
        },
        "description": "Bean used for filtering the configuration overview"
      },
      "CCPGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group Identifier",
            "example": "1-CONF_LAPTOP.AUDIO"
          },
          "name": {
            "type": "string",
            "description": "Language independent group name",
            "example": "AUDIO"
          },
          "description": {
            "type": "string",
            "description": "Language dependent group description",
            "example": "Audio Options"
          },
          "configurable": {
            "type": "boolean",
            "description": "Group contains attributes. False if the group represents a non-configurable leaf in the configuration hierarchy",
            "example": true
          },
          "consistent": {
            "type": "boolean",
            "description": "Group is consistent, meaning it contains no conflicts",
            "example": true
          },
          "complete": {
            "type": "boolean",
            "description": "Group is complete, meaning each mandatory attribute has been specified",
            "example": true
          },
          "groupType": {
            "type": "string",
            "description": "INSTANCE"
          },
          "attributes": {
            "type": "array",
            "description": "List of attributes",
            "items": {
              "$ref": "#/components/schemas/CCPAttribute"
            }
          },
          "subGroups": {
            "type": "array",
            "description": "List of subordinate groups",
            "items": {
              "$ref": "#/components/schemas/CCPGroup"
            }
          }
        },
        "description": "Representation of a group in the context of the product configuration"
      },
      "CCPGroupOverview": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group Identifier",
            "example": "1-CONF_LAPTOP.GROUP1"
          },
          "groupDescription": {
            "type": "string",
            "description": "Language dependent group description",
            "example": "Audio Options"
          },
          "groupType": {
            "type": "string",
            "description": "Type of group",
            "example": "CONFLICT"
          },
          "characteristicValues": {
            "type": "array",
            "description": "Attribute values",
            "items": {
              "$ref": "#/components/schemas/CCPAttributeValueOverview"
            }
          },
          "subGroups": {
            "type": "array",
            "description": "List of subordinate groups",
            "items": {
              "$ref": "#/components/schemas/CCPGroupOverview"
            }
          }
        },
        "description": "Representation of a group in the context of the product configuration overview"
      },
      "CCPKBData": {
        "type": "object",
        "properties": {
          "kbName": {
            "type": "string",
            "description": "Knowledge base name",
            "example": "KB_CONF_LAPTOP"
          },
          "kbLogsys": {
            "type": "string",
            "description": "Logical system ID of source system",
            "example": "YXZCLNT200"
          },
          "kbVersion": {
            "type": "string",
            "description": "Knowledge base version",
            "example": "1.0"
          },
          "kbBuildNumber": {
            "type": "string",
            "description": "Knowledge base build number",
            "example": "23"
          }
        },
        "description": "Representation of knowledge base key and administrative data"
      },
      "CCPOrderEntry": {
        "type": "object",
        "properties": {
          "entryNumber": {
            "type": "integer",
            "description": "Entry number of the order entry",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity number of items in order entry",
            "format": "int64"
          },
          "basePrice": {
            "$ref": "#/components/schemas/Price"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "updateable": {
            "type": "boolean",
            "description": "Flag defining if order entry item is updateable"
          },
          "deliveryMode": {
            "$ref": "#/components/schemas/DeliveryMode"
          },
          "configurationInfos": {
            "type": "array",
            "description": "Configuration info of order entry",
            "items": {
              "$ref": "#/components/schemas/ConfigurationInfo"
            }
          },
          "statusSummaryList": {
            "type": "array",
            "description": "List of aggregated status information per entry, relevant if the entry is configurable and its configuration contains one or many issues in different severities. Note that configurators typically raise such issues only in case the parent document is changeable. In this case the issues (depending on their severity) need to be fixed before a checkout can be done. This means this segment can be present for a cart entry, for order entries it will always be empty",
            "items": {
              "$ref": "#/components/schemas/StatusSummary"
            }
          },
          "deliveryPointOfService": {
            "$ref": "#/components/schemas/PointOfService"
          },
          "cancelledItemsPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "cancellableQuantity": {
            "type": "integer",
            "description": "Quantity number of cancellable items in order entry",
            "format": "int64",
            "example": 5
          },
          "returnedItemsPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "returnableQuantity": {
            "type": "integer",
            "description": "Quantity number of returnable items in order entry",
            "format": "int64",
            "example": 5
          },
          "comments": {
            "type": "array",
            "description": "List of order entry comments.",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "url": {
            "type": "string"
          },
          "quantityAllocated": {
            "type": "integer",
            "format": "int64"
          },
          "quantityUnallocated": {
            "type": "integer",
            "format": "int64"
          },
          "quantityCancelled": {
            "type": "integer",
            "format": "int64"
          },
          "quantityPending": {
            "type": "integer",
            "format": "int64"
          },
          "quantityShipped": {
            "type": "integer",
            "format": "int64"
          },
          "quantityReturned": {
            "type": "integer",
            "format": "int64"
          },
          "configId": {
            "type": "string",
            "description": "Configuration Identifier. A randomly generated UUID owned by the product configurator",
            "example": "ee520001-3e9a-4321-acc8-b92783c8ca4e"
          }
        },
        "description": "Request body parameter that contains attributes for creating the order entry, like quantity, product code and configuration identifier"
      },
      "CXML": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "payloadID": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "timestamp": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "signatureVersion": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "xmlLang": {
            "type": "string",
            "xml": {
              "name": "xml:lang",
              "attribute": true
            }
          },
          "headerOrMessageOrRequestOrResponse": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "dsSignature": {
            "type": "array",
            "xml": {
              "name": "ds:Signature"
            },
            "items": {
              "$ref": "#/components/schemas/DsSignature"
            }
          }
        },
        "description": "The cXML containing the order to be processed. It consists of a header that contains fields such as order id, order date,ship to and tax. The payload contains information pertaining to individual items ordered.",
        "xml": {
          "name": "cXML"
        }
      },
      "CancellationRequestEntryInput": {
        "required": [
          "orderEntryNumber",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "orderEntryNumber": {
            "type": "integer",
            "description": "Order entry number of the cancelled product",
            "format": "int32",
            "example": 1
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the product which belongs to the order entry and is requested to be cancelled",
            "format": "int64",
            "example": 5
          }
        },
        "description": "Representation of a cancellation request entry input for an order"
      },
      "CancellationRequestEntryInputList": {
        "required": [
          "cancellationRequestEntryInputs"
        ],
        "type": "object",
        "properties": {
          "cancellationRequestEntryInputs": {
            "type": "array",
            "description": "Cancellation request entry inputs which contain information about the order entries which are requested to be cancelled",
            "items": {
              "$ref": "#/components/schemas/CancellationRequestEntryInput"
            }
          }
        },
        "description": "Cancellation request input list for the current order."
      },
      "CaptchaConfig": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the captcha is enabled or not",
            "example": true
          },
          "publicKey": {
            "type": "string",
            "description": "The public key used in captcha validation",
            "example": "6LdeF6tgAAAAAE_T55TB0nmg--qmbnkwqC4LPQbg"
          }
        },
        "description": "Configuration information of captcha"
      },
      "CardType": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Card type code"
          },
          "name": {
            "type": "string",
            "description": "Card type name"
          }
        },
        "description": "Representation of a Card Type"
      },
      "CardTypeList": {
        "type": "object",
        "properties": {
          "cardTypes": {
            "type": "array",
            "description": "List of card types",
            "items": {
              "$ref": "#/components/schemas/CardType"
            }
          }
        },
        "description": "Representation of a Card Type List"
      },
      "Cart": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code number of order"
          },
          "net": {
            "type": "boolean",
            "description": "Flag stating iv value is net-value"
          },
          "totalPriceWithTax": {
            "$ref": "#/components/schemas/Price"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "totalTax": {
            "$ref": "#/components/schemas/Price"
          },
          "subTotal": {
            "$ref": "#/components/schemas/Price"
          },
          "deliveryCost": {
            "$ref": "#/components/schemas/Price"
          },
          "entries": {
            "type": "array",
            "description": "List of order entries",
            "items": {
              "$ref": "#/components/schemas/OrderEntry"
            }
          },
          "entryGroups": {
            "type": "array",
            "description": "List of entry groups",
            "items": {
              "$ref": "#/components/schemas/EntryGroup"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "deliveryMode": {
            "$ref": "#/components/schemas/DeliveryMode"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "paymentInfo": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "appliedOrderPromotions": {
            "type": "array",
            "description": "List of applied order promotions",
            "items": {
              "$ref": "#/components/schemas/PromotionResult"
            }
          },
          "appliedProductPromotions": {
            "type": "array",
            "description": "List of applied product promotions",
            "items": {
              "$ref": "#/components/schemas/PromotionResult"
            }
          },
          "productDiscounts": {
            "$ref": "#/components/schemas/Price"
          },
          "orderDiscounts": {
            "$ref": "#/components/schemas/Price"
          },
          "totalDiscounts": {
            "$ref": "#/components/schemas/Price"
          },
          "site": {
            "type": "string",
            "description": "Site"
          },
          "store": {
            "type": "string",
            "description": "Store"
          },
          "guid": {
            "type": "string",
            "description": "Guest user id identifier"
          },
          "calculated": {
            "type": "boolean",
            "description": "Flag showing if order is calculated"
          },
          "appliedVouchers": {
            "type": "array",
            "description": "List of applied vouchers",
            "items": {
              "$ref": "#/components/schemas/Voucher"
            }
          },
          "user": {
            "$ref": "#/components/schemas/Principal"
          },
          "pickupOrderGroups": {
            "type": "array",
            "description": "List of pickup order entry group",
            "items": {
              "$ref": "#/components/schemas/PickupOrderEntryGroup"
            }
          },
          "deliveryOrderGroups": {
            "type": "array",
            "description": "List of delivery order entries group",
            "items": {
              "$ref": "#/components/schemas/DeliveryOrderEntryGroup"
            }
          },
          "pickupItemsQuantity": {
            "type": "integer",
            "description": "Quantity of pickup items",
            "format": "int64"
          },
          "deliveryItemsQuantity": {
            "type": "integer",
            "description": "Quantity of delivery items",
            "format": "int64"
          },
          "deliveryTimeSlot": {
            "$ref": "#/components/schemas/DeliveryTimeSlot"
          },
          "chinesePaymentInfo": {
            "$ref": "#/components/schemas/ChinesePaymentInfo"
          },
          "paymentStatus": {
            "type": "string",
            "description": "Payment status",
            "example": "PAID"
          },
          "taxInvoice": {
            "$ref": "#/components/schemas/TaxInvoice"
          },
          "totalUnitCount": {
            "type": "integer",
            "description": "Total unit count",
            "format": "int32"
          },
          "potentialOrderPromotions": {
            "type": "array",
            "description": "List of potential order promotions for cart",
            "items": {
              "$ref": "#/components/schemas/PromotionResult"
            }
          },
          "potentialProductPromotions": {
            "type": "array",
            "description": "List of potential product promotions for cart",
            "items": {
              "$ref": "#/components/schemas/PromotionResult"
            }
          },
          "name": {
            "type": "string",
            "description": "Name of the cart"
          },
          "description": {
            "type": "string",
            "description": "Description of the cart"
          },
          "expirationTime": {
            "type": "string",
            "description": "Date of cart expiration time",
            "format": "date-time",
            "example": "2024-04-22T09:57:57Z"
          },
          "saveTime": {
            "type": "string",
            "description": "Date of saving cart",
            "format": "date-time",
            "example": "2024-04-22T09:57:57Z"
          },
          "savedBy": {
            "$ref": "#/components/schemas/Principal"
          },
          "costCenter": {
            "$ref": "#/components/schemas/B2BCostCenter"
          },
          "paymentType": {
            "$ref": "#/components/schemas/B2BPaymentTypeData"
          },
          "purchaseOrderNumber": {
            "type": "string"
          }
        },
        "description": "Representation of a Cart"
      },
      "CartList": {
        "type": "object",
        "properties": {
          "carts": {
            "type": "array",
            "description": "List of carts",
            "items": {
              "$ref": "#/components/schemas/Cart"
            }
          }
        },
        "description": "Representation of a Cart list"
      },
      "CartModification": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "string",
            "description": "Status code of cart modification"
          },
          "quantityAdded": {
            "type": "integer",
            "description": "Quantity added with cart modification",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "description": "Final quantity after cart modification",
            "format": "int64"
          },
          "entry": {
            "$ref": "#/components/schemas/OrderEntry"
          },
          "deliveryModeChanged": {
            "type": "boolean",
            "description": "Delivery mode changed"
          },
          "statusMessage": {
            "type": "string",
            "description": "Status message"
          }
        },
        "description": "Representation of a Cart modification"
      },
      "CartModificationList": {
        "type": "object",
        "properties": {
          "cartModifications": {
            "type": "array",
            "description": "List of cart modifications",
            "items": {
              "$ref": "#/components/schemas/CartModification"
            }
          }
        },
        "description": "Representation of a Cart modification list"
      },
      "Catalog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of abstract catalog item"
          },
          "lastModified": {
            "type": "string",
            "description": "Date of last modification",
            "format": "date-time",
            "example": "2024-04-22T09:58:03Z"
          },
          "name": {
            "type": "string",
            "description": "Name of abstract catalog item"
          },
          "url": {
            "type": "string",
            "description": "Url address of abstract catalog item"
          },
          "catalogVersions": {
            "type": "array",
            "description": "List of versions of catalog",
            "items": {
              "$ref": "#/components/schemas/CatalogVersion"
            }
          }
        },
        "description": "Representation of an Catalog"
      },
      "CatalogList": {
        "type": "object",
        "properties": {
          "catalogs": {
            "type": "array",
            "description": "List of catalog items",
            "items": {
              "$ref": "#/components/schemas/Catalog"
            }
          }
        },
        "description": "Representation of a Catalog List"
      },
      "CatalogVersion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of abstract catalog item"
          },
          "lastModified": {
            "type": "string",
            "description": "Date of last modification",
            "format": "date-time",
            "example": "2024-04-22T09:58:03Z"
          },
          "name": {
            "type": "string",
            "description": "Name of abstract catalog item"
          },
          "url": {
            "type": "string",
            "description": "Url address of abstract catalog item"
          },
          "categories": {
            "type": "array",
            "description": "List of category hierarchies",
            "items": {
              "$ref": "#/components/schemas/CategoryHierarchy"
            }
          }
        },
        "description": "Representation of a Catalog Version"
      },
      "Category": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the category"
          },
          "name": {
            "type": "string",
            "description": "Name of the category"
          },
          "url": {
            "type": "string",
            "description": "URL of the category"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          }
        },
        "description": "Representation of a Category"
      },
      "CategoryHierarchy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of abstract catalog item"
          },
          "lastModified": {
            "type": "string",
            "description": "Date of last modification",
            "format": "date-time",
            "example": "2024-04-22T09:58:03Z"
          },
          "name": {
            "type": "string",
            "description": "Name of abstract catalog item"
          },
          "url": {
            "type": "string",
            "description": "Url address of abstract catalog item"
          },
          "subcategories": {
            "type": "array",
            "description": "List of subcategory hierarchies",
            "items": {
              "$ref": "#/components/schemas/CategoryHierarchy"
            }
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "description": "Representation of a Category Hierarchy"
      },
      "ChinesePaymentInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Chinese payment info identifier"
          },
          "paymentProvider": {
            "type": "string",
            "description": "Payment provider of Chinese payment info"
          },
          "serviceType": {
            "type": "string",
            "description": "The serviceType which is used for payment and defined in different payment providers",
            "example": "DirectPay"
          },
          "paymentProviderLogo": {
            "type": "string",
            "description": "Logo url of payment provider",
            "example": "/medias/wechatpay.png?context=CONTEXT"
          },
          "paymentProviderName": {
            "type": "string",
            "description": "Name of payment provider"
          }
        },
        "description": "Chinese payment info"
      },
      "City": {
        "type": "object",
        "properties": {
          "isocode": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 standard, e.g.[countryIso]-[regionNumber]-[cityNumber]",
            "example": "CN-11-1"
          },
          "name": {
            "type": "string",
            "description": "name of city",
            "example": "Beijing"
          }
        },
        "description": "data object of city"
      },
      "CityList": {
        "type": "object",
        "properties": {
          "cities": {
            "type": "array",
            "description": "list of city",
            "items": {
              "$ref": "#/components/schemas/City"
            }
          }
        },
        "description": "list of city"
      },
      "Classification": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the classification"
          },
          "name": {
            "type": "string",
            "description": "Name of the classification"
          },
          "features": {
            "type": "array",
            "description": "List of features for given classification",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          }
        },
        "description": "Representation of a Classification"
      },
      "Comment": {
        "required": [
          "creationDate",
          "fromCustomer",
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text of the comment.",
            "example": "Text of the comment"
          },
          "creationDate": {
            "type": "string",
            "description": "Date when the comment was created.",
            "format": "date-time",
            "example": "2024-04-22T09:57:57Z"
          },
          "author": {
            "$ref": "#/components/schemas/Principal"
          },
          "fromCustomer": {
            "type": "boolean",
            "description": "Flag showing if the current customer was the author of the comment.",
            "example": true
          }
        },
        "description": "Object of the comment, which can be added to any Item in the commerce suite."
      },
      "ComponentIDList": {
        "type": "object",
        "properties": {
          "idList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "List of Component identifiers"
      },
      "ConfigurationInfo": {
        "type": "object",
        "properties": {
          "configuratorType": {
            "type": "string",
            "description": "Type of configuration info"
          },
          "status": {
            "type": "string",
            "description": "Status of configuration info"
          },
          "configurationLabel": {
            "type": "string",
            "description": "Label of configuration info"
          },
          "configurationValue": {
            "type": "string",
            "description": "Value of configuration info"
          }
        },
        "description": "Representation of a Configuration Info"
      },
      "ConfigurationInfoList": {
        "type": "object",
        "properties": {
          "configurationInfos": {
            "type": "array",
            "description": "List of configuration info",
            "items": {
              "$ref": "#/components/schemas/ConfigurationInfo"
            }
          }
        },
        "description": "Request body parameter (DTO in xml or json format) which contains details like : product code (product.code), quantity of product (quantity), pickup store name (deliveryPointOfService.name)"
      },
      "Consent": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of consent"
          },
          "consentGivenDate": {
            "type": "string",
            "description": "Date of consenting",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "consentWithdrawnDate": {
            "type": "string",
            "description": "Consent withdrawn date",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          }
        },
        "description": "Representation of a Consent"
      },
      "ConsentTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Consent template identifier"
          },
          "name": {
            "type": "string",
            "description": "Consent template name"
          },
          "description": {
            "type": "string",
            "description": "Consent template description"
          },
          "version": {
            "type": "integer",
            "description": "Consent template version",
            "format": "int32"
          },
          "currentConsent": {
            "$ref": "#/components/schemas/Consent"
          }
        },
        "description": "Representation of a Consent Template"
      },
      "ConsentTemplateList": {
        "type": "object",
        "properties": {
          "consentTemplates": {
            "type": "array",
            "description": "List of consent templates",
            "items": {
              "$ref": "#/components/schemas/ConsentTemplate"
            }
          }
        },
        "description": "Representation of a Consent Template List"
      },
      "Consignment": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Consignment code"
          },
          "trackingID": {
            "type": "string",
            "description": "Consignment tracking identifier"
          },
          "status": {
            "type": "string",
            "description": "Consignment status"
          },
          "statusDisplay": {
            "type": "string",
            "description": "Consignment status display"
          },
          "statusDate": {
            "type": "string",
            "description": "Consignment status date",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "entries": {
            "type": "array",
            "description": "List of consignment entries",
            "items": {
              "$ref": "#/components/schemas/ConsignmentEntry"
            }
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "deliveryPointOfService": {
            "$ref": "#/components/schemas/PointOfService"
          },
          "orderCode": {
            "type": "string"
          },
          "shippingDate": {
            "type": "string",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "deliveryMode": {
            "$ref": "#/components/schemas/DeliveryMode"
          },
          "warehouseCode": {
            "type": "string"
          },
          "packagingInfo": {
            "$ref": "#/components/schemas/PackagingInfo"
          }
        },
        "description": "Representation of a Consignment"
      },
      "ConsignmentEntry": {
        "type": "object",
        "properties": {
          "orderEntry": {
            "$ref": "#/components/schemas/OrderEntry"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity value of Consignment entry",
            "format": "int64"
          },
          "shippedQuantity": {
            "type": "integer",
            "description": "Shipped quantity",
            "format": "int64"
          },
          "quantityDeclined": {
            "type": "integer",
            "format": "int64"
          },
          "quantityPending": {
            "type": "integer",
            "format": "int64"
          },
          "quantityShipped": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Representation of a Consignment Entry"
      },
      "Country": {
        "type": "object",
        "properties": {
          "isocode": {
            "type": "string",
            "description": "Country code in iso format"
          },
          "name": {
            "type": "string",
            "description": "Name of the country"
          }
        },
        "description": "Response body fields which will be returned while fetching the list of countries. The DTO is in XML or .json format"
      },
      "CountryList": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "description": "This is the list of Country fields that should be returned in the response body",
            "items": {
              "$ref": "#/components/schemas/Country"
            }
          }
        },
        "description": "List of countries"
      },
      "CreateComment": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text of the comment.",
            "example": "Text of the comment"
          }
        },
        "description": "Text of the comment"
      },
      "Currency": {
        "type": "object",
        "properties": {
          "isocode": {
            "type": "string",
            "description": "Code of the currency in iso format"
          },
          "name": {
            "type": "string",
            "description": "Name of the currency"
          },
          "active": {
            "type": "boolean",
            "description": "Boolean flag whether currency is active"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol of the currency"
          }
        },
        "description": "Representation of a Currency"
      },
      "CurrencyList": {
        "type": "object",
        "properties": {
          "currencies": {
            "type": "array",
            "description": "List of currencies",
            "items": {
              "$ref": "#/components/schemas/Currency"
            }
          }
        },
        "description": "Representation of a Currency List"
      },
      "CustomerCoupon": {
        "type": "object",
        "properties": {
          "couponId": {
            "type": "string",
            "description": "Coupon identifier"
          },
          "name": {
            "type": "string",
            "description": "Name of the coupon"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the coupon",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the coupon",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "status": {
            "type": "string",
            "description": "Status of the coupon",
            "example": "Effective"
          },
          "description": {
            "type": "string",
            "description": "Description of the coupon"
          },
          "notificationOn": {
            "type": "boolean",
            "description": "Indicates if notification is enabled or disabled"
          },
          "allProductsApplicable": {
            "type": "boolean",
            "description": "Indicates whether the coupon is applicable for all products"
          }
        },
        "description": "Customer coupon"
      },
      "CustomerCoupon2Customer": {
        "type": "object",
        "properties": {
          "coupon": {
            "$ref": "#/components/schemas/CustomerCoupon"
          },
          "customer": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "Customer coupon for customer"
      },
      "CustomerCouponNotification": {
        "type": "object",
        "properties": {
          "coupon": {
            "$ref": "#/components/schemas/CustomerCoupon"
          },
          "customer": {
            "$ref": "#/components/schemas/User"
          },
          "status": {
            "type": "string",
            "description": "Notification status",
            "example": "EFFECTIVESENT"
          }
        },
        "description": "Customer coupon notification"
      },
      "CustomerCouponSearchResult": {
        "type": "object",
        "properties": {
          "coupons": {
            "type": "array",
            "description": "List of coupon",
            "items": {
              "$ref": "#/components/schemas/CustomerCoupon"
            }
          },
          "sorts": {
            "type": "array",
            "description": "Sorting information",
            "items": {
              "$ref": "#/components/schemas/sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/pagination"
          }
        },
        "description": "Customer coupon search result"
      },
      "DayRange": {
        "required": [
          "minBoundary"
        ],
        "type": "object",
        "properties": {
          "minBoundary": {
            "type": "integer",
            "description": "Minimum day range.",
            "format": "int32",
            "example": 31
          },
          "maxBoundary": {
            "type": "integer",
            "description": "Maximum day range. The value null is used for infinite ranges. For example, a minBoundary of 91 and a maxBoundary of null represents a 91+ day range.",
            "format": "int32",
            "example": 60
          }
        },
        "description": "Maximum and minimum limits of the day range."
      },
      "DeliveryMode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the delivery mode"
          },
          "name": {
            "type": "string",
            "description": "Name of the delivery mode"
          },
          "description": {
            "type": "string",
            "description": "Description of the delivery mode"
          },
          "deliveryCost": {
            "$ref": "#/components/schemas/Price"
          }
        },
        "description": "Representation of a Delivery mode"
      },
      "DeliveryModeList": {
        "type": "object",
        "properties": {
          "deliveryModes": {
            "type": "array",
            "description": "List of delivery modes",
            "items": {
              "$ref": "#/components/schemas/DeliveryMode"
            }
          }
        },
        "description": "Representation of a Delivery mode list"
      },
      "DeliveryOrderEntryGroup": {
        "type": "object",
        "properties": {
          "totalPriceWithTax": {
            "$ref": "#/components/schemas/Price"
          },
          "entries": {
            "type": "array",
            "description": "List of order entries",
            "items": {
              "$ref": "#/components/schemas/OrderEntry"
            }
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of order entries in a group",
            "format": "int64"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "description": "Representation of a Delivery Order Entry Group"
      },
      "DeliveryTimeSlot": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "delivery timeslot code"
          },
          "name": {
            "type": "string",
            "description": "delivery timeslot name"
          }
        },
        "description": "data type of delivery timeslot"
      },
      "District": {
        "type": "object",
        "properties": {
          "isocode": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 standard, e.g.[countryIso]-[regionNumber]-[cityNumber]-[districtNumber]"
          },
          "name": {
            "type": "string",
            "description": "name of district",
            "example": "Dongcheng District"
          }
        },
        "description": "data object of district"
      },
      "DistrictList": {
        "type": "object",
        "properties": {
          "districts": {
            "type": "array",
            "description": "list of district",
            "items": {
              "$ref": "#/components/schemas/District"
            }
          }
        },
        "description": "list of district"
      },
      "DsCanonicalizationMethod": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "xml": {
              "name": "Algorithm",
              "attribute": true
            }
          },
          "getvalue": {
            "type": "string"
          }
        },
        "xml": {
          "name": "ds:CanonicalizationMethod"
        }
      },
      "DsDigestMethod": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "xml": {
              "name": "Algorithm",
              "attribute": true
            }
          },
          "getvalue": {
            "type": "string"
          }
        },
        "xml": {
          "name": "ds:DigestMethod"
        }
      },
      "DsKeyInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "xml": {
              "name": "Id",
              "attribute": true
            }
          },
          "getvalue": {
            "type": "string"
          }
        },
        "xml": {
          "name": "ds:KeyInfo"
        }
      },
      "DsObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "xml": {
              "name": "Id",
              "attribute": true
            }
          },
          "mimeType": {
            "type": "string",
            "xml": {
              "name": "MimeType",
              "attribute": true
            }
          },
          "encoding": {
            "type": "string",
            "xml": {
              "name": "Encoding",
              "attribute": true
            }
          },
          "getvalue": {
            "type": "string"
          }
        },
        "xml": {
          "name": "ds:Object"
        }
      },
      "DsReference": {
        "required": [
          "dsDigestMethod",
          "dsDigestValue"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "xml": {
              "name": "Id",
              "attribute": true
            }
          },
          "uri": {
            "type": "string",
            "xml": {
              "name": "URI",
              "attribute": true
            }
          },
          "type": {
            "type": "string",
            "xml": {
              "name": "Type",
              "attribute": true
            }
          },
          "dsTransforms": {
            "$ref": "#/components/schemas/DsTransforms"
          },
          "dsDigestMethod": {
            "$ref": "#/components/schemas/DsDigestMethod"
          },
          "dsDigestValue": {
            "type": "string",
            "xml": {
              "name": "ds:DigestValue"
            }
          }
        },
        "xml": {
          "name": "ds:Reference"
        }
      },
      "DsSignature": {
        "required": [
          "dsSignatureValue",
          "dsSignedInfo"
        ],
        "type": "object",
        "properties": {
          "xmlnsDs": {
            "type": "string",
            "xml": {
              "name": "xmlns:ds",
              "attribute": true
            }
          },
          "xmlnsXades": {
            "type": "string",
            "xml": {
              "name": "xmlns:xades",
              "attribute": true
            }
          },
          "id": {
            "type": "string",
            "xml": {
              "name": "Id",
              "attribute": true
            }
          },
          "dsSignedInfo": {
            "$ref": "#/components/schemas/DsSignedInfo"
          },
          "dsSignatureValue": {
            "$ref": "#/components/schemas/DsSignatureValue"
          },
          "dsKeyInfo": {
            "$ref": "#/components/schemas/DsKeyInfo"
          },
          "dsObject": {
            "type": "array",
            "xml": {
              "name": "ds:Object"
            },
            "items": {
              "$ref": "#/components/schemas/DsObject"
            }
          }
        },
        "xml": {
          "name": "ds:Signature"
        }
      },
      "DsSignatureMethod": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "xml": {
              "name": "Algorithm",
              "attribute": true
            }
          },
          "getvalue": {
            "type": "string"
          }
        },
        "xml": {
          "name": "ds:SignatureMethod"
        }
      },
      "DsSignatureValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "xml": {
              "name": "Id",
              "attribute": true
            }
          },
          "getvalue": {
            "type": "string"
          }
        },
        "xml": {
          "name": "ds:SignatureValue"
        }
      },
      "DsSignedInfo": {
        "required": [
          "dsCanonicalizationMethod",
          "dsReference",
          "dsSignatureMethod"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "xml": {
              "name": "Id",
              "attribute": true
            }
          },
          "dsCanonicalizationMethod": {
            "$ref": "#/components/schemas/DsCanonicalizationMethod"
          },
          "dsSignatureMethod": {
            "$ref": "#/components/schemas/DsSignatureMethod"
          },
          "dsReference": {
            "type": "array",
            "xml": {
              "name": "ds:Reference"
            },
            "items": {
              "$ref": "#/components/schemas/DsReference"
            }
          }
        },
        "xml": {
          "name": "ds:SignedInfo"
        }
      },
      "DsTransform": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "xml": {
              "name": "Algorithm",
              "attribute": true
            }
          },
          "getvalue": {
            "type": "string"
          }
        },
        "xml": {
          "name": "ds:Transform"
        }
      },
      "DsTransforms": {
        "required": [
          "dsTransform"
        ],
        "type": "object",
        "properties": {
          "dsTransform": {
            "type": "array",
            "xml": {
              "name": "ds:Transform"
            },
            "items": {
              "$ref": "#/components/schemas/DsTransform"
            }
          }
        },
        "xml": {
          "name": "ds:Transforms"
        }
      },
      "DueBalanceRange": {
        "type": "object",
        "properties": {
          "dayRange": {
            "$ref": "#/components/schemas/DayRange"
          },
          "amount": {
            "type": "string",
            "description": "Amount due in the specified range.",
            "example": "$300.00"
          }
        },
        "description": "Amount due in the specified day range."
      },
      "EntryGroup": {
        "type": "object",
        "properties": {
          "entries": {
            "type": "array",
            "description": "List of order entries",
            "items": {
              "$ref": "#/components/schemas/OrderEntry"
            }
          },
          "entryGroups": {
            "type": "array",
            "description": "List of child entry groups",
            "items": {
              "$ref": "#/components/schemas/EntryGroup"
            }
          },
          "entryGroupNumber": {
            "type": "integer",
            "description": "Identifier of the entry group",
            "format": "int32",
            "example": 1
          },
          "label": {
            "type": "string",
            "description": "Label for the entry group",
            "example": "Photo On The Go Package"
          },
          "erroneous": {
            "type": "boolean",
            "description": "Indicates if the entry group is in an error state",
            "example": true
          },
          "type": {
            "type": "string",
            "description": "Indicates type of the group, possible values are STANDALONE, CONFIGURABLEBUNDLE or any customer implemented type for any new provider",
            "example": "STANDALONE"
          }
        },
        "description": "Representation of an Entry Group"
      },
      "Facet": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the facet"
          },
          "priority": {
            "type": "integer",
            "description": "Priority value of the facet",
            "format": "int32"
          },
          "category": {
            "type": "boolean",
            "description": "Flag stating if facet is category facet"
          },
          "multiSelect": {
            "type": "boolean",
            "description": "Flag stating if facet is multiSelect"
          },
          "visible": {
            "type": "boolean",
            "description": "Flag stating if facet is visible"
          },
          "topValues": {
            "type": "array",
            "description": "List of top facet values",
            "items": {
              "$ref": "#/components/schemas/FacetValue"
            }
          },
          "values": {
            "type": "array",
            "description": "List of all facet values",
            "items": {
              "$ref": "#/components/schemas/FacetValue"
            }
          }
        },
        "description": "Representation of a Facet"
      },
      "FacetValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the facet value"
          },
          "count": {
            "type": "integer",
            "description": "Count of the facet value",
            "format": "int64"
          },
          "query": {
            "$ref": "#/components/schemas/SearchState"
          },
          "selected": {
            "type": "boolean",
            "description": "Flag stating if facet value is selected"
          }
        },
        "description": "Representation of a Facet Value"
      },
      "Feature": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the feature"
          },
          "name": {
            "type": "string",
            "description": "Name of the feature"
          },
          "description": {
            "type": "string",
            "description": "Description of the feature"
          },
          "type": {
            "type": "string",
            "description": "Type of the feature"
          },
          "range": {
            "type": "boolean",
            "description": "Range number of the feature"
          },
          "comparable": {
            "type": "boolean",
            "description": "Flag defining it feature is comparable"
          },
          "featureUnit": {
            "$ref": "#/components/schemas/FeatureUnit"
          },
          "featureValues": {
            "type": "array",
            "description": "List of feature values",
            "items": {
              "$ref": "#/components/schemas/FeatureValue"
            }
          }
        },
        "description": "Representation of a Feature"
      },
      "FeatureUnit": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol of the feature unit"
          },
          "name": {
            "type": "string",
            "description": "Name of the feature unit"
          },
          "unitType": {
            "type": "string",
            "description": "Type of the feature unit"
          }
        },
        "description": "Representation of a Feature Unit"
      },
      "FeatureValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value of the feature"
          }
        },
        "description": "Representation of a Feature Value"
      },
      "FutureStock": {
        "type": "object",
        "properties": {
          "stock": {
            "$ref": "#/components/schemas/Stock"
          },
          "date": {
            "type": "string",
            "description": "Date of future stock",
            "format": "date-time",
            "example": "2024-04-22T09:57:57Z"
          },
          "formattedDate": {
            "type": "string",
            "description": "Date of future stock expressed in text value",
            "example": "31/12/2056"
          }
        },
        "description": "Representation of a Future Stock"
      },
      "GeoPoint": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Geopoint latitude",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "description": "Geopoint longitude",
            "format": "double"
          }
        },
        "description": "Representation of a GeoPoint"
      },
      "Image": {
        "type": "object",
        "properties": {
          "imageType": {
            "type": "string",
            "description": "Type of the image, can be PRIMARY or GALLERY",
            "enum": [
              "PRIMARY",
              "GALLERY"
            ]
          },
          "format": {
            "type": "string",
            "description": "Format of the image, can be zoom, product, thumbnail, store, cartIcon, etc."
          },
          "url": {
            "type": "string",
            "description": "URL address of the image"
          },
          "altText": {
            "type": "string",
            "description": "Tooltip content which is visible while image mouse hovering"
          },
          "galleryIndex": {
            "type": "integer",
            "description": "Index of the image while displayed in gallery",
            "format": "int32"
          }
        },
        "description": "Representation of an Image"
      },
      "Language": {
        "type": "object",
        "properties": {
          "isocode": {
            "type": "string",
            "description": "iso code of the language"
          },
          "name": {
            "type": "string",
            "description": "name of the language"
          },
          "nativeName": {
            "type": "string",
            "description": "name the language in native form"
          },
          "active": {
            "type": "boolean",
            "description": "true/false indicator when the language is active"
          }
        },
        "description": "Representation of a Language"
      },
      "LanguageList": {
        "type": "object",
        "properties": {
          "languages": {
            "type": "array",
            "description": "This is the list of Language fields that should be returned in the response body",
            "items": {
              "$ref": "#/components/schemas/Language"
            }
          }
        },
        "description": "Lists all available languages (all languages used for a particular store). If the list of languages for a base store is empty, a list of all languages available in the system will be returned"
      },
      "ListAdaptedComponents": {
        "type": "object",
        "properties": {
          "component": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentAdaptedData"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/pagination"
          },
          "sorts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/sort"
            }
          }
        },
        "xml": {
          "name": "components"
        }
      },
      "ListAdaptedPages": {
        "type": "object",
        "properties": {
          "page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageAdaptedData"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/pagination"
          },
          "sorts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/sort"
            }
          }
        },
        "xml": {
          "name": "pages"
        }
      },
      "MemberList": {
        "type": "object",
        "properties": {
          "members": {
            "type": "array",
            "description": "List of member",
            "items": {
              "$ref": "#/components/schemas/Principal"
            }
          }
        },
        "description": "List of users to assign to customer group."
      },
      "OpeningSchedule": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the opening schedule"
          },
          "code": {
            "type": "string",
            "description": "Code of the opening schedule"
          },
          "weekDayOpeningList": {
            "type": "array",
            "description": "List of weekday opening days",
            "items": {
              "$ref": "#/components/schemas/WeekdayOpeningDay"
            }
          },
          "specialDayOpeningList": {
            "type": "array",
            "description": "List of special opening days",
            "items": {
              "$ref": "#/components/schemas/SpecialOpeningDay"
            }
          }
        },
        "description": "Representation of an Opening schedule"
      },
      "Order": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code number of order"
          },
          "net": {
            "type": "boolean",
            "description": "Flag stating iv value is net-value"
          },
          "totalPriceWithTax": {
            "$ref": "#/components/schemas/Price"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "totalTax": {
            "$ref": "#/components/schemas/Price"
          },
          "subTotal": {
            "$ref": "#/components/schemas/Price"
          },
          "deliveryCost": {
            "$ref": "#/components/schemas/Price"
          },
          "entries": {
            "type": "array",
            "description": "List of order entries",
            "items": {
              "$ref": "#/components/schemas/OrderEntry"
            }
          },
          "entryGroups": {
            "type": "array",
            "description": "List of entry groups",
            "items": {
              "$ref": "#/components/schemas/EntryGroup"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "deliveryMode": {
            "$ref": "#/components/schemas/DeliveryMode"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "paymentInfo": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "appliedOrderPromotions": {
            "type": "array",
            "description": "List of applied order promotions",
            "items": {
              "$ref": "#/components/schemas/PromotionResult"
            }
          },
          "appliedProductPromotions": {
            "type": "array",
            "description": "List of applied product promotions",
            "items": {
              "$ref": "#/components/schemas/PromotionResult"
            }
          },
          "productDiscounts": {
            "$ref": "#/components/schemas/Price"
          },
          "orderDiscounts": {
            "$ref": "#/components/schemas/Price"
          },
          "totalDiscounts": {
            "$ref": "#/components/schemas/Price"
          },
          "site": {
            "type": "string",
            "description": "Site"
          },
          "store": {
            "type": "string",
            "description": "Store"
          },
          "guid": {
            "type": "string",
            "description": "Guest user id identifier"
          },
          "calculated": {
            "type": "boolean",
            "description": "Flag showing if order is calculated"
          },
          "appliedVouchers": {
            "type": "array",
            "description": "List of applied vouchers",
            "items": {
              "$ref": "#/components/schemas/Voucher"
            }
          },
          "user": {
            "$ref": "#/components/schemas/Principal"
          },
          "pickupOrderGroups": {
            "type": "array",
            "description": "List of pickup order entry group",
            "items": {
              "$ref": "#/components/schemas/PickupOrderEntryGroup"
            }
          },
          "deliveryOrderGroups": {
            "type": "array",
            "description": "List of delivery order entries group",
            "items": {
              "$ref": "#/components/schemas/DeliveryOrderEntryGroup"
            }
          },
          "pickupItemsQuantity": {
            "type": "integer",
            "description": "Quantity of pickup items",
            "format": "int64"
          },
          "deliveryItemsQuantity": {
            "type": "integer",
            "description": "Quantity of delivery items",
            "format": "int64"
          },
          "deliveryTimeSlot": {
            "$ref": "#/components/schemas/DeliveryTimeSlot"
          },
          "chinesePaymentInfo": {
            "$ref": "#/components/schemas/ChinesePaymentInfo"
          },
          "paymentStatus": {
            "type": "string",
            "description": "Payment status",
            "example": "PAID"
          },
          "taxInvoice": {
            "$ref": "#/components/schemas/TaxInvoice"
          },
          "created": {
            "type": "string",
            "description": "Date of order creation",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "status": {
            "type": "string",
            "description": "Status of order"
          },
          "statusDisplay": {
            "type": "string",
            "description": "Status display"
          },
          "guestCustomer": {
            "type": "boolean",
            "description": "Flag showing if customer is Guest customer"
          },
          "consignments": {
            "type": "array",
            "description": "List of consignment",
            "items": {
              "$ref": "#/components/schemas/Consignment"
            }
          },
          "deliveryStatus": {
            "type": "string",
            "description": "Order delivery status"
          },
          "deliveryStatusDisplay": {
            "type": "string",
            "description": "Order delivery status display"
          },
          "unconsignedEntries": {
            "type": "array",
            "description": "List of unconsigned order entries",
            "items": {
              "$ref": "#/components/schemas/OrderEntry"
            }
          },
          "cancellable": {
            "type": "boolean",
            "description": "Boolean flag showing if order is cancellable",
            "example": true
          },
          "returnable": {
            "type": "boolean",
            "description": "Boolean flag showing if order is returnable",
            "example": true
          },
          "totalUnitCount": {
            "type": "integer",
            "format": "int32"
          },
          "purchaseOrderNumber": {
            "type": "string",
            "description": "Purchase order number"
          },
          "orgCustomer": {
            "$ref": "#/components/schemas/User"
          },
          "costCenter": {
            "$ref": "#/components/schemas/B2BCostCenter"
          },
          "permissionResults": {
            "type": "array",
            "description": "Results of permissions associated with the order",
            "items": {
              "$ref": "#/components/schemas/OrderApprovalPermissionResult"
            }
          },
          "orgUnit": {
            "$ref": "#/components/schemas/B2BUnit"
          },
          "paymentAddress": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "description": "Representation of an Order"
      },
      "OrderApproval": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code that identifies the approval.",
            "example": "00000005"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "approvalDecisionRequired": {
            "type": "boolean",
            "description": "Boolean flag which states whether an approval decision is required."
          },
          "customerOrderApprovalRecords": {
            "type": "array",
            "description": "Customer approval records related to this order approval.",
            "items": {
              "$ref": "#/components/schemas/OrderApprovalRecord"
            }
          },
          "merchantOrderApprovalRecords": {
            "type": "array",
            "description": "Merchant approval records related to this order approval.",
            "items": {
              "$ref": "#/components/schemas/OrderApprovalRecord"
            }
          },
          "trigger": {
            "$ref": "#/components/schemas/Trigger"
          }
        },
        "description": "Details of one specific order approval"
      },
      "OrderApprovalDecision": {
        "required": [
          "decision"
        ],
        "type": "object",
        "properties": {
          "decision": {
            "type": "string",
            "description": "Decision from the approver when approving/rejecting an order. Typical decisions are: APPROVE, REJECT",
            "example": "APPROVE"
          },
          "comment": {
            "type": "string",
            "description": "Any comments the approver (or the workflow system) adds when approving/rejecting an order.",
            "example": "Rejected because montly budget was exceeded"
          }
        },
        "description": "The order approval decision. The approval decision field is mandatory, and the approval comment field is mandatory if the decision is 'rejected'."
      },
      "OrderApprovalList": {
        "required": [
          "orderApprovals",
          "pagination",
          "sorts"
        ],
        "type": "object",
        "properties": {
          "orderApprovals": {
            "type": "array",
            "description": "List of Order Approvals",
            "items": {
              "$ref": "#/components/schemas/OrderApproval"
            }
          },
          "sorts": {
            "type": "array",
            "description": "List of sorts",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          }
        },
        "description": "Representation of a Order Approval List"
      },
      "OrderApprovalPermission": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Boolean flag of whether Order Approval Permission is active",
            "example": true
          },
          "orderApprovalPermissionType": {
            "$ref": "#/components/schemas/OrderApprovalPermissionType"
          },
          "code": {
            "type": "string",
            "description": "Code of the Order Approval Permission",
            "example": "Rustic_10K_USD_MONTH"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "periodRange": {
            "type": "string",
            "description": "Period range of the Order Approval Permission, used for type B2BOrderThresholdTimespanPermission",
            "example": "MONTH",
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "QUARTER",
              "YEAR"
            ]
          },
          "orgUnit": {
            "$ref": "#/components/schemas/B2BUnit"
          },
          "threshold": {
            "type": "number",
            "description": "Threshold value of the Order Approval Permission, used for type B2BOrderThresholdPermission and B2BOrderThresholdTimespanPermission",
            "format": "double",
            "example": 10000
          },
          "selected": {
            "type": "boolean",
            "description": "Boolean flag of whether the user is selected",
            "example": true
          }
        },
        "description": "Order Approval Permission object."
      },
      "OrderApprovalPermissionList": {
        "required": [
          "orderApprovalPermissions",
          "pagination",
          "sorts"
        ],
        "type": "object",
        "properties": {
          "orderApprovalPermissions": {
            "type": "array",
            "description": "List of Order Approval Permissions",
            "items": {
              "$ref": "#/components/schemas/OrderApprovalPermission"
            }
          },
          "sorts": {
            "type": "array",
            "description": "List of sorts",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          }
        },
        "description": "Representation of a Order Approval Permission List"
      },
      "OrderApprovalPermissionResult": {
        "type": "object",
        "properties": {
          "approverName": {
            "type": "string",
            "description": "Name of the approver responsible for this permission result."
          },
          "approverNotes": {
            "type": "string",
            "description": "Any comments the approver added to the approval item.",
            "example": "The order is rejected due to insufficient budget"
          },
          "permissionType": {
            "$ref": "#/components/schemas/OrderApprovalPermissionType"
          },
          "statusDisplay": {
            "type": "string",
            "description": "Status of the order approval.",
            "example": "Pending approval"
          }
        },
        "description": "Details of an order approval permission result related to an order"
      },
      "OrderApprovalPermissionType": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the Order Approval Permission Type",
            "example": "B2BOrderThresholdTimespanPermission"
          },
          "name": {
            "type": "string",
            "description": "Name of the Order Approval Permission Type",
            "example": "Allowed Order Threshold (per timespan)"
          }
        },
        "description": "Request body fields required and optional to operate on Order Approval Permission Type data. Typical permission types are: B2BBudgetExceededPermission, B2BOrderThresholdTimespanPermission and B2BOrderThresholdPermission"
      },
      "OrderApprovalPermissionTypeList": {
        "required": [
          "orderApprovalPermissionTypes"
        ],
        "type": "object",
        "properties": {
          "orderApprovalPermissionTypes": {
            "type": "array",
            "description": "List of Order Approval Permission Types",
            "items": {
              "$ref": "#/components/schemas/OrderApprovalPermissionType"
            }
          }
        },
        "description": "Representation of an Order Approval Permission Type list"
      },
      "OrderApprovalRecord": {
        "type": "object",
        "properties": {
          "permissionTypes": {
            "type": "array",
            "description": "List of permission types related to this approval record.",
            "items": {
              "$ref": "#/components/schemas/OrderApprovalPermissionType"
            }
          },
          "approver": {
            "$ref": "#/components/schemas/Principal"
          },
          "statusDisplay": {
            "type": "string",
            "description": "Status of the order approval.",
            "example": "Pending approval"
          },
          "comments": {
            "type": "string",
            "description": "Any comments the approver (or the workflow system) added to the approval item.",
            "example": "Submitted for approval"
          }
        },
        "description": "Details of one order approval record"
      },
      "OrderEntry": {
        "type": "object",
        "properties": {
          "entryNumber": {
            "type": "integer",
            "description": "Entry number of the order entry",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity number of items in order entry",
            "format": "int64"
          },
          "basePrice": {
            "$ref": "#/components/schemas/Price"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "updateable": {
            "type": "boolean",
            "description": "Flag defining if order entry item is updateable"
          },
          "deliveryMode": {
            "$ref": "#/components/schemas/DeliveryMode"
          },
          "configurationInfos": {
            "type": "array",
            "description": "Configuration info of order entry",
            "items": {
              "$ref": "#/components/schemas/ConfigurationInfo"
            }
          },
          "statusSummaryList": {
            "type": "array",
            "description": "List of aggregated status information per entry, relevant if the entry is configurable and its configuration contains one or many issues in different severities. Note that configurators typically raise such issues only in case the parent document is changeable. In this case the issues (depending on their severity) need to be fixed before a checkout can be done. This means this segment can be present for a cart entry, for order entries it will always be empty",
            "items": {
              "$ref": "#/components/schemas/StatusSummary"
            }
          },
          "deliveryPointOfService": {
            "$ref": "#/components/schemas/PointOfService"
          },
          "cancelledItemsPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "cancellableQuantity": {
            "type": "integer",
            "description": "Quantity number of cancellable items in order entry",
            "format": "int64",
            "example": 5
          },
          "returnedItemsPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "returnableQuantity": {
            "type": "integer",
            "description": "Quantity number of returnable items in order entry",
            "format": "int64",
            "example": 5
          },
          "comments": {
            "type": "array",
            "description": "List of order entry comments.",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "url": {
            "type": "string"
          },
          "quantityAllocated": {
            "type": "integer",
            "format": "int64"
          },
          "quantityUnallocated": {
            "type": "integer",
            "format": "int64"
          },
          "quantityCancelled": {
            "type": "integer",
            "format": "int64"
          },
          "quantityPending": {
            "type": "integer",
            "format": "int64"
          },
          "quantityShipped": {
            "type": "integer",
            "format": "int64"
          },
          "quantityReturned": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Request body parameter that contains details such as the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name)\n\nThe DTO is in XML or .json format."
      },
      "OrderEntryList": {
        "type": "object",
        "properties": {
          "orderEntries": {
            "type": "array",
            "description": "List of order entries",
            "items": {
              "$ref": "#/components/schemas/OrderEntry"
            }
          }
        },
        "description": "List of entries containing the amount to add and the product code or the entryNumber."
      },
      "OrderFormEntry": {
        "type": "object",
        "properties": {
          "sku": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OrderFormList": {
        "type": "object",
        "properties": {
          "orderForms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderForm"
            }
          }
        }
      },
      "OrderForm": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "user": {
            "$ref": "#/components/schemas/Principal"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderFormEntry"
            }
          }
        }
      },
      "OrderHistory": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of Order History"
          },
          "status": {
            "type": "string",
            "description": "Status of Order History"
          },
          "statusDisplay": {
            "type": "string",
            "description": "Status display"
          },
          "placed": {
            "type": "string",
            "description": "Date of placing order",
            "format": "date-time",
            "example": "2024-04-22T09:58:01Z"
          },
          "guid": {
            "type": "string",
            "description": "Guest user identifier"
          },
          "total": {
            "$ref": "#/components/schemas/Price"
          },
          "costCenter": {
            "$ref": "#/components/schemas/B2BCostCenter"
          },
          "orgUnit": {
            "$ref": "#/components/schemas/B2BUnit"
          },
          "purchaseOrderNumber": {
            "type": "string",
            "description": "Purchase order number"
          },
          "orgCustomer": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "Representation of an Order History"
      },
      "OrderHistoryList": {
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "description": "List of order history items",
            "items": {
              "$ref": "#/components/schemas/OrderHistory"
            }
          },
          "sorts": {
            "type": "array",
            "description": "List of sorts",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          },
          "facets": {
            "type": "array",
            "description": "List of facets",
            "items": {
              "$ref": "#/components/schemas/Facet"
            }
          }
        },
        "description": "Representation of an Order History List"
      },
      "OrderStatusUpdateElement": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of update element of order status"
          },
          "status": {
            "type": "string",
            "description": "Status of update element"
          },
          "baseSiteId": {
            "type": "string",
            "description": "BaseSite identifier"
          }
        },
        "description": "Representation of an Order Status Update Element"
      },
      "OrderStatusUpdateElementList": {
        "type": "object",
        "properties": {
          "orderStatusUpdateElements": {
            "type": "array",
            "description": "List of order status update elements",
            "items": {
              "$ref": "#/components/schemas/OrderStatusUpdateElement"
            }
          }
        },
        "description": "Representation of an Order Status Update Element List"
      },
      "OrgCustomerCreation": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of the user",
            "example": "akiro.nakamura@rustic-hw.com"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the user",
            "example": "Akiro"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user",
            "example": "Nakamura"
          },
          "titleCode": {
            "type": "string",
            "description": "Code of the user's title",
            "example": "mr"
          },
          "orgUnit": {
            "$ref": "#/components/schemas/B2BUnit"
          },
          "roles": {
            "type": "array",
            "description": "List of organizational approvers",
            "items": {
              "type": "string",
              "description": "List of organizational approvers"
            }
          }
        },
        "description": "Data object that contains information necessary for user creation"
      },
      "OrgCustomerModification": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of the user",
            "example": "akiro.nakamura@rustic-hw.com"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the user",
            "example": "Akiro"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user",
            "example": "Nakamura"
          },
          "titleCode": {
            "type": "string",
            "description": "Code of the user's title",
            "example": "mr"
          },
          "orgUnit": {
            "$ref": "#/components/schemas/B2BUnit"
          },
          "roles": {
            "type": "array",
            "description": "List of organizational approvers",
            "items": {
              "type": "string",
              "description": "List of organizational approvers"
            }
          },
          "active": {
            "type": "boolean",
            "description": "Boolean flag of whether the user is active/enabled or not",
            "example": true
          },
          "password": {
            "type": "string",
            "description": "Password of the user"
          }
        },
        "description": "Data object which contains information necessary for user modification"
      },
      "OrgDocument": {
        "required": [
          "amount",
          "currency",
          "formattedAmount",
          "id",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the organizational document.",
            "example": "DOC-01234"
          },
          "orgDocumentType": {
            "$ref": "#/components/schemas/OrgDocumentType"
          },
          "status": {
            "type": "string",
            "description": "Organizational document status. Possible values are: open, closed.",
            "example": "open"
          },
          "createdAtDate": {
            "type": "string",
            "description": "Creation date for the organizational document.",
            "example": "2022-04-14"
          },
          "dueAtDate": {
            "type": "string",
            "description": "Due date for the organizational document.",
            "example": "2022-06-18"
          },
          "formattedAmount": {
            "type": "string",
            "description": "Original amount due for the organizational document, formatted as per the selected currency.",
            "example": "$1230.45"
          },
          "amount": {
            "type": "number",
            "description": "Original amount due for the organizational document.",
            "example": 1230.45
          },
          "formattedOpenAmount": {
            "type": "string",
            "description": "Open amount due for the organizational document, formatted as per the selected currency.",
            "example": "$430.45"
          },
          "openAmount": {
            "type": "number",
            "description": "Open amount due for the organizational document.",
            "example": 430.45
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "attachments": {
            "type": "array",
            "description": "Attachments associated to the organizational document.",
            "items": {
              "$ref": "#/components/schemas/OrgDocumentAttachment"
            }
          }
        },
        "description": "Representation of an organizational document."
      },
      "OrgDocumentAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Organizational document attachment identifier.",
            "example": "INPG-00100001"
          }
        },
        "description": "Attachments associated to the organizational document."
      },
      "OrgDocumentList": {
        "required": [
          "orgDocuments",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "orgDocuments": {
            "type": "array",
            "description": "List of organizational documents.",
            "items": {
              "$ref": "#/components/schemas/OrgDocument"
            }
          },
          "sorts": {
            "type": "array",
            "description": "List of sort codes",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "orgDocumentTypes": {
            "type": "array",
            "description": "List of organizational document types.",
            "items": {
              "$ref": "#/components/schemas/OrgDocumentType"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          }
        },
        "description": "Representation of a list of organizational documents for the organizational unit."
      },
      "OrgDocumentType": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Organizational document type code.",
            "example": "PURCHASE_ORDER"
          },
          "name": {
            "type": "string",
            "description": "Organizational document type name.",
            "example": "Purchase Order"
          }
        },
        "description": "Representation of an organizational document type."
      },
      "OrgUnitReference": {
        "required": [
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Identifier of the organizational unit.",
            "example": "Pronto"
          },
          "name": {
            "type": "string",
            "description": "Name of the organizational unit.",
            "example": "Pronto"
          }
        },
        "description": "Reference to organizational unit."
      },
      "OrgUnitUserGroup": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Unique user identifier"
          },
          "name": {
            "type": "string",
            "description": "Name of the user"
          },
          "members": {
            "type": "array",
            "description": "List of members",
            "items": {
              "$ref": "#/components/schemas/Principal"
            }
          },
          "subGroups": {
            "type": "array",
            "description": "List of subgroups",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            }
          },
          "membersCount": {
            "type": "integer",
            "description": "Number of members",
            "format": "int32"
          },
          "orgUnit": {
            "$ref": "#/components/schemas/B2BUnit"
          },
          "permissions": {
            "type": "array",
            "description": "Order approval permission of the user group",
            "items": {
              "$ref": "#/components/schemas/OrderApprovalPermission"
            }
          },
          "roles": {
            "type": "array",
            "description": "List of Roles",
            "items": {
              "type": "string",
              "description": "List of Roles"
            }
          },
          "selected": {
            "type": "boolean",
            "description": "Boolean flag of whether a user group is selected or not",
            "example": true
          }
        },
        "description": "Organizational unit user group object."
      },
      "OrgUnitUserGroupList": {
        "required": [
          "orgUnitUserGroups",
          "pagination",
          "sorts"
        ],
        "type": "object",
        "properties": {
          "orgUnitUserGroups": {
            "type": "array",
            "description": "List of organizational unit user groups",
            "items": {
              "$ref": "#/components/schemas/OrgUnitUserGroup"
            }
          },
          "sorts": {
            "type": "array",
            "description": "List of sorts",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          }
        },
        "description": "Representation of an user list used in organizational units"
      },
      "OrgUnitUserList": {
        "required": [
          "pagination",
          "sorts",
          "users"
        ],
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "description": "List of users",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "sorts": {
            "type": "array",
            "description": "List of sorts",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          }
        },
        "description": "Representation of an user list used in organizational units"
      },
      "OrgUserRegistrationData": {
        "required": [
          "email",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "titleCode": {
            "type": "string",
            "description": "Code of the user's title",
            "example": "mr"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the user",
            "example": "akiro"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user",
            "example": "nakamura"
          },
          "email": {
            "type": "string",
            "description": "Email of the user",
            "example": "akiro.nakamura@rustic-hw.com"
          },
          "message": {
            "type": "string",
            "description": "Contains info to approver, usually composed by UI with a template",
            "example": "Department:Ground support; Position:Chief safe guard; Report to: steve jackson; comments: Please create new account for me"
          }
        },
        "description": "Data object that contains information necessary to apply user registration"
      },
      "PackagingInfo": {
        "type": "object",
        "properties": {
          "width": {
            "type": "string"
          },
          "height": {
            "type": "string"
          },
          "length": {
            "type": "string"
          },
          "grossWeight": {
            "type": "string"
          },
          "insuredValue": {
            "type": "string"
          },
          "dimensionUnit": {
            "type": "string"
          },
          "weightUnit": {
            "type": "string"
          }
        },
        "description": "Representation of a Packaging Information"
      },
      "PaymentDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of payment detail"
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of account holder"
          },
          "cardType": {
            "$ref": "#/components/schemas/CardType"
          },
          "cardNumber": {
            "type": "string",
            "description": "Payment card number"
          },
          "startMonth": {
            "type": "string",
            "description": "Start month from which payment is valid"
          },
          "startYear": {
            "type": "string",
            "description": "Start year from which payment is valid"
          },
          "expiryMonth": {
            "type": "string",
            "description": "Month of expiration of payment"
          },
          "expiryYear": {
            "type": "string",
            "description": "Year of expiration of payment"
          },
          "issueNumber": {
            "type": "string",
            "description": "Issue number"
          },
          "subscriptionId": {
            "type": "string",
            "description": "Identifier of subscription"
          },
          "saved": {
            "type": "boolean",
            "description": "Flag to mark if payment is saved one"
          },
          "defaultPayment": {
            "type": "boolean",
            "description": "Flag to mark if payment the default one"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "description": "Payment details object"
      },
      "PaymentDetailsList": {
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "description": "List of payment details",
            "items": {
              "$ref": "#/components/schemas/PaymentDetails"
            }
          }
        },
        "description": "Representation of a Payment details list"
      },
      "PaymentMode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Payment mode code"
          },
          "name": {
            "type": "string",
            "description": "Payment mode name"
          },
          "description": {
            "type": "string",
            "description": "Payment mode description"
          },
          "pspLogoUrl": {
            "type": "string",
            "description": "Logo url of payment mode",
            "example": "/medias/wechatpay.png?context=CONTEXT"
          }
        },
        "description": "Representation of a Payment Mode"
      },
      "PaymentModeList": {
        "type": "object",
        "properties": {
          "paymentModes": {
            "type": "array",
            "description": "List of payment modes",
            "items": {
              "$ref": "#/components/schemas/PaymentMode"
            }
          }
        },
        "description": "Representation of a Payment Mode List"
      },
      "PaymentRequest": {
        "type": "object",
        "properties": {
          "postUrl": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "mappingLabels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "PickupOrderEntryGroup": {
        "type": "object",
        "properties": {
          "totalPriceWithTax": {
            "$ref": "#/components/schemas/Price"
          },
          "entries": {
            "type": "array",
            "description": "List of order entries",
            "items": {
              "$ref": "#/components/schemas/OrderEntry"
            }
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of order entries in a group",
            "format": "int64"
          },
          "deliveryPointOfService": {
            "$ref": "#/components/schemas/PointOfService"
          },
          "distance": {
            "type": "number",
            "description": "Distance calculated to pickup place",
            "format": "double"
          }
        },
        "description": "Representation of a Pickup Order Entry Group"
      },
      "PointOfService": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the point of service",
            "example": "Misato"
          },
          "displayName": {
            "type": "string",
            "description": "Display name of the point of service"
          },
          "url": {
            "type": "string",
            "description": "Url address of the point of service"
          },
          "description": {
            "type": "string",
            "description": "Description of the point of service"
          },
          "openingHours": {
            "$ref": "#/components/schemas/OpeningSchedule"
          },
          "storeContent": {
            "type": "string",
            "description": "Store content of given point of service"
          },
          "features": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "List of features for a given point of service"
            },
            "description": "List of features for a given point of service"
          },
          "geoPoint": {
            "$ref": "#/components/schemas/GeoPoint"
          },
          "formattedDistance": {
            "type": "string",
            "description": "Distance to the point of service as text value"
          },
          "distanceKm": {
            "type": "number",
            "description": "Distance to the point of service as number value",
            "format": "double"
          },
          "mapIcon": {
            "$ref": "#/components/schemas/Image"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "storeImages": {
            "type": "array",
            "description": "Collection of images associated with a point of service",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "pickUpInStoreInstructions": {
            "type": "string",
            "description": "Instructions used for picking up an order in store"
          },
          "warehouseCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Representation of a Point of service"
      },
      "PointOfServiceList": {
        "type": "object",
        "properties": {
          "pointOfServices": {
            "type": "array",
            "description": "List of points of service",
            "items": {
              "$ref": "#/components/schemas/PointOfService"
            }
          }
        },
        "description": "Representation of a Point of Service List"
      },
      "PointOfServiceStock": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the point of service",
            "example": "Misato"
          },
          "displayName": {
            "type": "string",
            "description": "Display name of the point of service"
          },
          "url": {
            "type": "string",
            "description": "Url address of the point of service"
          },
          "description": {
            "type": "string",
            "description": "Description of the point of service"
          },
          "openingHours": {
            "$ref": "#/components/schemas/OpeningSchedule"
          },
          "storeContent": {
            "type": "string",
            "description": "Store content of given point of service"
          },
          "features": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "List of features for a given point of service"
            },
            "description": "List of features for a given point of service"
          },
          "geoPoint": {
            "$ref": "#/components/schemas/GeoPoint"
          },
          "formattedDistance": {
            "type": "string",
            "description": "Distance to the point of service as text value"
          },
          "distanceKm": {
            "type": "number",
            "description": "Distance to the point of service as number value",
            "format": "double"
          },
          "mapIcon": {
            "$ref": "#/components/schemas/Image"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "storeImages": {
            "type": "array",
            "description": "Collection of images associated with a point of service",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "pickUpInStoreInstructions": {
            "type": "string",
            "description": "Instructions used for picking up an order in store"
          },
          "warehouseCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stockInfo": {
            "$ref": "#/components/schemas/Stock"
          }
        },
        "description": "Representation of a Point Of Service Stock"
      },
      "Price": {
        "type": "object",
        "properties": {
          "currencyIso": {
            "type": "string",
            "description": "Currency iso format"
          },
          "value": {
            "type": "number",
            "description": "Value of price in BigDecimal format"
          },
          "priceType": {
            "type": "string",
            "description": "Type of the price",
            "enum": [
              "BUY",
              "FROM"
            ]
          },
          "formattedValue": {
            "type": "string",
            "description": "Value of price formatted"
          },
          "minQuantity": {
            "type": "integer",
            "description": "Minimum quantity of the price value",
            "format": "int64"
          },
          "maxQuantity": {
            "type": "integer",
            "description": "Maximum quantity of the price value",
            "format": "int64"
          }
        },
        "description": "Representation of a Price"
      },
      "PriceRange": {
        "type": "object",
        "properties": {
          "maxPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "minPrice": {
            "$ref": "#/components/schemas/Price"
          }
        },
        "description": "Representation of a Price Range"
      },
      "Principal": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Unique user identifier"
          },
          "name": {
            "type": "string",
            "description": "Name of the user"
          }
        },
        "description": "Representation of a Principal webservice DTO used for defining User data types"
      },
      "Product": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the product"
          },
          "name": {
            "type": "string",
            "description": "Name of the product"
          },
          "url": {
            "type": "string",
            "description": "Url address of the product"
          },
          "description": {
            "type": "string",
            "description": "Description of the product"
          },
          "purchasable": {
            "type": "boolean",
            "description": "Flag defining if product is purchasable"
          },
          "stock": {
            "$ref": "#/components/schemas/Stock"
          },
          "futureStocks": {
            "type": "array",
            "description": "List of future stocks",
            "items": {
              "$ref": "#/components/schemas/FutureStock"
            }
          },
          "availableForPickup": {
            "type": "boolean",
            "description": "Flag defining if product is available for pickup"
          },
          "averageRating": {
            "type": "number",
            "description": "Rating number of average value",
            "format": "double"
          },
          "numberOfReviews": {
            "type": "integer",
            "description": "Number of reviews associated with the product",
            "format": "int32"
          },
          "summary": {
            "type": "string",
            "description": "Product summary"
          },
          "manufacturer": {
            "type": "string",
            "description": "Data of product manufacturer"
          },
          "variantType": {
            "type": "string",
            "description": "Variant type of the product"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "baseProduct": {
            "type": "string",
            "description": "Information about base product"
          },
          "images": {
            "type": "array",
            "description": "List of images linked to product",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "categories": {
            "type": "array",
            "description": "List of categories product belongs to",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "reviews": {
            "type": "array",
            "description": "List of reviews associated with the product",
            "items": {
              "$ref": "#/components/schemas/Review"
            }
          },
          "classifications": {
            "type": "array",
            "description": "List of classifications related to the product",
            "items": {
              "$ref": "#/components/schemas/Classification"
            }
          },
          "potentialPromotions": {
            "type": "array",
            "description": "List of potential promotions related to the product",
            "items": {
              "$ref": "#/components/schemas/Promotion"
            }
          },
          "variantOptions": {
            "type": "array",
            "description": "List of variant options related to the product",
            "items": {
              "$ref": "#/components/schemas/VariantOption"
            }
          },
          "baseOptions": {
            "type": "array",
            "description": "List of base options related to the product",
            "items": {
              "$ref": "#/components/schemas/BaseOption"
            }
          },
          "volumePricesFlag": {
            "type": "boolean",
            "description": "Flag stating if volume price should be displayed"
          },
          "volumePrices": {
            "type": "array",
            "description": "List of volume prices",
            "items": {
              "$ref": "#/components/schemas/Price"
            }
          },
          "productReferences": {
            "type": "array",
            "description": "List of product references",
            "items": {
              "$ref": "#/components/schemas/ProductReference"
            }
          },
          "variantMatrix": {
            "type": "array",
            "description": "List of variant matrixes associated with the product",
            "items": {
              "$ref": "#/components/schemas/VariantMatrixElement"
            }
          },
          "priceRange": {
            "$ref": "#/components/schemas/PriceRange"
          },
          "multidimensional": {
            "type": "boolean",
            "description": "Flag stating if product is multidimensional"
          },
          "configuratorType": {
            "type": "string",
            "description": "Configurator type related to the product"
          },
          "configurable": {
            "type": "boolean",
            "description": "Flag stating if product is configurable"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "Tags associated with the product",
            "items": {
              "type": "string",
              "description": "Tags associated with the product"
            }
          },
          "firstVariantCode": {
            "type": "string"
          },
          "firstVariantImage": {
            "type": "string"
          },
          "bundleTemplates": {
            "type": "array",
            "description": "Set of bundle templates that are identified as starter components and can initiate a bundle in the cart",
            "items": {
              "$ref": "#/components/schemas/BundleTemplate"
            }
          },
          "timedAccessPromotion": {
            "$ref": "#/components/schemas/Promotion"
          }
        },
        "description": "Representation of a Product"
      },
      "ProductExpressUpdateElement": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of product express update element"
          },
          "catalogId": {
            "type": "string",
            "description": "Catalog identifier"
          },
          "catalogVersion": {
            "type": "string",
            "description": "Catalog version"
          }
        },
        "description": "Representation of a Product Express Update Element"
      },
      "ProductExpressUpdateElementList": {
        "type": "object",
        "properties": {
          "productExpressUpdateElements": {
            "type": "array",
            "description": "List of product express update element",
            "items": {
              "$ref": "#/components/schemas/ProductExpressUpdateElement"
            }
          }
        },
        "description": "Representation of a Product Express Update Element List"
      },
      "ProductFutureStocks": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Product identifier",
            "example": "3318057"
          },
          "futureStocks": {
            "type": "array",
            "description": "List of future stocks",
            "items": {
              "$ref": "#/components/schemas/FutureStock"
            }
          }
        },
        "description": "Representation of a Product Future Stocks"
      },
      "ProductFutureStocksList": {
        "type": "object",
        "properties": {
          "productFutureStocks": {
            "type": "array",
            "description": "List of product future stocks",
            "items": {
              "$ref": "#/components/schemas/ProductFutureStocks"
            }
          }
        },
        "description": "Representation of a Product Future Stocks List"
      },
      "ProductList": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "description": "List of products",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "catalog": {
            "type": "string",
            "description": "Catalog of product list"
          },
          "version": {
            "type": "string",
            "description": "Version of product list"
          },
          "totalProductCount": {
            "type": "integer",
            "description": "Total product count",
            "format": "int32"
          },
          "totalPageCount": {
            "type": "integer",
            "description": "Total page count",
            "format": "int32"
          },
          "currentPage": {
            "type": "integer",
            "description": "Number of current page",
            "format": "int32"
          }
        },
        "description": "Representation of a Product List"
      },
      "ProductReference": {
        "type": "object",
        "properties": {
          "referenceType": {
            "type": "string",
            "description": "Reference type"
          },
          "description": {
            "type": "string",
            "description": "Reference description"
          },
          "quantity": {
            "type": "integer",
            "description": "Reference quantity",
            "format": "int32"
          },
          "target": {
            "$ref": "#/components/schemas/Product"
          },
          "preselected": {
            "type": "boolean",
            "description": "Flag stating if product reference is preselected"
          }
        },
        "description": "Representation of a Product Reference"
      },
      "ProductReferenceList": {
        "type": "object",
        "properties": {
          "references": {
            "type": "array",
            "description": "List of product references",
            "items": {
              "$ref": "#/components/schemas/ProductReference"
            }
          }
        },
        "description": "Representation of a Product Reference List"
      },
      "ProductSearchPage": {
        "type": "object",
        "properties": {
          "freeTextSearch": {
            "type": "string",
            "description": "Free text search"
          },
          "categoryCode": {
            "type": "string",
            "description": "Code of category"
          },
          "keywordRedirectUrl": {
            "type": "string",
            "description": "Redirect url address keyword"
          },
          "spellingSuggestion": {
            "$ref": "#/components/schemas/SpellingSuggestion"
          },
          "products": {
            "type": "array",
            "description": "List of products",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "sorts": {
            "type": "array",
            "description": "List of sorts",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          },
          "currentQuery": {
            "$ref": "#/components/schemas/SearchState"
          },
          "breadcrumbs": {
            "type": "array",
            "description": "List of breadcrumbs info",
            "items": {
              "$ref": "#/components/schemas/Breadcrumb"
            }
          },
          "facets": {
            "type": "array",
            "description": "List of facets",
            "items": {
              "$ref": "#/components/schemas/Facet"
            }
          }
        },
        "description": "Representation of a Product Search Page"
      },
      "Promotion": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the promotion"
          },
          "title": {
            "type": "string",
            "description": "Promotion title"
          },
          "promotionType": {
            "type": "string",
            "description": "Type of the promotion"
          },
          "startDate": {
            "type": "string",
            "description": "The initial date of the promotion",
            "format": "date-time",
            "example": "2024-04-22T09:57:57Z"
          },
          "endDate": {
            "type": "string",
            "description": "Last date of validity of the promotion",
            "format": "date-time",
            "example": "2024-04-22T09:57:57Z"
          },
          "description": {
            "type": "string",
            "description": "Description of the promotion"
          },
          "couldFireMessages": {
            "type": "array",
            "description": "Message about promotion which is displayed when planning potential promotion. This field has higher priority over promotion description",
            "items": {
              "type": "string",
              "description": "Message about promotion which is displayed when planning potential promotion. This field has higher priority over promotion description"
            }
          },
          "firedMessages": {
            "type": "array",
            "description": "Message fired while the promotion is active. This is info how much you will get when applying the promotion",
            "items": {
              "type": "string",
              "description": "Message fired while the promotion is active. This is info how much you will get when applying the promotion"
            }
          },
          "productBanner": {
            "$ref": "#/components/schemas/Image"
          },
          "enabled": {
            "type": "boolean",
            "description": "Boolean flag if promotion is enabled"
          },
          "priority": {
            "type": "integer",
            "description": "Priority index as numeric value of the promotion. Higher number means higher priority",
            "format": "int32"
          },
          "promotionGroup": {
            "type": "string",
            "description": "Group of the promotion"
          },
          "restrictions": {
            "type": "array",
            "description": "List of promotion restrictions",
            "items": {
              "$ref": "#/components/schemas/PromotionRestriction"
            }
          }
        },
        "description": "Representation of a Promotion"
      },
      "PromotionList": {
        "type": "object",
        "properties": {
          "promotions": {
            "type": "array",
            "description": "List of promotions",
            "items": {
              "$ref": "#/components/schemas/Promotion"
            }
          }
        },
        "description": "Representation of a Promotion list"
      },
      "PromotionOrderEntryConsumed": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Order entry code"
          },
          "adjustedUnitPrice": {
            "type": "number",
            "description": "Adjusted unit price for promotion order entry",
            "format": "double"
          },
          "orderEntryNumber": {
            "type": "integer",
            "description": "Order entry number",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of promotion order entry",
            "format": "int64"
          }
        },
        "description": "Representation of a Promotion order entry consumed"
      },
      "PromotionRestriction": {
        "type": "object",
        "properties": {
          "restrictionType": {
            "type": "string",
            "description": "Type of the promotion restriction"
          },
          "description": {
            "type": "string",
            "description": "Description of the promotion restriction"
          }
        },
        "description": "Representation of a Promotion Restriction"
      },
      "PromotionResult": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of promotion result"
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion"
          },
          "consumedEntries": {
            "type": "array",
            "description": "List of promotion order entries consumed",
            "items": {
              "$ref": "#/components/schemas/PromotionOrderEntryConsumed"
            }
          }
        },
        "description": "Representation of a Promotion result"
      },
      "PromotionResultList": {
        "type": "object",
        "properties": {
          "promotions": {
            "type": "array",
            "description": "List of promotion results",
            "items": {
              "$ref": "#/components/schemas/PromotionResult"
            }
          }
        },
        "description": "Representation of a Promotion result list"
      },
      "PunchOutSessionInfo": {
        "required": [
          "cartId",
          "customerId",
          "punchOutLevel",
          "punchOutOperation",
          "token"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "CustomerID of the user",
            "example": "punchout.customer@punchoutorg.com"
          },
          "cartId": {
            "type": "string",
            "description": "ID of the cart",
            "example": "00002159"
          },
          "punchOutLevel": {
            "type": "string",
            "description": "The punchoutLevel is an attribute that allows suppliers to specify how procurement applications should present the PunchOut item to users.",
            "enum": [
              "STORE",
              "PRODUCT",
              "AISLE",
              "SHELF"
            ]
          },
          "punchOutOperation": {
            "type": "string",
            "description": "Supported PunchOut operations",
            "enum": [
              "CREATE",
              "EDIT",
              "INSPECT"
            ]
          },
          "selectedItem": {
            "type": "string",
            "description": "The selected item specify PunchOut for an entire store or any subset of product offerings",
            "example": "300000029"
          },
          "token": {
            "$ref": "#/components/schemas/PunchOutToken"
          }
        },
        "description": "PunchOutSessionInfo contains the user ID, cart ID, token, PunchOut level, PunchOut operation and selected item."
      },
      "PunchOutToken": {
        "required": [
          "accessToken",
          "tokenType"
        ],
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "The access token issued by the authorization server",
            "example": "1uEhL4lj58n1zX9R0aICC7-ng2c"
          },
          "tokenType": {
            "type": "string",
            "description": "The access token type provides the client with the information required to successfully utilize the access token to make a protected resource request (along with type-specific attributes). The client MUST NOT use an access token if it does not understand or does not trust the token type.",
            "example": "bearer"
          }
        },
        "description": "Holds the token info for the user"
      },
      "Quote": {
        "required": [
          "code",
          "creationTime",
          "expirationTime",
          "name",
          "state",
          "threshold",
          "totalItems",
          "updatedTime",
          "version"
        ],
        "type": "object",
        "properties": {
          "expirationTime": {
            "type": "string",
            "description": "Expiration time of the quote.",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "code": {
            "type": "string",
            "description": "Code of the quote.",
            "example": "0003005"
          },
          "name": {
            "type": "string",
            "description": "Name of the quote.",
            "example": "Quote 0003005"
          },
          "state": {
            "type": "string",
            "description": "Current state of the quote. Possible state values - DRAFT, SUBMITTED, OFFER, CANCELLED, EXPIRED, etc.. The list of the states can be extended.",
            "example": "CANCELLED"
          },
          "description": {
            "type": "string",
            "description": "Description of the quote.",
            "example": "Quote description"
          },
          "version": {
            "type": "integer",
            "description": "Current version of the quote.",
            "format": "int32",
            "example": 1
          },
          "threshold": {
            "type": "number",
            "description": "Minimum subtotal value for the quote in the currency of the store.",
            "format": "double",
            "example": 25000
          },
          "cartId": {
            "type": "string",
            "description": "Id of the cart, which is linked to the quote.",
            "example": "000350"
          },
          "creationTime": {
            "type": "string",
            "description": "Date of quote creation.",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "updatedTime": {
            "type": "string",
            "description": "Date of the last quote update.",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "allowedActions": {
            "type": "array",
            "description": "Actions, which are allowed to perform with the quote.",
            "items": {
              "type": "string",
              "description": "Actions, which are allowed to perform with the quote."
            }
          },
          "previousEstimatedTotal": {
            "$ref": "#/components/schemas/Price"
          },
          "comments": {
            "type": "array",
            "description": "List of quote comments.",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "totalPriceWithTax": {
            "$ref": "#/components/schemas/Price"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "entries": {
            "type": "array",
            "description": "Entries of the cart.",
            "items": {
              "$ref": "#/components/schemas/OrderEntry"
            }
          },
          "totalItems": {
            "type": "integer",
            "description": "Total number of the items in the quote.",
            "format": "int32",
            "example": 2
          },
          "quoteDiscounts": {
            "$ref": "#/components/schemas/Price"
          },
          "orderDiscounts": {
            "$ref": "#/components/schemas/Price"
          },
          "subTotalWithDiscounts": {
            "$ref": "#/components/schemas/Price"
          },
          "productDiscounts": {
            "$ref": "#/components/schemas/Price"
          }
        },
        "description": "Representation of the quote object."
      },
      "QuoteAction": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "User's actions with the quote. Typical actions are: CANCEL, SUBMIT, ACCEPT, APPROVE, REJECT.",
            "example": "SUBMIT"
          }
        },
        "description": "The action with the quote. The quote action field is mandatory."
      },
      "QuoteDiscount": {
        "type": "object",
        "properties": {
          "discountType": {
            "type": "string",
            "description": "Type of the discount - PERCENT for discount by percentage, ABSOLUTE for discount by amount, TARGET for discount by adjustment of the total value",
            "example": "PERCENT"
          },
          "discountRate": {
            "type": "number",
            "description": "Value of the discount",
            "format": "double",
            "example": 10
          }
        },
        "description": "Discount applied to the quote - discountType for type of the discount, discountRate for value of the discount "
      },
      "QuoteList": {
        "type": "object",
        "properties": {
          "quotes": {
            "type": "array",
            "description": "List of quotes.",
            "items": {
              "$ref": "#/components/schemas/Quote"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          }
        },
        "description": "Representation of a Quote result list."
      },
      "QuoteMetadata": {
        "required": [
          "expirationTime",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the quote.",
            "example": "Quote Name"
          },
          "description": {
            "type": "string",
            "description": "Description of the quote.",
            "example": "Quote Description"
          },
          "expirationTime": {
            "type": "string",
            "description": "Expiration time of the quote.",
            "format": "date-time",
            "example": "2024-04-22T09:57:57Z"
          }
        },
        "description": "Updated name, description or expiry date of the quote"
      },
      "QuoteStarter": {
        "type": "object",
        "properties": {
          "cartId": {
            "type": "string",
            "description": "CartId of the cart from which the quote will be created.",
            "example": "0003050"
          },
          "quoteCode": {
            "type": "string",
            "description": "Code of the quote for the requote action.",
            "example": "0003060"
          }
        },
        "description": "Object representing ways of creating new quote - by cartId for creating a new quote from the cart, by quoteCode for the requote action "
      },
      "Region": {
        "type": "object",
        "properties": {
          "isocode": {
            "type": "string",
            "description": "Country and Region code in iso format"
          },
          "isocodeShort": {
            "type": "string",
            "description": "Region code in short iso form"
          },
          "countryIso": {
            "type": "string",
            "description": "Country code in iso format"
          },
          "name": {
            "type": "string",
            "description": "Name of the region"
          }
        },
        "description": "Response body fields which will be returned while fetching the list of country's regions."
      },
      "RegionList": {
        "type": "object",
        "properties": {
          "regions": {
            "type": "array",
            "description": "This is the list of Region fields that should be returned in the response body",
            "items": {
              "$ref": "#/components/schemas/Region"
            }
          }
        },
        "description": "List of Regions"
      },
      "ReplenishmentOrder": {
        "required": [
          "replenishmentOrderCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code number of order"
          },
          "net": {
            "type": "boolean",
            "description": "Flag stating iv value is net-value"
          },
          "totalPriceWithTax": {
            "$ref": "#/components/schemas/Price"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "totalTax": {
            "$ref": "#/components/schemas/Price"
          },
          "subTotal": {
            "$ref": "#/components/schemas/Price"
          },
          "deliveryCost": {
            "$ref": "#/components/schemas/Price"
          },
          "entries": {
            "type": "array",
            "description": "List of order entries",
            "items": {
              "$ref": "#/components/schemas/OrderEntry"
            }
          },
          "entryGroups": {
            "type": "array",
            "description": "List of entry groups",
            "items": {
              "$ref": "#/components/schemas/EntryGroup"
            }
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "deliveryMode": {
            "$ref": "#/components/schemas/DeliveryMode"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "paymentInfo": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "appliedOrderPromotions": {
            "type": "array",
            "description": "List of applied order promotions",
            "items": {
              "$ref": "#/components/schemas/PromotionResult"
            }
          },
          "appliedProductPromotions": {
            "type": "array",
            "description": "List of applied product promotions",
            "items": {
              "$ref": "#/components/schemas/PromotionResult"
            }
          },
          "productDiscounts": {
            "$ref": "#/components/schemas/Price"
          },
          "orderDiscounts": {
            "$ref": "#/components/schemas/Price"
          },
          "totalDiscounts": {
            "$ref": "#/components/schemas/Price"
          },
          "site": {
            "type": "string",
            "description": "Site"
          },
          "store": {
            "type": "string",
            "description": "Store"
          },
          "guid": {
            "type": "string",
            "description": "Guest user id identifier"
          },
          "calculated": {
            "type": "boolean",
            "description": "Flag showing if order is calculated"
          },
          "appliedVouchers": {
            "type": "array",
            "description": "List of applied vouchers",
            "items": {
              "$ref": "#/components/schemas/Voucher"
            }
          },
          "user": {
            "$ref": "#/components/schemas/Principal"
          },
          "pickupOrderGroups": {
            "type": "array",
            "description": "List of pickup order entry group",
            "items": {
              "$ref": "#/components/schemas/PickupOrderEntryGroup"
            }
          },
          "deliveryOrderGroups": {
            "type": "array",
            "description": "List of delivery order entries group",
            "items": {
              "$ref": "#/components/schemas/DeliveryOrderEntryGroup"
            }
          },
          "pickupItemsQuantity": {
            "type": "integer",
            "description": "Quantity of pickup items",
            "format": "int64"
          },
          "deliveryItemsQuantity": {
            "type": "integer",
            "description": "Quantity of delivery items",
            "format": "int64"
          },
          "deliveryTimeSlot": {
            "$ref": "#/components/schemas/DeliveryTimeSlot"
          },
          "chinesePaymentInfo": {
            "$ref": "#/components/schemas/ChinesePaymentInfo"
          },
          "paymentStatus": {
            "type": "string",
            "description": "Payment status",
            "example": "PAID"
          },
          "taxInvoice": {
            "$ref": "#/components/schemas/TaxInvoice"
          },
          "totalUnitCount": {
            "type": "integer",
            "description": "Total unit count",
            "format": "int32"
          },
          "potentialOrderPromotions": {
            "type": "array",
            "description": "List of potential order promotions for cart",
            "items": {
              "$ref": "#/components/schemas/PromotionResult"
            }
          },
          "potentialProductPromotions": {
            "type": "array",
            "description": "List of potential product promotions for cart",
            "items": {
              "$ref": "#/components/schemas/PromotionResult"
            }
          },
          "name": {
            "type": "string",
            "description": "Name of the cart"
          },
          "description": {
            "type": "string",
            "description": "Description of the cart"
          },
          "expirationTime": {
            "type": "string",
            "description": "Date of cart expiration time",
            "format": "date-time",
            "example": "2024-04-22T09:58:00Z"
          },
          "saveTime": {
            "type": "string",
            "description": "Date of saving cart",
            "format": "date-time",
            "example": "2024-04-22T09:58:00Z"
          },
          "savedBy": {
            "$ref": "#/components/schemas/Principal"
          },
          "costCenter": {
            "$ref": "#/components/schemas/B2BCostCenter"
          },
          "paymentType": {
            "$ref": "#/components/schemas/B2BPaymentTypeData"
          },
          "purchaseOrderNumber": {
            "type": "string"
          },
          "active": {
            "type": "boolean",
            "description": "Is the Replenishment Order active",
            "example": false
          },
          "trigger": {
            "$ref": "#/components/schemas/Trigger"
          },
          "firstDate": {
            "type": "string",
            "description": "First date of the replenishment order",
            "format": "date-time",
            "example": "2024-04-22T09:58:00Z"
          },
          "replenishmentOrderCode": {
            "type": "string",
            "description": "Unique code for the replenishment order",
            "example": "502BJ"
          }
        },
        "description": "Request body fields required and optional to operate on Replenishment Order data."
      },
      "ReplenishmentOrderList": {
        "type": "object",
        "properties": {
          "replenishmentOrders": {
            "type": "array",
            "description": "List of Replenishment Orders",
            "items": {
              "$ref": "#/components/schemas/ReplenishmentOrder"
            }
          },
          "sorts": {
            "type": "array",
            "description": "List of sorts",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          }
        },
        "description": "Representation of a Replenishment Order List"
      },
      "RequisitionFormData": {
        "required": [
          "browseFormPostUrl",
          "orderAsCXML"
        ],
        "type": "object",
        "properties": {
          "browseFormPostUrl": {
            "type": "string",
            "description": "The url used to submit order into procurement system",
            "example": "https://s1.ariba.com/Buyer/punchout?client=HTML.D6040B280216D0CAD6AF0F349AB37943.Node2app823snv&responseid=k&locale=en_US"
          },
          "orderAsCXML": {
            "type": "string",
            "description": "Order info in base64 encoded cXML format, to submit this to procurement system, you must name this field with name cxml-base64 or cxml-urlencoded.",
            "example": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48IURPQ1RZUEUgY1hNTCBTWVNURU0gImh0dHA6Ly94bWwuY1hNTC5vcmcvc2NoZW1hcy9jWE1MLzEuMi4wNTEvY1hNTC5kdGQiPjxjWE1MIHBheWxvYWRJRD0iMTY1NzE4MDA2NjgxOC4xNDc3QEZZRDRNTjdIMFEiIHRpbWVzdGFtcD0iMjAyMi0wNy0wN1QxNTo0Nzo0NiswODowMCIgeG1sOmxhbmc9ImVuLVVTIj48SGVhZGVyPjxGcm9tPjxDcmVkZW50aWFsIGRvbWFpbj0iYnV5ZXJzeXN0ZW1pZCI+PElkZW50aXR5PnAycF9waXR0PC9JZGVudGl0eT48L0NyZWRlbnRpYWw+PENyZWRlbnRpYWwgZG9tYWluPSJpbnRlcm5hbHN1cHBsaWVyaWQiPjxJZGVudGl0eT5wMnBfcGl0dDwvSWRlbnRpdHk+PC9DcmVkZW50aWFsPjxDcmVkZW50aWFsIGRvbWFpbj0iZHVucyI+PElkZW50aXR5PjI0MjQyNDI0dC10PC9JZGVudGl0eT48L0NyZWRlbnRpYWw+PENyZWRlbnRpYWwgZG9tYWluPSJtYXhpbW8iPjxJZGVudGl0eT4zMDc2OTIwPC9JZGVudGl0eT48L0NyZWRlbnRpYWw+PENyZWRlbnRpYWwgZG9tYWluPSJuZXR3b3JraWQiPjxJZGVudGl0eT5hbjAxNjY1NjMyMDU0LXQ8L0lkZW50aXR5PjwvQ3JlZGVudGlhbD48Q3JlZGVudGlhbCBkb21haW49InRyYW5zYWN0aW9ubmV0d29ya2lkIj48SWRlbnRpdHk+YW4wMTY2NTYzMjA1NC10PC9JZGVudGl0eT48L0NyZWRlbnRpYWw+PC9Gcm9tPjxUbz48Q3JlZGVudGlhbCBkb21haW49IkRVTlMiPjxJZGVudGl0eT4xMjM0NTY3ODk8L0lkZW50aXR5PjwvQ3JlZGVudGlhbD48L1RvPjxTZW5kZXI+PENyZWRlbnRpYWwgZG9tYWluPSJBcmliYU5ldHdvcmtVc2VySWQiPjxJZGVudGl0eT5zeXNhZG1pbkBhcmliYS5jb208L0lkZW50aXR5PjwvQ3JlZGVudGlhbD48VXNlckFnZW50PkJ1eWVyIDE0czI8L1VzZXJBZ2VudD48L1NlbmRlcj48L0hlYWRlcj48TWVzc2FnZT48UHVuY2hPdXRPcmRlck1lc3NhZ2U+PEJ1eWVyQ29va2llPkx3VDZuZkZRbk92ZWpFS25EWnlkS3REbkczZnE1ZmVzMC4yNDUwODQyMDU0NDIxMzg4MjMyPC9CdXllckNvb2tpZT48UHVuY2hPdXRPcmRlck1lc3NhZ2VIZWFkZXIgb3BlcmF0aW9uQWxsb3dlZD0iZWRpdCI+PFRvdGFsPjxNb25leSBjdXJyZW5jeT0iVVNEIj40OC4wPC9Nb25leT48L1RvdGFsPjwvUHVuY2hPdXRPcmRlck1lc3NhZ2VIZWFkZXI+PEl0ZW1JbiBxdWFudGl0eT0iMSI+PEl0ZW1JRD48U3VwcGxpZXJQYXJ0SUQ+Mzc1NTIxOTwvU3VwcGxpZXJQYXJ0SUQ+PC9JdGVtSUQ+PEl0ZW1EZXRhaWw+PFVuaXRQcmljZT48TW9uZXkgY3VycmVuY3k9IlVTRCI+NDguMDwvTW9uZXk+PC9Vbml0UHJpY2U+PERlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiI+Jmx0O2ImZ3Q7Q29tcGFjdCBhbmQgcG93ZXJmdWwgZm9yIGFsbCBzY3Jld2RyaXZpbmcgd29yayDigJMgd2l0aCBkcmlsbCBzZXR0aW5nJmx0Oy9iJmd0OyZsdDtici8mZ3Q7Jmx0O2JyLyZndDsgICAgKiBQb3dlcmZ1bCA5LjYgViBtb3RvciB3aXRoIHBsYW5ldGFyeSBnZWFycy4mbHQ7YnIvJmd0OyAgICAqIFRvcnF1ZSBwcmUtc2VsZWN0aW9uIHdpdGggNSB0b3JxdWUgc2V0dGluZ3MgcGx1cyBhIGRyaWxsIHNldHRpbmcg4oCTIG9wdGltdW0gcG93ZXIgZm9yIGV2ZXJ5IGFwcGxpY2F0aW9uLiZsdDtici8mZ3Q7ICAgICogVHdpbi1zbGVldmUga2V5bGVzcyBjaHVjayDigJMgZWFzeSwgdG9vbC1mcmVlIGJpdCBjaGFuZ2VzLiZsdDtici8mZ3Q7ICAgICogQm9zY2ggRWxlY3Ryb25pYyBzcGVlZCBjb250cm9sOiAiYWNjZWxlcmF0ZSIgZnJvbSAwIOKAkyBtYXguIHVzaW5nIHRoZSB0cmlnZ2VyIHN3aXRjaC4mbHQ7YnIvJmd0OyAgICAqIFNvZnRncmlwIGZvciBhIGJldHRlciBhbmQgbW9yZSBjb21mb3J0YWJsZSBob2xkLiZsdDtici8mZ3Q7ICAgICogUnVuLW91dCBicmFrZSBhbmQgc3dpdGNoLW9uIGxvY2suJmx0O2JyLyZndDsgICAgKiBRdWljay1jaGFuZ2UgYmF0dGVyeSBwYWNrLiZsdDtici8mZ3Q7ICAgICogQml0IHN0b3JhZ2UgY29tcGFydG1lbnQgb24gdGhlIGhvdXNpbmcuPC9EZXNjcmlwdGlvbj48VW5pdE9mTWVhc3VyZT5DNjI8L1VuaXRPZk1lYXN1cmU+PENsYXNzaWZpY2F0aW9uIGRvbWFpbj0iVU5TUFNDIj4yMzI5MTUwMDwvQ2xhc3NpZmljYXRpb24+PC9JdGVtRGV0YWlsPjwvSXRlbUluPjwvUHVuY2hPdXRPcmRlck1lc3NhZ2U+PC9NZXNzYWdlPjwvY1hNTD4="
          }
        },
        "description": "Representation transaction info of an order, containing the target url to submit cXML order message and base64 encode order info."
      },
      "ResetPassword": {
        "required": [
          "newPassword",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "token value which will be generated as unique string that will be sent with email to allow user for completing reset-password operation"
          },
          "newPassword": {
            "type": "string",
            "description": "new password string which is required to complete process of resetting password"
          }
        },
        "description": "Request body parameter that contains details such as token and new password"
      },
      "ReturnRequest": {
        "type": "object",
        "properties": {
          "cancellable": {
            "type": "boolean",
            "description": "Boolean flag for whether the return request is cancellable",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "Return request code",
            "example": "00000001"
          },
          "creationTime": {
            "type": "string",
            "description": "Date of the return request creation",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "deliveryCost": {
            "$ref": "#/components/schemas/Price"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "refundDeliveryCost": {
            "type": "boolean",
            "description": "Boolean flag for whether there is a delivery cost for refund",
            "example": false
          },
          "returnEntries": {
            "type": "array",
            "description": "Entries of the return request which contains information about the returned product",
            "items": {
              "$ref": "#/components/schemas/ReturnRequestEntry"
            }
          },
          "returnLabelDownloadUrl": {
            "type": "string",
            "description": "URL of the return label"
          },
          "rma": {
            "type": "string",
            "description": "Return merchandise authorization number",
            "example": "00000001"
          },
          "status": {
            "type": "string",
            "description": "Status of return request"
          },
          "subTotal": {
            "$ref": "#/components/schemas/Price"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/Price"
          }
        },
        "description": "Representation of a return request for an order"
      },
      "ReturnRequestEntry": {
        "type": "object",
        "properties": {
          "orderEntry": {
            "$ref": "#/components/schemas/OrderEntry"
          },
          "expectedQuantity": {
            "type": "integer",
            "description": "Quantity which is expected to be returned for this return request entry",
            "format": "int64",
            "example": 5
          },
          "refundAmount": {
            "$ref": "#/components/schemas/Price"
          }
        },
        "description": "Representation of a return request entry which contains information about the returned product"
      },
      "ReturnRequestEntryInput": {
        "required": [
          "orderEntryNumber",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "orderEntryNumber": {
            "type": "integer",
            "description": "Order entry number of the returned product",
            "format": "int32",
            "example": 1
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the product which belongs to the order entry and is requested to be returned",
            "format": "int64",
            "example": 5
          }
        },
        "description": "Representation of a return request entry input for an order"
      },
      "ReturnRequestEntryInputList": {
        "required": [
          "orderCode",
          "returnRequestEntryInputs"
        ],
        "type": "object",
        "properties": {
          "orderCode": {
            "type": "string",
            "description": "Code of the order which return request is related to",
            "example": "00000001"
          },
          "returnRequestEntryInputs": {
            "type": "array",
            "description": "Return request entry inputs which contain information about the order entries which are requested to be returned",
            "items": {
              "$ref": "#/components/schemas/ReturnRequestEntryInput"
            }
          }
        },
        "description": "Return request input list for the current order."
      },
      "ReturnRequestList": {
        "type": "object",
        "properties": {
          "returnRequests": {
            "type": "array",
            "description": "List of order return requests",
            "items": {
              "$ref": "#/components/schemas/ReturnRequest"
            }
          },
          "sorts": {
            "type": "array",
            "description": "List of sorts",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          }
        },
        "description": "Representation of an Order Return Request List"
      },
      "ReturnRequestModification": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the return request",
            "enum": [
              "CANCELLING"
            ]
          }
        },
        "description": "Return request modification object."
      },
      "Review": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of review"
          },
          "headline": {
            "type": "string",
            "description": "Review headline"
          },
          "comment": {
            "type": "string",
            "description": "Review comment"
          },
          "rating": {
            "type": "number",
            "description": "Review rating value",
            "format": "double"
          },
          "date": {
            "type": "string",
            "description": "Date of the review",
            "format": "date-time",
            "example": "2024-04-22T09:57:57Z"
          },
          "alias": {
            "type": "string",
            "description": "Alias name for the review"
          },
          "principal": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "Object contains review details like : rating, alias, headline, comment"
      },
      "ReviewList": {
        "type": "object",
        "properties": {
          "reviews": {
            "type": "array",
            "description": "List of reviews",
            "items": {
              "$ref": "#/components/schemas/Review"
            }
          }
        },
        "description": "Representation of a Review List"
      },
      "SaveCartResult": {
        "type": "object",
        "properties": {
          "savedCartData": {
            "$ref": "#/components/schemas/Cart"
          }
        },
        "description": "Representation of a Save Cart Result"
      },
      "ScheduleReplenishmentForm": {
        "type": "object",
        "properties": {
          "replenishmentStartDate": {
            "type": "string",
            "description": "First day for replenishment order",
            "format": "date-time",
            "example": "2024-04-22T09:57:59Z"
          },
          "numberOfDays": {
            "type": "string",
            "description": "How frequent replenishment should be activated expressed in days. Mandatory with 'recurrencePeriod=DAILY'.",
            "example": "14"
          },
          "numberOfWeeks": {
            "type": "string",
            "description": "How frequent replenishment should be activated expressed in weeks. Mandatory with 'recurrencePeriod=WEEKLY'.",
            "example": "1"
          },
          "nthDayOfMonth": {
            "type": "string",
            "description": "On which date of month replenishment should be activated. Mandatory with 'recurrencePeriod=MONTHLY'.",
            "example": "1"
          },
          "recurrencePeriod": {
            "type": "string",
            "description": "Replenishment recurrence period. Available values are DAILY, WEEKLY and MONTHLY. DAILY requires 'numberOfDays'. WEEKLY requires 'daysOfWeek' AND 'numberOfWeeks'. MONTHLY requires 'nthDayOfMonth'.",
            "example": "WEEKLY"
          },
          "daysOfWeek": {
            "type": "array",
            "description": "List of days of week on which replenishment should occur. Mandatory with 'recurrencePeriod=WEEKLY'.",
            "items": {
              "type": "string",
              "description": "List of days of week on which replenishment should occur. Mandatory with 'recurrencePeriod=WEEKLY'.",
              "enum": [
                "SUNDAY",
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY"
              ]
            }
          }
        },
        "description": "Schedule replenishment form object."
      },
      "SearchQuery": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value of search query"
          }
        },
        "description": "Representation of a Search Query"
      },
      "SearchState": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Url address of search state"
          },
          "query": {
            "$ref": "#/components/schemas/SearchQuery"
          }
        },
        "description": "Representation of a Search State"
      },
      "Sort": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of Sort"
          },
          "name": {
            "type": "string",
            "description": "Name of Sort"
          },
          "selected": {
            "type": "boolean",
            "description": "Flag stating when Sort is selected"
          }
        },
        "description": "Representation a Sort option"
      },
      "SpecialOpeningDay": {
        "type": "object",
        "properties": {
          "openingTime": {
            "$ref": "#/components/schemas/Time"
          },
          "closingTime": {
            "$ref": "#/components/schemas/Time"
          },
          "date": {
            "type": "string",
            "description": "Date of special opening day",
            "format": "date-time",
            "example": "2024-04-22T09:57:57Z"
          },
          "formattedDate": {
            "type": "string",
            "description": "Text representation of the date of special opening day"
          },
          "closed": {
            "type": "boolean",
            "description": "Flag stating if special opening day is closed"
          },
          "name": {
            "type": "string",
            "description": "Name of the special opening day event"
          },
          "comment": {
            "type": "string",
            "description": "Comment field"
          }
        },
        "description": "Representation of a special opening day"
      },
      "SpellingSuggestion": {
        "type": "object",
        "properties": {
          "suggestion": {
            "type": "string",
            "description": "Spelling suggestion"
          },
          "query": {
            "type": "string",
            "description": "Query for spelling suggestion"
          }
        },
        "description": "Representation of a Spell Checker Suggestion"
      },
      "StatusSummary": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status or severity indicator, can be one of ERROR, WARNING, INFO or SUCCESS",
            "example": "ERROR"
          },
          "numberOfIssues": {
            "type": "integer",
            "description": "Number of issues per status",
            "format": "int32",
            "example": 3
          }
        },
        "description": "Representation of a status summary, an aggregated view on issues for a specific status or severity. These issues are attached to configurations of products or order entries"
      },
      "Stock": {
        "type": "object",
        "properties": {
          "stockLevelStatus": {
            "type": "string",
            "description": "Status of stock level",
            "example": "inStock"
          },
          "stockLevel": {
            "type": "integer",
            "description": "Stock level expressed as number",
            "format": "int64",
            "example": 25
          },
          "isValueRounded": {
            "type": "boolean",
            "description": "Indicate whether Stock level value is rounded",
            "example": false
          }
        },
        "description": "Representation of a Stock"
      },
      "StoreCount": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of store count"
          },
          "name": {
            "type": "string",
            "description": "Name of store count"
          },
          "isoCode": {
            "type": "string",
            "description": "Iso code of store"
          },
          "count": {
            "type": "integer",
            "description": "Count",
            "format": "int32"
          },
          "storeCountDataList": {
            "type": "array",
            "description": "List of store counts",
            "items": {
              "$ref": "#/components/schemas/StoreCount"
            }
          }
        },
        "description": "Representation of a Store Count"
      },
      "StoreCountList": {
        "type": "object",
        "properties": {
          "countriesAndRegionsStoreCount": {
            "type": "array",
            "description": "List of store counts",
            "items": {
              "$ref": "#/components/schemas/StoreCount"
            }
          }
        },
        "description": "Representation of a Store Count List"
      },
      "StoreFinderSearchPage": {
        "type": "object",
        "properties": {
          "stores": {
            "type": "array",
            "description": "List of stores",
            "items": {
              "$ref": "#/components/schemas/PointOfService"
            }
          },
          "sorts": {
            "type": "array",
            "description": "List of sortings",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          },
          "locationText": {
            "type": "string",
            "description": "Location text"
          },
          "sourceLatitude": {
            "type": "number",
            "description": "Source latitude",
            "format": "double"
          },
          "sourceLongitude": {
            "type": "number",
            "description": "Source longitude",
            "format": "double"
          },
          "boundNorthLatitude": {
            "type": "number",
            "description": "Bound north latitude",
            "format": "double"
          },
          "boundEastLongitude": {
            "type": "number",
            "description": "Bound east longitude",
            "format": "double"
          },
          "boundSouthLatitude": {
            "type": "number",
            "description": "Bound south latitude",
            "format": "double"
          },
          "boundWestLongitude": {
            "type": "number",
            "description": "Bound west longitude",
            "format": "double"
          }
        },
        "description": "Representation of a Store finder search page"
      },
      "StoreFinderStockSearchPage": {
        "type": "object",
        "properties": {
          "stores": {
            "type": "array",
            "description": "List of stores",
            "items": {
              "$ref": "#/components/schemas/PointOfServiceStock"
            }
          },
          "sorts": {
            "type": "array",
            "description": "List of sorts",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          },
          "locationText": {
            "type": "string",
            "description": "Location text"
          },
          "sourceLatitude": {
            "type": "number",
            "description": "Source latitude",
            "format": "double"
          },
          "sourceLongitude": {
            "type": "number",
            "description": "Source longitude",
            "format": "double"
          },
          "boundNorthLatitude": {
            "type": "number",
            "description": "Bound to north latitude",
            "format": "double"
          },
          "boundEastLongitude": {
            "type": "number",
            "description": "Bound to east longitude",
            "format": "double"
          },
          "boundSouthLatitude": {
            "type": "number",
            "description": "Bound to south latitude",
            "format": "double"
          },
          "boundWestLongitude": {
            "type": "number",
            "description": "Bound to west longitude",
            "format": "double"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          }
        },
        "description": "Representation of a Store Finder Stock Search Page"
      },
      "Suggestion": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Suggestion value"
          }
        },
        "description": "Representation of a Suggestion"
      },
      "SuggestionList": {
        "type": "object",
        "properties": {
          "suggestions": {
            "type": "array",
            "description": "List of suggestions",
            "items": {
              "$ref": "#/components/schemas/Suggestion"
            }
          }
        },
        "description": "Representation of a Suggestion List"
      },
      "TaxInvoice": {
        "type": "object",
        "properties": {
          "recipientType": {
            "type": "string",
            "description": "recipient type",
            "example": "INDIVIDUAL"
          },
          "recipient": {
            "type": "string",
            "description": "name of recipient"
          },
          "taxpayerID": {
            "type": "string",
            "description": "taxpayer identification number"
          }
        },
        "description": "data type of tax invoice"
      },
      "Ticket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Ticket identifier.",
            "example": "00000001"
          },
          "customerId": {
            "type": "string",
            "description": "Customer identifier.",
            "example": "1000001"
          },
          "subject": {
            "type": "string",
            "description": "Subject of ticket.",
            "example": "My drill is broken."
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of ticket creation.",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time of last modification.",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "availableStatusTransitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketStatus"
            }
          },
          "associatedTo": {
            "$ref": "#/components/schemas/TicketAssociatedObject"
          },
          "status": {
            "$ref": "#/components/schemas/TicketStatus"
          },
          "ticketEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketEvent"
            }
          },
          "ticketCategory": {
            "$ref": "#/components/schemas/TicketCategory"
          }
        },
        "description": "Ticket object."
      },
      "TicketAssociatedObject": {
        "required": [
          "code",
          "type"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Associated object code.",
            "example": "00001000"
          },
          "type": {
            "type": "string",
            "description": "Type of associated object: Cart or Order.",
            "example": "Cart"
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time of last modification.",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          }
        },
        "description": "Object that can be associated with a ticket. The object can be a cart or an order."
      },
      "TicketAssociatedObjectList": {
        "type": "object",
        "properties": {
          "ticketAssociatedObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketAssociatedObject"
            }
          }
        },
        "description": "List of ticket associated objects."
      },
      "TicketCategory": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Localized ticket category name.",
            "example": "Enquiry"
          },
          "id": {
            "type": "string",
            "description": "Ticket category identifier.",
            "example": "ENQUIRY"
          }
        },
        "description": "Ticket category details."
      },
      "TicketCategoryList": {
        "type": "object",
        "properties": {
          "ticketCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketCategory"
            }
          }
        },
        "description": "List of ticket categories."
      },
      "TicketEvent": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Event code is specific to each event. It is used to identify an event.",
            "example": "00000A15"
          },
          "author": {
            "type": "string",
            "description": "Name of user who created this ticket event.",
            "example": "Mark Rivers"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of event creation.",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "message": {
            "type": "string",
            "description": "Detailed description of the question.",
            "example": "The drill was damaged when I received it. Could you please send me a replacement?"
          },
          "addedByAgent": {
            "type": "boolean",
            "description": "Whether an agent added this event.",
            "example": false
          },
          "ticketEventAttachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketEventAttachment"
            }
          },
          "toStatus": {
            "$ref": "#/components/schemas/TicketStatus"
          }
        },
        "description": "Basic information about the ticket event."
      },
      "TicketEventAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Attachment identifier.",
            "example": "001"
          },
          "filename": {
            "type": "string",
            "description": "The name and the extension of the attached file.",
            "example": "my_file.jpg"
          }
        },
        "description": "Object containing a set of fields for ticket attachment."
      },
      "TicketList": {
        "type": "object",
        "properties": {
          "tickets": {
            "type": "array",
            "description": "List of tickets.",
            "items": {
              "$ref": "#/components/schemas/Ticket"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/deprecatedPagination"
          },
          "sorts": {
            "type": "array",
            "description": "Ticket list sorting details.",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          }
        },
        "description": "List of ticket results."
      },
      "TicketStarter": {
        "required": [
          "message",
          "subject",
          "ticketCategory"
        ],
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject of ticket.",
            "example": "My drill is broken."
          },
          "message": {
            "type": "string",
            "description": "Detailed description of the question.",
            "example": "The drill was damaged when I received it. Could you please send me a replacement?"
          },
          "ticketCategory": {
            "$ref": "#/components/schemas/TicketCategory"
          },
          "associatedTo": {
            "$ref": "#/components/schemas/TicketAssociatedObject"
          }
        },
        "description": "Basic information of the ticket."
      },
      "TicketStatus": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Localized ticket status name.",
            "example": "Closed"
          },
          "id": {
            "type": "string",
            "description": "Ticket status identifier.",
            "example": "CLOSED"
          }
        },
        "description": "Ticket status details."
      },
      "Time": {
        "type": "object",
        "properties": {
          "hour": {
            "type": "string",
            "description": "Hour part of the time data",
            "format": "byte"
          },
          "minute": {
            "type": "string",
            "description": "Minute part of the time data",
            "format": "byte"
          },
          "formattedHour": {
            "type": "string",
            "description": "Formatted hour"
          }
        },
        "description": "Representation of a Time"
      },
      "Title": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Title code"
          },
          "name": {
            "type": "string",
            "description": "Title name"
          }
        },
        "description": "Representation of a Title"
      },
      "TitleList": {
        "type": "object",
        "properties": {
          "titles": {
            "type": "array",
            "description": "List of titles",
            "items": {
              "$ref": "#/components/schemas/Title"
            }
          }
        },
        "description": "Representation of a Title List"
      },
      "Trigger": {
        "type": "object",
        "properties": {
          "activationTime": {
            "type": "string",
            "description": "The time the trigger will be activated",
            "format": "date-time",
            "example": "2024-04-22T09:58:00Z"
          },
          "displayTimeTable": {
            "type": "string",
            "description": "Description of when the trigger is being activated",
            "example": "Every Monday at 00:00:00"
          }
        },
        "description": "Representation of a Trigger"
      },
      "User": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Unique user identifier"
          },
          "name": {
            "type": "string",
            "description": "Name of the user"
          },
          "defaultAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "titleCode": {
            "type": "string",
            "description": "User title code"
          },
          "title": {
            "type": "string",
            "description": "User title"
          },
          "firstName": {
            "type": "string",
            "description": "User first name"
          },
          "lastName": {
            "type": "string",
            "description": "User last name"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          },
          "displayUid": {
            "type": "string",
            "description": "User identifier"
          },
          "customerId": {
            "type": "string",
            "description": "Customer identifier"
          },
          "deactivationDate": {
            "type": "string",
            "description": "Deactivation date",
            "format": "date-time",
            "example": "2024-04-22T09:57:57Z"
          },
          "defaultPointOfServiceName": {
            "type": "string",
            "description": "Name of the default pick up location",
            "example": "Misato"
          },
          "orgUnit": {
            "$ref": "#/components/schemas/B2BUnit"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "approvers": {
            "type": "array",
            "description": "List of organizational approvers",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "selected": {
            "type": "boolean",
            "description": "Boolean flag of whether the user is selected",
            "example": true
          },
          "active": {
            "type": "boolean",
            "description": "Boolean flag of whether the user is active/enabled or not",
            "example": true
          },
          "email": {
            "type": "string",
            "description": "Email of the user",
            "example": "mark.rivers@rustic-hw.com"
          },
          "mobileNumber": {
            "type": "string",
            "description": "Mobile Number"
          },
          "emailLanguage": {
            "type": "string",
            "description": "Email Language"
          }
        },
        "description": "User's object."
      },
      "UserGroup": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Unique user identifier"
          },
          "name": {
            "type": "string",
            "description": "Name of the user"
          },
          "members": {
            "type": "array",
            "description": "List of members",
            "items": {
              "$ref": "#/components/schemas/Principal"
            }
          },
          "membersCount": {
            "type": "integer",
            "description": "Number of members",
            "format": "int32"
          }
        },
        "description": "User group object with id and name."
      },
      "UserGroupList": {
        "type": "object",
        "properties": {
          "userGroups": {
            "type": "array",
            "description": "List of user groups",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            }
          },
          "totalNumber": {
            "type": "integer",
            "description": "Total number",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size",
            "format": "int32"
          },
          "numberOfPages": {
            "type": "integer",
            "description": "Number of pages",
            "format": "int32"
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page",
            "format": "int32"
          }
        },
        "description": "Representation of an User Group List"
      },
      "UserSignUp": {
        "required": [
          "firstName",
          "lastName",
          "password",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "user id, unique string required to create new user. It can be email"
          },
          "firstName": {
            "type": "string",
            "description": "first name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "last name of the user"
          },
          "titleCode": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "description": "user password"
          }
        },
        "description": "User's object."
      },
      "VariantCategory": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Variant category name"
          },
          "hasImage": {
            "type": "boolean",
            "description": "Flag if varian category has image assigned"
          },
          "priority": {
            "type": "integer",
            "description": "Priority number of variant category",
            "format": "int32"
          }
        },
        "description": "Representation of a Variant Category"
      },
      "VariantMatrixElement": {
        "type": "object",
        "properties": {
          "variantValueCategory": {
            "$ref": "#/components/schemas/VariantValueCategory"
          },
          "parentVariantCategory": {
            "$ref": "#/components/schemas/VariantCategory"
          },
          "variantOption": {
            "$ref": "#/components/schemas/VariantOption"
          },
          "elements": {
            "type": "array",
            "description": "List of elements with the type of variant matrix element",
            "items": {
              "$ref": "#/components/schemas/VariantMatrixElement"
            }
          },
          "isLeaf": {
            "type": "boolean"
          }
        },
        "description": "Representation of a Variant Matrix Element"
      },
      "VariantOption": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the variant option"
          },
          "stock": {
            "$ref": "#/components/schemas/Stock"
          },
          "url": {
            "type": "string",
            "description": "Url address of the variant option"
          },
          "priceData": {
            "$ref": "#/components/schemas/Price"
          },
          "variantOptionQualifiers": {
            "type": "array",
            "description": "List of variant option qualifiers",
            "items": {
              "$ref": "#/components/schemas/VariantOptionQualifier"
            }
          }
        },
        "description": "Representation of a Variant Option"
      },
      "VariantOptionQualifier": {
        "type": "object",
        "properties": {
          "qualifier": {
            "type": "string",
            "description": "Qualifier"
          },
          "name": {
            "type": "string",
            "description": "Name of variant option qualifier"
          },
          "value": {
            "type": "string",
            "description": "Value of variant option qualifier"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          }
        },
        "description": "Representation of a Variant Option Qualifier"
      },
      "VariantValueCategory": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the variant value category"
          },
          "sequence": {
            "type": "integer",
            "description": "Sequence number of variant value category",
            "format": "int32"
          },
          "superCategories": {
            "type": "array",
            "description": "Parent category of variant value category",
            "items": {
              "$ref": "#/components/schemas/VariantCategory"
            }
          }
        },
        "description": "Representation of a Variant Value Category"
      },
      "Voucher": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The identifier of the Voucher. This is the first part of voucher code which holds first 3 letters, like: 123"
          },
          "voucherCode": {
            "type": "string",
            "description": "Voucher code, is the holder for keeping specific occasional voucher related to business usage. It can be generated and looks like: 123-H8BC-Y3D5-34AL"
          },
          "name": {
            "type": "string",
            "description": "Name of the voucher"
          },
          "description": {
            "type": "string",
            "description": "Description of the voucher"
          },
          "value": {
            "type": "number",
            "description": "Value of the voucher. Example of such value is: 15.0d",
            "format": "double"
          },
          "valueFormatted": {
            "type": "string",
            "description": "Formatted value of the voucher"
          },
          "valueString": {
            "type": "string",
            "description": "The value of the voucher to display. Example: 15.0%"
          },
          "freeShipping": {
            "type": "boolean",
            "description": "Specifies if the order this voucher is applied to is shipped for free (true) or not (false). Defaults to false."
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "appliedValue": {
            "$ref": "#/components/schemas/Price"
          }
        },
        "description": "Representation of a Voucher"
      },
      "VoucherList": {
        "type": "object",
        "properties": {
          "vouchers": {
            "type": "array",
            "description": "List of vouchers",
            "items": {
              "$ref": "#/components/schemas/Voucher"
            }
          }
        },
        "description": "Representation of a Voucher List"
      },
      "WeekdayOpeningDay": {
        "type": "object",
        "properties": {
          "openingTime": {
            "$ref": "#/components/schemas/Time"
          },
          "closingTime": {
            "$ref": "#/components/schemas/Time"
          },
          "weekDay": {
            "type": "string",
            "description": "Text representation of week day opening day"
          },
          "closed": {
            "type": "boolean",
            "description": "Flag stating if weekday opening day is closed"
          }
        },
        "description": "Representation of a Weekday Opening Day"
      },
      "carrier": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Carrier code"
          },
          "name": {
            "type": "string",
            "description": "Carrier name"
          }
        },
        "description": "Carrier"
      },
      "consignmentTracking": {
        "type": "object",
        "properties": {
          "statusDisplay": {
            "type": "string",
            "description": "Consignment status",
            "example": "inTransit"
          },
          "carrierDetails": {
            "$ref": "#/components/schemas/carrier"
          },
          "trackingID": {
            "type": "string",
            "description": "Tracking identifier"
          },
          "trackingUrl": {
            "type": "string",
            "description": "The tracking url provided by the carrier"
          },
          "targetArrivalDate": {
            "type": "string",
            "description": "Target arrival date",
            "format": "date-time",
            "example": "2024-04-22T09:58:01Z"
          },
          "trackingEvents": {
            "type": "array",
            "description": "Logistics tracking information",
            "items": {
              "$ref": "#/components/schemas/consignmentTrackingEvent"
            }
          }
        },
        "description": "Consignment tracking data"
      },
      "consignmentTrackingEvent": {
        "type": "object",
        "properties": {
          "eventDate": {
            "type": "string",
            "description": "Date of tracking event",
            "format": "date-time",
            "example": "2024-04-22T09:58:01Z"
          },
          "detail": {
            "type": "string",
            "description": "Tracking detail"
          },
          "location": {
            "type": "string",
            "description": "Consignment location"
          },
          "referenceCode": {
            "type": "string",
            "description": "Logistics status"
          }
        },
        "description": "Consignment tracking event"
      },
      "conversation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "conversation identifier"
          },
          "status": {
            "type": "string",
            "description": "conversation status"
          },
          "agent": {
            "$ref": "#/components/schemas/Principal"
          },
          "customer": {
            "$ref": "#/components/schemas/Principal"
          },
          "createDate": {
            "type": "string",
            "description": "create date",
            "format": "date-time",
            "example": "2024-04-22T09:58:00Z"
          },
          "closeDate": {
            "type": "string",
            "description": "close date",
            "format": "date-time",
            "example": "2024-04-22T09:58:00Z"
          },
          "latestMessage": {
            "$ref": "#/components/schemas/conversationMessage"
          }
        },
        "description": "Conversation"
      },
      "conversationList": {
        "type": "object",
        "properties": {
          "conversations": {
            "type": "array",
            "description": "conversation data",
            "items": {
              "$ref": "#/components/schemas/conversation"
            }
          }
        },
        "description": "Conversation list"
      },
      "conversationMessage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "message content"
          },
          "sentTime": {
            "type": "string",
            "description": "sent time",
            "format": "date-time",
            "example": "2024-04-22T09:58:00Z"
          },
          "sender": {
            "$ref": "#/components/schemas/Principal"
          }
        },
        "description": "Conversation message"
      },
      "conversationMessageList": {
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string",
            "description": "conversation identifier"
          },
          "messages": {
            "type": "array",
            "description": "the messages list of this conversation",
            "items": {
              "$ref": "#/components/schemas/conversationMessage"
            }
          }
        },
        "description": "the list of messages"
      },
      "customerInterestsSearchPage": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "List of product interest relation",
            "items": {
              "$ref": "#/components/schemas/productInterestRelation"
            }
          },
          "sorts": {
            "type": "array",
            "description": "Sorting information",
            "items": {
              "$ref": "#/components/schemas/sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/pagination"
          }
        },
        "description": "Customer interests search page"
      },
      "deprecatedPagination": {
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "description": "The number of results per page. A page may have less results if there are less than a full page of results, only on the last page in the results",
            "format": "int32"
          },
          "currentPage": {
            "type": "integer",
            "description": "The current page number. The first page is number zero (0), the second page is number one (1), and so on",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "The selected sort code"
          },
          "totalPages": {
            "type": "integer",
            "description": "The total number of pages. This is the number of pages, each of pageSize, required to display the totalResults.",
            "format": "int32"
          },
          "totalResults": {
            "type": "integer",
            "description": "The total number of matched results across all pages",
            "format": "int64"
          }
        },
        "description": "Representation of a search results pagination"
      },
      "error": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the error e.g. 'LowStockError'."
          },
          "reason": {
            "type": "string",
            "description": "Additional classification specific for each error type e.g. 'noStock'."
          },
          "message": {
            "type": "string",
            "description": "Descriptive, human readable error message."
          },
          "subjectType": {
            "type": "string",
            "description": "Type of the object related to the error e.g. 'entry'."
          },
          "subject": {
            "type": "string",
            "description": "Identifier of the related object e.g. '1'."
          },
          "errorCode": {
            "type": "string",
            "description": "Error code"
          },
          "language": {
            "type": "string",
            "example": "English"
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "exceptionMessage": {
            "type": "string"
          }
        },
        "description": "Error message"
      },
      "errorList": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "List of errors"
      },
      "notificationPreference": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string",
            "description": "preference channel",
            "example": "email, sms, site_message"
          },
          "value": {
            "type": "string",
            "description": "the corresponding value of current channel, for example, for SMS it should be a mobile number; for email it should be an email address"
          },
          "enabled": {
            "type": "boolean",
            "description": "if true, the channel is on; if false, the channel is off"
          },
          "visible": {
            "type": "boolean",
            "description": "if true, the channel is visible; if false, the channel is invisible"
          }
        },
        "description": "Notification preference"
      },
      "notificationPreferenceList": {
        "type": "object",
        "properties": {
          "preferences": {
            "type": "array",
            "description": "notification preferences",
            "items": {
              "$ref": "#/components/schemas/notificationPreference"
            }
          }
        },
        "description": "Notification preference list"
      },
      "pagination": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of elements on this page",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of elements",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "description": "Current page number",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages",
            "format": "int32"
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates if there is next page"
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates if there is previous page"
          }
        },
        "description": "Pagination info"
      },
      "productInterestEntry": {
        "type": "object",
        "properties": {
          "interestType": {
            "type": "string",
            "description": "Product interest type"
          },
          "dateAdded": {
            "type": "string",
            "description": "Added date of product interest",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date of product interest",
            "format": "date-time",
            "example": "2024-04-22T09:57:58Z"
          }
        },
        "description": "Product interest entry"
      },
      "productInterestRelation": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "productInterestEntry": {
            "type": "array",
            "description": "List of product interest entry",
            "items": {
              "$ref": "#/components/schemas/productInterestEntry"
            }
          }
        },
        "description": "Product interest relation"
      },
      "siteMessage": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "message uid"
          },
          "subject": {
            "type": "string",
            "description": "message subject"
          },
          "body": {
            "type": "string",
            "description": "message body"
          },
          "notificationType": {
            "type": "string",
            "description": "notification type used for this message",
            "enum": [
              "BACK_IN_STOCK",
              "COUPON_EFFECTIVE",
              "NOTIFICATION",
              "COUPON_EXPIRE"
            ]
          },
          "sentDate": {
            "type": "string",
            "description": "sent date",
            "format": "date-time",
            "example": "2024-04-22T09:58:02Z"
          }
        },
        "description": "Site message"
      },
      "siteMessageSearchResult": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "description": "site messages",
            "items": {
              "$ref": "#/components/schemas/siteMessage"
            }
          },
          "sorts": {
            "type": "array",
            "description": "sorting information",
            "items": {
              "$ref": "#/components/schemas/sort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/pagination"
          }
        },
        "description": "Site message search result"
      },
      "sort": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of Sort"
          },
          "name": {
            "type": "string",
            "description": "Name of Sort"
          },
          "selected": {
            "type": "boolean",
            "description": "Flag stating when Sort is selected"
          }
        },
        "description": "Sort option"
      }
    },
    "securitySchemes": {
      "oauth2_Password": {
        "type": "oauth2",
        "flows": {
          "password": {
            "tokenUrl": "/authorizationserver/oauth/token",
            "scopes": {
              "basic": ""
            }
          }
        }
      },
      "oauth2_client_credentials": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/authorizationserver/oauth/token",
            "scopes": {
              "extended": ""
            }
          }
        }
      }
    }
  },
  "x-sap-api-type": "REST",
  "x-sap-shortText": "Enables you to manage all of the common commerce functionality.",
  "x-sap-stateInfo": {
    "state": "Active"
  },
  "x-servers": [
    {
      "templates": {
        "url": {
          "description": "SAP Commerce Cloud server URL where the application is deployed."
        }
      },
      "description": "Commerce Webservices v2 REST API endpoint",
      "url": "https://{url}/occ/v2"
    }
  ]
}
